[
["chapter-setup-hrsample-db.html", "Chapter 6 Create the hrsample database in PostgreSQL in Docker 6.1 Overview 6.2 Verify that Docker is up and running 6.3 Clean up if appropriate 6.4 Build the pet-sql Docker image 6.5 Run the pet-sql Docker Image 6.6 Connect to PostgreSQL with R 6.7 Stop and start to demonstrate persistence 6.8 Cleaning up 6.9 Using the sql-pet container in the rest of the book", " Chapter 6 Create the hrsample database in PostgreSQL in Docker NOTE: This chapter doesn’t go into the details of creating or restoring the hrsample database. For more detail on what’s going on behind the scenes, you can examine the step-by-step code in: source('book-src/restore-hrsample-postgres-on-docker.R') This chapter demonstrates how to: Setup the hrsample database in Docker Stop and start Docker container to demonstrate persistence Connect to and disconnect R from the hrsample database Set up the environment for subsequent chapters 6.1 Overview In the last chapter we connected to PostgreSQL from R. Now we set up a “realistic” database named hrsample. There are different approaches to doing this: this chapter sets it up in a way that doesn’t show all the Docker details. These packages are called in this Chapter: library(tidyverse) library(DBI) library(RPostgres) library(glue) require(knitr) library(dbplyr) library(sqlpetr) library(bookdown) library(here) 6.2 Verify that Docker is up and running sp_check_that_docker_is_up() ## [1] &quot;Docker is up, running these containers:&quot; ## [2] &quot;CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES&quot; ## [3] &quot;a66142ed0ec2 postgres:10 \\&quot;docker-entrypoint.s…\\&quot; 9 minutes ago Up 2 minutes 0.0.0.0:5432-&gt;5432/tcp hrsample&quot; 6.3 Clean up if appropriate Force-remove the cattle and sql-pet containers if they exist (e.g., from a prior runs): sp_docker_remove_container(&quot;cattle&quot;) ## [1] 0 sp_docker_remove_container(&quot;hrsample&quot;) ## [1] 0 6.4 Build the pet-sql Docker image UPDATE: For the rest of the book we will be using a Docker image called hrsample. To save space here in the book, we’ve created a function in sqlpetr to build this image, called sp_make_dvdrental_image. Vignette Building the hsrample Docker Image describes the build process. # sp_make_dvdrental_image(&quot;postgres-dvdrental&quot;) source(here(&quot;book-src&quot;, &quot;restore-hrsample-postgres-on-docker.R&quot;)) ## docker run --detach --name hrsample --publish 5432:5432 --mount type=bind,source=&quot;/Users/jds/Documents/Library/R/r-system/sql-pet&quot;,target=/petdir postgres:10 UPDATE: Did it work? We have a function that lists the images into a tibble! sp_docker_start(&quot;hrsample&quot;) sp_docker_images_tibble() # Doesn&#39;t produce the expected output. ## # A tibble: 3 x 7 ## image_id repository tag digest created created_at size ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 aff06852… postgres-dv… latest &lt;none&gt; 6 week… 2019-04-26 … 294MB ## 2 c149455a… &lt;none&gt; &lt;none&gt; &lt;none&gt; 2 mont… 2019-03-18 … 252MB ## 3 3e016ba4… postgres 10 sha256:5c702997… 3 mont… 2019-03-04 … 230MB 6.5 Run the pet-sql Docker Image UPDATE: Now we can run the image in a container and connect to the database. To run the image we use an sqlpetr function called sp_pg_docker_run sp_pg_docker_run( container_name = &quot;sql-pet&quot;, image_tag = &quot;postgres-dvdrental&quot;, postgres_password = &quot;postgres&quot; ) UPDATE: Did it work? sp_docker_containers_tibble() ## # A tibble: 1 x 12 ## container_id image command created_at created ports status size names ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 dee42b174456 post… docker… 2019-06-1… 10 sec… 0.0.… Up Le… 63B … hrsa… ## # … with 3 more variables: labels &lt;chr&gt;, mounts &lt;chr&gt;, networks &lt;chr&gt; 6.6 Connect to PostgreSQL with R Use the DBI package to connect to the hrsample database in PostgreSQL. Remember the settings discussion about [keeping passwords hidden][Pause for some security considerations] con &lt;- sp_get_postgres_connection( host = &quot;localhost&quot;, port = 5432, user = &quot;postgres&quot;, password = &quot;postgres&quot;, dbname = &quot;hrsample&quot;, seconds_to_test = 30, connection_tab = TRUE ) For the moment we by-pass some complexity that results from the fact that the hrsample has multiple schemas and that we are interested in only one of them, named hrsample. tbl(con, in_schema(&quot;information_schema&quot;, &quot;schemata&quot;)) %&gt;% select(catalog_name, schema_name, schema_owner) %&gt;% collect() ## # A tibble: 7 x 3 ## catalog_name schema_name schema_owner ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 hrsample pg_toast postgres ## 2 hrsample pg_temp_1 postgres ## 3 hrsample pg_toast_temp_1 postgres ## 4 hrsample pg_catalog postgres ## 5 hrsample public postgres ## 6 hrsample information_schema postgres ## 7 hrsample hrsample postgres Schemas will be discussed later on because multiple schemas are the norm in an enterprise database environment, but they are a side issue at this point. So we switch the order in which PostgreSQL searches for objects with the following SQL code: dbExecute(con, &quot;set search_path to hrsample, public;&quot;) ## [1] 0 With the custom search_path, the following command works, but it will fail without out it. dbListTables(con) ## [1] &quot;contact_table&quot; &quot;deskhistory&quot; &quot;deskjob&quot; ## [4] &quot;education_table&quot; &quot;employeeinfo&quot; &quot;hierarchy&quot; ## [7] &quot;performancereview&quot; &quot;recruiting_table&quot; &quot;rollup_view&quot; ## [10] &quot;salaryhistory&quot; &quot;skills_table&quot; Same for dbListFields: dbListFields(con, &quot;employeeinfo&quot;) ## [1] &quot;employee_num&quot; &quot;first_name&quot; &quot;last_name&quot; &quot;city&quot; ## [5] &quot;state&quot; Thus with this search order, the following two produce identical results: tbl(con, in_schema(&quot;hrsample&quot;, &quot;employeeinfo&quot;)) %&gt;% head() ## # Source: lazy query [?? x 5] ## # Database: postgres [postgres@localhost:5432/hrsample] ## employee_num first_name last_name city state ## &lt;int&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 3 Lana Chrostowski Utica MS ## 2 20 Justine Kopiasz Milnor ND ## 3 21 Claude Feldman Woodville AL ## 4 38 Ronald Finona West Glover VT ## 5 39 Stewart Pruess Martin OH ## 6 41 Nona Favalora Pascagoula MS tbl(con, &quot;employeeinfo&quot;) %&gt;% head() ## # Source: lazy query [?? x 5] ## # Database: postgres [postgres@localhost:5432/hrsample] ## employee_num first_name last_name city state ## &lt;int&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 3 Lana Chrostowski Utica MS ## 2 20 Justine Kopiasz Milnor ND ## 3 21 Claude Feldman Woodville AL ## 4 38 Ronald Finona West Glover VT ## 5 39 Stewart Pruess Martin OH ## 6 41 Nona Favalora Pascagoula MS Disconnect from the database: dbDisconnect(con) 6.7 Stop and start to demonstrate persistence Stop the container: sp_docker_stop(&quot;hrsample&quot;) sp_docker_containers_tibble() ## # A tibble: 0 x 0 When we stopped sql-pet, it no longer appeared in the tibble. But the container is still there. sp_docker_containers_tibble by default only lists the running containers. But we can use the list_all option and see it: sp_docker_containers_tibble(list_all = TRUE) ## # A tibble: 1 x 12 ## container_id image command created_at created ports status size names ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 dee42b174456 post… docker… 2019-06-1… 12 sec… &lt;NA&gt; Exite… 0B (… hrsa… ## # … with 3 more variables: labels &lt;chr&gt;, mounts &lt;chr&gt;, networks &lt;chr&gt; Restart the container and verify that the hrsample tables are still there: sp_docker_start(&quot;hrsample&quot;) sp_docker_containers_tibble() ## # A tibble: 1 x 12 ## container_id image command created_at created ports status size names ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 dee42b174456 post… docker… 2019-06-1… 13 sec… 0.0.… Up Le… 63B … hrsa… ## # … with 3 more variables: labels &lt;chr&gt;, mounts &lt;chr&gt;, networks &lt;chr&gt; Connect to the hrsample database in PostgreSQL: con &lt;- sp_get_postgres_connection( host = &quot;localhost&quot;, port = 5432, user = &quot;postgres&quot;, password = &quot;postgres&quot;, dbname = &quot;hrsample&quot;, seconds_to_test = 30 ) Check that you can still see the first few rows of the employeeinfo table: tbl(con, in_schema(&quot;hrsample&quot;, &quot;employeeinfo&quot;)) %&gt;% head() ## # Source: lazy query [?? x 5] ## # Database: postgres [postgres@localhost:5432/hrsample] ## employee_num first_name last_name city state ## &lt;int&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 3 Lana Chrostowski Utica MS ## 2 20 Justine Kopiasz Milnor ND ## 3 21 Claude Feldman Woodville AL ## 4 38 Ronald Finona West Glover VT ## 5 39 Stewart Pruess Martin OH ## 6 41 Nona Favalora Pascagoula MS 6.8 Cleaning up Always have R disconnect from the database when you’re done. dbDisconnect(con) Stop the sql-pet container: sp_docker_stop(&quot;hrsample&quot;) Show that the container still exists even though it’s not running sp_show_all_docker_containers() ## CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES ## dee42b174456 postgres:10 &quot;docker-entrypoint.s…&quot; 14 seconds ago Exited (0) Less than a second ago hrsample Next time, you can just use this command to start the container: sp_docker_start(&quot;hrsample&quot;) And once stopped, the container can be removed with: sp_check_that_docker_is_up(&quot;hrsample&quot;) 6.9 Using the sql-pet container in the rest of the book After this point in the book, we assume that Docker is up and that we can always start up our sql-pet database with: sp_docker_start(&quot;hrsample&quot;) "]
]
