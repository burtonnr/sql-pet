[
["chapter-exploring-a-single-table.html", "Chapter 8 Exploring a Single Table (asking Business Questions) 8.1 Setup our standard working environment 8.2 The overall AdventureWorks sales picture 8.3 Annual sales 8.4 Monthly Sales 8.5 The effect of online sales 8.6 Impact of order type on monthly sales 8.7 Correcting the order date for Sales Reps 8.8 Monthly Sales Rep Performance Analysis 8.9 These queries and graphs may be redundant 8.10 Disconnect from the database and stop Docker", " Chapter 8 Exploring a Single Table (asking Business Questions) This chapter demonstrates how to: Begin the process of investigating a database from a business perspective Dig into a single Adventureworks table containing sales data Investigate the data from a business value perspective The previous chapter has demonstrated some of the automated techniques for showing what’s in the table using specific R functions and packages. Now we demonstrate a step-by-step process of making sense of what’s in a table from a business perspective. We explore one table, illustrating the kind of detective work that’s often involved in understand the meaning of the data in a single table. We’ll investigate the salesorderheader table in the sales schema in this example with an eye on the AdventureWorks busieness’ sales. For this kind of detective work we are seeking to undertand the following elements separately and as they interact with each other (and they all do): The data that’s stored in the database The overall structure of the data (how different tables connect with each other and affect how to interpet each other) How the data is entered at a day-to-day level to represent business activities How the business itself is changing 8.1 Setup our standard working environment Use these libraries: library(tidyverse) library(DBI) library(RPostgres) library(glue) require(knitr) library(dbplyr) library(sqlpetr) library(bookdown) library(here) library(lubridate) library(scales) # ggplot xy scales theme_set(theme_light()) Connect to adventureworks: sp_docker_start(&quot;adventureworks&quot;) Sys.sleep(sleep_default) con &lt;- sp_get_postgres_connection( host = &quot;localhost&quot;, port = 5432, user = &quot;postgres&quot;, password = &quot;postgres&quot;, dbname = &quot;adventureworks&quot;, seconds_to_test = sleep_default, connection_tab = TRUE ) 8.2 The overall AdventureWorks sales picture On an annual basis, are sales dollars trending up, down or flat? We begin with total revenue and number of orders at different levels of detail. You will find that many columns have the same name in an enterprise database. For example, in the adventureworks database, almost all tables have columns named rowguid and modifieddate. Naming columns carefully (whether retrieved from the database or calculated) will pay off as our queries become more complex. Using soh to tag statistics that are derived from the salesorderheader table is one example of careful naming. A naming convention that reminds you of the original source of a column is a matter of applying some logic to how things are named; you, future you, and your collaborators will appreciate it although different naming conventions are completely valid. In the following example soh appears in different positions in the column name but it is easy to guess at a glance that the data comes from the salesorderheader table. 8.3 Annual sales annual_sales &lt;- tbl(con, in_schema(&quot;sales&quot;, &quot;salesorderheader&quot;)) %&gt;% mutate(year = substr(as.character(orderdate), 1, 4)) %&gt;% group_by(year) %&gt;% summarize( min_soh_orderdate = min(orderdate, na.rm = TRUE), max_soh_orderdate = max(orderdate, na.rm = TRUE), total_soh_dollars = round(sum(subtotal, na.rm = TRUE), 2), avg_total_soh_dollars = round(mean(subtotal, na.rm = TRUE),2), soh_count = n() ) %&gt;% arrange(year) %&gt;% select(year, min_soh_orderdate, max_soh_orderdate, total_soh_dollars, avg_total_soh_dollars, soh_count) %&gt;% show_query %&gt;% collect() ## &lt;SQL&gt; ## SELECT &quot;year&quot;, &quot;min_soh_orderdate&quot;, &quot;max_soh_orderdate&quot;, &quot;total_soh_dollars&quot;, &quot;avg_total_soh_dollars&quot;, &quot;soh_count&quot; ## FROM (SELECT * ## FROM (SELECT &quot;year&quot;, MIN(&quot;orderdate&quot;) AS &quot;min_soh_orderdate&quot;, MAX(&quot;orderdate&quot;) AS &quot;max_soh_orderdate&quot;, ROUND((SUM(&quot;subtotal&quot;)) :: numeric, 2) AS &quot;total_soh_dollars&quot;, ROUND((AVG(&quot;subtotal&quot;)) :: numeric, 2) AS &quot;avg_total_soh_dollars&quot;, COUNT(*) AS &quot;soh_count&quot; ## FROM (SELECT &quot;salesorderid&quot;, &quot;revisionnumber&quot;, &quot;orderdate&quot;, &quot;duedate&quot;, &quot;shipdate&quot;, &quot;status&quot;, &quot;onlineorderflag&quot;, &quot;purchaseordernumber&quot;, &quot;accountnumber&quot;, &quot;customerid&quot;, &quot;salespersonid&quot;, &quot;territoryid&quot;, &quot;billtoaddressid&quot;, &quot;shiptoaddressid&quot;, &quot;shipmethodid&quot;, &quot;creditcardid&quot;, &quot;creditcardapprovalcode&quot;, &quot;currencyrateid&quot;, &quot;subtotal&quot;, &quot;taxamt&quot;, &quot;freight&quot;, &quot;totaldue&quot;, &quot;comment&quot;, &quot;rowguid&quot;, &quot;modifieddate&quot;, SUBSTR(CAST(&quot;orderdate&quot; AS TEXT), 1, 4) AS &quot;year&quot; ## FROM sales.salesorderheader) &quot;dbplyr_001&quot; ## GROUP BY &quot;year&quot;) &quot;dbplyr_002&quot; ## ORDER BY &quot;year&quot;) &quot;dbplyr_003&quot; annual_sales ## # A tibble: 4 x 6 ## year min_soh_orderdate max_soh_orderdate total_soh_dolla… ## &lt;chr&gt; &lt;dttm&gt; &lt;dttm&gt; &lt;dbl&gt; ## 1 2011 2011-05-31 00:00:00 2011-12-31 00:00:00 12641672. ## 2 2012 2012-01-01 00:00:00 2012-12-31 00:00:00 33524301. ## 3 2013 2013-01-01 00:00:00 2013-12-31 00:00:00 43622479. ## 4 2014 2014-01-01 00:00:00 2014-06-30 00:00:00 20057929. ## # … with 2 more variables: avg_total_soh_dollars &lt;dbl&gt;, soh_count &lt;int64&gt; Both 2011 and 2014 are shorter time spans than the other two years, making comparison across the years more difficult. We might normalize the totals based on the number of months in each year, but we first graph total dollars: 8.3.1 Total sales by year min_soh_dt &lt;- min(annual_sales$min_soh_orderdate) max_soh_dt &lt;- max(annual_sales$max_soh_orderdate) ggplot(data = annual_sales, aes(x = year, y = total_soh_dollars)) + geom_col() + xlab(&quot;Year&quot;) + ylab(&quot;Sales $&quot;) + scale_y_continuous(labels = scales::dollar_format()) + ggtitle(paste(&quot;Adventure Works Sales Dollars by Year\\n &quot;, min_soh_dt, &quot; - &quot;, max_soh_dt)) From 2011 through 2013, sales are trending up. Are sales dollars for 2014 really down, is it a shorter year (are sales seasonal)? To see if the sales dollars are seasonal, we will drill in and look at the monthly sales. But first, let’s look at the number of orders and whether there’s a pattern in the sales data. 8.3.2 Total order volume Look at number of orders per year: ggplot(data = annual_sales, aes(x = year, y = as.numeric(soh_count))) + geom_col() + xlab(&quot;Year&quot;) + ylab(&quot;Total number of orders&quot;) + ggtitle(paste(&quot;Number of Orders per Year\\n&quot;, min_soh_dt, &quot; - &quot;, max_soh_dt)) That’s a huge jump in the number of orders between 2012 and 2013. Given the total annual dollars, we ask whether the size of a sale has changed. 8.3.3 Average dollars per sale ggplot(data = annual_sales, aes(x = year, y = avg_total_soh_dollars)) + geom_col() + xlab(&quot;Year&quot;) + ylab(&quot;Average sale amount&quot;) + scale_y_continuous(labels = scales::dollar_format()) + ggtitle(paste(&quot;Average Dollars per Sale\\n&quot;, min_soh_dt, &quot; - &quot;, max_soh_dt)) That’s a remarkable drop between average sale of more than $7,000 to less than $3,000. 8.3.4 Order volume and average sale together Looking at order volume and average sales size together suggests that indeed something big happened between 2012 and 2013. annual_sales %&gt;% arrange(min_soh_orderdate) %&gt;% # mutate(year = year(orderdate)) %&gt;% ggplot(aes(x = avg_total_soh_dollars, y = as.numeric(soh_count))) + geom_point() + geom_text(aes(label = year(min_soh_orderdate), hjust = .5, vjust = 0, color = year)) + geom_path() + xlab(&quot;Average dollars per order&quot;) + ylab(&quot;Total number of orders&quot;) + scale_y_continuous(labels = scales::dollar_format()) + scale_x_continuous(labels = scales::dollar_format()) + ggtitle(paste(&quot;Number of Orders by Average Order Amount\\n&quot;, min_soh_dt, &quot; - &quot;, max_soh_dt)) From 2012 to 2013 the average dollars per order dropped from more than $8,500 to nearly $3,000 while the total number of order shot up from less than 4,000 to more than 14,000. Why are the number of orders increasing, but the average dollar amount of a sale is dropping? We need to drill down to look at monthly sales, adapting the first query to group by month and year. 8.4 Monthly Sales The next code block drills down from annual sales dollars to monthly sales dollars. We adopt a more R-like strategy; rather than yr as a character variable, we just download the orderdate. R handles the coversion from the postgres date-time to an R date-time. We then convert it to a simple date with a lubridate function. monthly_sales &lt;- tbl(con, in_schema(&quot;sales&quot;, &quot;salesorderheader&quot;)) %&gt;% select(orderdate, subtotal) %&gt;% collect() %&gt;% # From here on we&#39;re in R mutate(orderdate = date(orderdate), orderdate = round_date(orderdate, &quot;month&quot;)) %&gt;% # group_by( orderdate) %&gt;% summarize( min_soh_orderdate = min(orderdate, na.rm = TRUE), max_soh_orderdate = max(orderdate, na.rm = TRUE), total_soh_dollars = round(sum(subtotal, na.rm = TRUE), 2), avg_total_soh_dollars = round(mean(subtotal, na.rm = TRUE), 2), soh_count = n() ) Plotting the monthly sales data: ggplot(data = monthly_sales, aes(x = orderdate, y = total_soh_dollars)) + geom_col() + xlab(&quot;Month&quot;) + ylab(&quot;Sales Dollars&quot;) + scale_y_continuous(labels = dollar) + theme(plot.title = element_text(hjust = 0.5)) + # Center the title ggtitle(paste(&quot;Sales by Month\\n&quot;, min_soh_dt, &quot; - &quot;, max_soh_dt)) 8.4.1 Comparing dollars and orders to a baseline To look at dollars and the number of orders together, we compare the monthly data to the yearly average for 2011. start_year &lt;- monthly_sales %&gt;% mutate(yr = year(orderdate)) %&gt;% group_by(yr) %&gt;% summarize(total_soh_dollars = sum(total_soh_dollars), soh_count = sum(soh_count), n_months = n(), avg_dollars = total_soh_dollars / n_months, avg_count = soh_count / n_months) %&gt;% filter(yr == min(yr)) Use 2011 as a baseline: start_year ## # A tibble: 1 x 6 ## yr total_soh_dollars soh_count n_months avg_dollars avg_count ## &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 2011 12354206. 1513 7 1764887. 216. Re express monthly data in terms of the baseline and plot: normalized_monthly_sales &lt;- monthly_sales %&gt;% mutate(dollars = (100 * total_soh_dollars) / start_year$avg_dollars, number_of_orders = (100 * soh_count) / start_year$avg_count) %&gt;% ungroup() normalized_monthly_sales &lt;- normalized_monthly_sales %&gt;% select(orderdate, dollars, number_of_orders) %&gt;% pivot_longer(-orderdate, names_to = &quot;relative_to_2011_average&quot;, values_to = &quot;amount&quot; ) normalized_monthly_sales %&gt;% ggplot(aes(orderdate, amount, color = relative_to_2011_average)) + geom_line() + geom_hline(yintercept = 100) + xlab(&quot;Date&quot;) + ylab(&quot;&quot;) + scale_x_date(date_labels = &quot;%Y-%m&quot;, date_breaks = &quot;6 months&quot;) + ggtitle(paste(&quot;Adventureworks Normalized Monthly Sales\\n&quot;, &quot;Number of Sales Orders and Dollar Totals\\n&quot;, min_soh_dt, &quot; to &quot;, max_soh_dt)) 8.4.2 Check lagged monthly data The total sales are trending up but suspiciously uneven. Looking at lags might confirm just how much month-to-month difference there is: lagged_monthly_sales &lt;- monthly_sales %&gt;% mutate(monthly_sales_change = (lag(total_soh_dollars, 1)) - total_soh_dollars) summary(lagged_monthly_sales$monthly_sales_change) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## -1667368.56 -1082792.47 52892.65 18287.07 816048.02 4399378.90 ## NA&#39;s ## 1 Although median monthly sales rise by about $53 thousand, it’s curious that in one fourth of the months the drop between one month and the next is between fifteen hundred and a million dollars. AventureWorks sales are very uneven. 8.5 The effect of online sales We have suspected that the business has changed a lot with the advent of online orders so we check the impact of onlineorderflag on annual sales. 8.5.1 Add onlineorderflag to our query annual_sales &lt;- tbl(con, in_schema(&quot;sales&quot;, &quot;salesorderheader&quot;)) %&gt;% select(orderdate, subtotal, onlineorderflag) %&gt;% collect() %&gt;% mutate(orderdate = date(orderdate), orderdate = round_date(orderdate, &quot;year&quot;), onlineorderflag = if_else(onlineorderflag == FALSE, &quot;Sales Rep&quot;, &quot;Online&quot;), onlineorderflag = as.factor(onlineorderflag)) %&gt;% group_by(orderdate, onlineorderflag) %&gt;% summarize( min_soh_orderdate = min(orderdate, na.rm = TRUE), max_soh_orderdate = max(orderdate, na.rm = TRUE), total_soh_dollars = round(sum(subtotal, na.rm = TRUE), 2), avg_total_soh_dollars = round(mean(subtotal, na.rm = TRUE),2), soh_count = n() ) %&gt;% select(orderdate, onlineorderflag, min_soh_orderdate, max_soh_orderdate, total_soh_dollars, avg_total_soh_dollars, soh_count) 8.5.2 Annual Sales comparison Start by looking at total sales. ggplot(data = annual_sales, aes(x = orderdate, y = total_soh_dollars)) + geom_col() + xlab(&quot;Year&quot;) + ylab(&quot;Sales $&quot;) + scale_y_continuous(labels = scales::dollar_format()) + facet_wrap(&quot;onlineorderflag&quot;) + ggtitle(paste(&quot;Adventure Works Sales Dollars by Year\\n &quot;, min_soh_dt, &quot; - &quot;, max_soh_dt)) Indeed the total sales are quite different as are the number of orders and the average order size! 8.5.3 Order volume comparison Look at number of orders per year: ggplot(data = annual_sales, aes(x = orderdate, y = as.numeric(soh_count))) + geom_col() + xlab(&quot;Year&quot;) + facet_wrap(&quot;onlineorderflag&quot;) + ylab(&quot;Total number of orders&quot;) + ggtitle(paste(&quot;Number of Orders per Year\\n&quot;, min_soh_dt, &quot; - &quot;, max_soh_dt)) 8.5.4 Average sale comparison ggplot(data = annual_sales, aes(x = orderdate, y = avg_total_soh_dollars)) + geom_col() + xlab(&quot;Year&quot;) + ylab(&quot;Average sale amount&quot;) + facet_wrap(&quot;onlineorderflag&quot;) + scale_y_continuous(labels = scales::dollar_format()) + ggtitle(paste(&quot;Average Dollars per Sale\\n&quot;, min_soh_dt, &quot; - &quot;, max_soh_dt)) 8.5.5 Comparing order volume and average sale together Look at number of orders by the the average sales per order for the four years: sales &lt;- annual_sales %&gt;% arrange(orderdate) %&gt;% ungroup() %&gt;% mutate(year = year(orderdate), year = as.factor(year)) sales %&gt;% ggplot(aes(x = avg_total_soh_dollars, y = as.numeric(soh_count), color = year)) + geom_text(aes(label = year, hjust = .5, vjust = 0)) + geom_point() + # geom_path() + xlab(&quot;Average dollars per order&quot;) + ylab(&quot;Total number of orders&quot;) + facet_wrap(&quot;onlineorderflag&quot;, scales = &quot;free&quot;) + scale_x_continuous(labels = scales::dollar_format()) + ggtitle(paste(&quot;Number of Orders by Average Order Amount\\n&quot;, min_soh_dt, &quot; - &quot;, max_soh_dt)) From 2012 to 2013 the average dollars per order dropped from more than $8,500 to nearly $3,000 while the total number of order shot up from less than 4,000 to more than 14,000. Why are the number of orders increasing, but the average order dollar amount dropping? 8.6 Impact of order type on monthly sales Digging into the difference between Sales Rep and Online sales. 8.6.1 Retrieve monthly sales with the onlineorderflag This query puts the collect statement earlier than the previous queries. monthly_sales &lt;- tbl(con, in_schema(&quot;sales&quot;, &quot;salesorderheader&quot;)) %&gt;% select(orderdate, subtotal, onlineorderflag) %&gt;% collect() %&gt;% # From here on we&#39;re in R mutate(orderdate = date(orderdate), orderdate = round_date(orderdate, &quot;month&quot;), onlineorderflag = if_else(onlineorderflag == FALSE, &quot;Sales Rep&quot;, &quot;Online&quot;),) %&gt;% # group_by(orderdate, onlineorderflag) %&gt;% summarize( min_soh_orderdate = min(orderdate, na.rm = TRUE), max_soh_orderdate = max(orderdate, na.rm = TRUE), total_soh_dollars = round(sum(subtotal, na.rm = TRUE), 2), avg_total_soh_dollars = round(mean(subtotal, na.rm = TRUE), 2), soh_count = n() ) 8.6.2 Monthly variation compared to a trend line Jumping to the trend line comparison, we see that the variation # sp_print_df(monthly_sales) ggplot( data = monthly_sales, aes( x = orderdate, y = total_soh_dollars)) + geom_line() + geom_smooth(se = FALSE) + xlab(&quot;Month&quot;) + ylab(&quot;Sales Dollars&quot;) + facet_wrap(&quot;onlineorderflag&quot;) + scale_y_continuous(labels = dollar) + scale_x_date(date_breaks = &quot;year&quot;, date_labels = &quot;%Y&quot;, date_minor_breaks = &quot;3 months&quot;) + theme(plot.title = element_text(hjust = .5)) + # Center ggplot title ggtitle(paste(&quot;Sales by Month by Year\\n&quot;, &quot;With Number of Sales Orders\\nAnd Average SO $ Amount\\n&quot;, min_soh_dt, &quot; - &quot;, max_soh_dt)) ## `geom_smooth()` using method = &#39;loess&#39; and formula &#39;y ~ x&#39; Figure 8.1: SO, SO Dollars, and Average SO Dollars-b A couple of things jump out from the graph. 2012 and 2013 have similar sales dollar plots and peak every three months. This may reflect the closing as many sales orders as possible to make the quarterly sales numbers look good. 2011 has more variation than 2012 and 2013 and peaks every two months. 2014 has the most variation and also peaks every two months. Both the number of sales, 939, and the average sales order size, $52.19 plummet in June 2014. 8.6.3 Compare monthly lagged data by order type lagged &lt;- monthly_sales %&gt;% group_by(onlineorderflag) %&gt;% mutate(pct_yearly_soh_dollar_change = total_soh_dollars / (lag(total_soh_dollars, 12)) * 100, pct_yearly_soh_count_change = soh_count / (lag(soh_count, 12)) * 100) ggplot(lagged, aes(x = orderdate, y = pct_yearly_soh_dollar_change)) + scale_x_date(date_breaks = &quot;year&quot;, date_labels = &quot;%Y&quot;, date_minor_breaks = &quot;3 months&quot;) + facet_wrap(&quot;onlineorderflag&quot;) + geom_line() + xlab(&quot;Month&quot;) + ylab(&quot;% Dollar Change&quot;) + theme(plot.title = element_text(hjust = .5)) + # Center ggplot title ggtitle(paste(&quot;Year on Year Total Monthly Sales Change \\n&quot;, &quot;Comparing Online to Sales Rep Sales\\n&quot;, min_soh_dt, &quot; - &quot;, max_soh_dt)) ## Warning: Removed 12 rows containing missing values (geom_path). ggplot(lagged, aes(x = orderdate, y = pct_yearly_soh_count_change)) + scale_x_date(date_breaks = &quot;year&quot;, date_labels = &quot;%Y&quot;, date_minor_breaks = &quot;3 months&quot;) + facet_wrap(&quot;onlineorderflag&quot;) + geom_line() + xlab(&quot;Month&quot;) + ylab(&quot;% Dollar Change&quot;) + theme(plot.title = element_text(hjust = .5)) + # Center ggplot title ggtitle(paste(&quot;Year on Year Monthly Order Volume Change \\n&quot;, &quot;Comparing Online to Sales Rep Sales\\n&quot;, min_soh_dt, &quot; - &quot;, max_soh_dt)) ## Warning: Removed 12 rows containing missing values (geom_path). Comparing the number of sales orders year over year by month for 2013 and 2012, one can see that the 2013 sales are between 1.2 and 1.8 times larger than the corresponding month of 2012 from January through June. In July the 2013 sales are 5 to 6 times the 2012 sales orders. This trend continues into 2014 before the number of sales plummet to just 1.3 time in June. We suspect that the business has changed a lot with the adventn of online orders. 8.7 Correcting the order date for Sales Reps 8.7.1 Define a date correction function in R monthly_sales &lt;- tbl(con, in_schema(&quot;sales&quot;, &quot;salesorderheader&quot;)) %&gt;% select(orderdate, subtotal, onlineorderflag) %&gt;% # mutate(day = day(as.Date(orderdate))) %&gt;% mutate( orderdate = as.Date(orderdate), day = day(orderdate)) %&gt;% show_query() %&gt;% collect() %&gt;% # From here on we&#39;re in R mutate( correct_orderdate = case_when( # onlineorderflag == FALSE &amp; day == 1 ~ NA, onlineorderflag == FALSE &amp; day == 1L ~ orderdate - 1 , TRUE ~ orderdate )) ## &lt;SQL&gt; ## SELECT &quot;orderdate&quot;, &quot;subtotal&quot;, &quot;onlineorderflag&quot;, EXTRACT(day FROM &quot;orderdate&quot;) AS &quot;day&quot; ## FROM (SELECT CAST(&quot;orderdate&quot; AS DATE) AS &quot;orderdate&quot;, &quot;subtotal&quot;, &quot;onlineorderflag&quot; ## FROM sales.salesorderheader) &quot;dbplyr_007&quot; 8.7.2 Define and store a Postgres function to correct the date dbExecute(con, &quot;CREATE OR REPLACE FUNCTION so_adj_date(so_date timestamp, ONLINE_ORDER boolean) RETURNS timestamp AS $$ BEGIN IF (ONLINE_ORDER) THEN RETURN (SELECT so_date); ELSE RETURN(SELECT CASE WHEN EXTRACT(DAY FROM so_date) = 1 THEN so_date - &#39;1 day&#39;::interval ELSE so_date END ); END IF; END; $$ LANGUAGE PLPGSQL; &quot;) ## [1] 0 8.7.3 Use the Postgres function monthly_sales &lt;- tbl(con, in_schema(&quot;sales&quot;, &quot;salesorderheader&quot;)) %&gt;% select(orderdate, subtotal, onlineorderflag) %&gt;% # mutate(day = day(as.Date(orderdate))) %&gt;% mutate( # orderdate = as.Date(orderdate), adjusted_date = so_adj_date(orderdate, onlineorderflag), day = day(orderdate)) %&gt;% show_query() %&gt;% collect() ## &lt;SQL&gt; ## SELECT &quot;orderdate&quot;, &quot;subtotal&quot;, &quot;onlineorderflag&quot;, so_adj_date(&quot;orderdate&quot;, &quot;onlineorderflag&quot;) AS &quot;adjusted_date&quot;, EXTRACT(day FROM &quot;orderdate&quot;) AS &quot;day&quot; ## FROM sales.salesorderheader monthly_sales %&gt;% filter(day == 1 &amp; onlineorderflag == FALSE) %&gt;% count(orderdate) %&gt;% as.data.frame() ## orderdate n ## 1 2011-07-01 75 ## 2 2011-08-01 60 ## 3 2011-10-01 90 ## 4 2011-12-01 40 ## 5 2012-01-01 79 ## 6 2014-03-01 91 ## 7 2014-05-01 179 monthly_sales &lt;- monthly_sales %&gt;% mutate(orderdate = date(orderdate), orderdate = round_date(orderdate, &quot;month&quot;), onlineorderflag = if_else(onlineorderflag == FALSE, &quot;Sales Rep&quot;, &quot;Online&quot;),) %&gt;% # group_by(orderdate, onlineorderflag) %&gt;% summarize( min_soh_orderdate = min(orderdate, na.rm = TRUE), max_soh_orderdate = max(orderdate, na.rm = TRUE), total_soh_dollars = round(sum(subtotal, na.rm = TRUE), 2), avg_total_soh_dollars = round(mean(subtotal, na.rm = TRUE), 2), soh_count = n() ) 8.7.4 Sales Rep data entered at the end of the month sales_by_corrected_day_of_month &lt;- tbl(con, in_schema(&quot;sales&quot;, &quot;salesorderheader&quot;)) %&gt;% mutate(day_of_month = day(orderdate)) %&gt;% group_by(onlineorderflag, day_of_month, orderdate) %&gt;% summarize( total_soh_dollars = round(sum(subtotal, na.rm = TRUE), 2), avg_total_soh_dollars = round(mean(subtotal, na.rm = TRUE),2), soh_count = n() ) %&gt;% # arrange(day_of_month) %&gt;% collect() %&gt;% ungroup() %&gt;% mutate(correct_orderdate = case_when( onlineorderflag == FALSE &amp; day_of_month == 1L ~ orderdate - days(1), TRUE ~ orderdate ), day_of_month = day(correct_orderdate), onlineorderflag = if_else(onlineorderflag == FALSE, &quot;Sales Rep&quot;, &quot;Online&quot;), onlineorderflag = as.factor(onlineorderflag), # day_of_month = as.numeric(day_of_month), soh_count = as.numeric(soh_count) ) ggplot(sales_by_corrected_day_of_month, aes(x = day_of_month, y = soh_count)) + # scale_x_date(date_breaks = &quot;year&quot;, date_labels = &quot;%Y&quot;, date_minor_breaks = &quot;3 months&quot;) + facet_wrap(&quot;onlineorderflag&quot;) + geom_col() + xlab(&quot;Day of the Month&quot;) + ylab(&quot;Recorded Sales&quot;) + theme(plot.title = element_text(hjust = .5)) + # Center ggplot title ggtitle(paste(&quot;Transactions Entered by Day of Month \\n&quot;, &quot;Comparing Online to Sales Rep Sales\\n&quot;, min_soh_dt, &quot; - &quot;, max_soh_dt)) 8.8 Monthly Sales Rep Performance Analysis 8.8.1 Monthly Sales by Order Type with corrected dates 8.8.2 Monthly Sales by Order Type with corrected dates – relative to a trend line 8.8.3 Monthly sales lag with corrected dates Monthly sa mo_soh_sreps &lt;- dbGetQuery( con, &quot; SELECT * ,round(orders/mo_orders * 100.0,2) mo_pct ,round(sales_dollars/mo_sales * 100.0,2) mo_dlr_pct FROM (SELECT EXTRACT(MONTH FROM orderdate) mo, EXTRACT(YEAR FROM orderdate) yr , min(orderdate)::DATE min_soh_orderdate, max(orderdate)::DATE max_soh_orderdate , round(sum(subtotal), 2) sales_dollars , round(sum(sum(subtotal)) over (partition by EXTRACT(MONTH FROM orderdate),EXTRACT(YEAR FROM orderdate) order by EXTRACT(YEAR FROM orderdate)),2) mo_sales , count(*) * 1.0 orders , sum(count(*)) over (partition by EXTRACT(MONTH FROM orderdate),EXTRACT(YEAR FROM orderdate) order by EXTRACT(YEAR FROM orderdate)) mo_orders , case when sh.onlineorderflag then &#39;online&#39; else &#39;sales rep&#39; end sales_type FROM sales.salesorderheader sh INNER JOIN sales.salesorderdetail sd ON sh.salesorderid = sd.salesorderid WHERE not sh.onlineorderflag GROUP BY EXTRACT(MONTH FROM orderdate), EXTRACT(YEAR FROM orderdate), case when sh.onlineorderflag then &#39;online&#39; else &#39;sales rep&#39; end ) as src ORDER BY mo, yr, sales_type &quot; ) sp_print_df(head(mo_soh_sreps)) monthly_sales_online &lt;- dbGetQuery( con, &quot; SELECT EXTRACT(MONTH FROM orderdate) mo, EXTRACT(YEAR FROM orderdate) yr , min(orderdate)::DATE min_soh_orderdate, max(orderdate)::DATE max_soh_orderdate , so.category , round(sum(subtotal), 2) sales_dollars , count(*) * 1.0 orders FROM sales.salesorderheader sh JOIN sales.salesorderdetail sd ON SH.salesorderid = sd.salesorderid JOIN sales.specialoffer so ON Sd.specialofferid = so.specialofferid GROUP BY EXTRACT(MONTH FROM orderdate), EXTRACT(YEAR FROM orderdate), so.category ORDER BY mo, yr &quot; ) sp_print_df(head(monthly_sales_online)) Figure 8.2: caption goes here ggplot(data = monthly_sales_online, aes(x = factor(mo), y = sales_dollars, fill = factor(yr))) + geom_col(position = &quot;dodge&quot;, color = &quot;black&quot;) + # unstack columns and outline in black xlab(&quot;Month&quot;) + ylab(&quot;Sales Dollars&quot;) + scale_y_continuous(labels = dollar) + geom_text(aes(label = category), size = 2.5 # ,color = &#39;black&#39; , vjust = 1.5, position = position_dodge(.9) ) + # orders =&gt; avg so $ amt theme(plot.title = element_text(hjust = .50)) + # Center ggplot title ggtitle(paste(&quot;Sales by Month\\nBy Online Flag&quot;)) Figure 8.2: caption goes here 8.8.4 Effect of Late Entries on Sales Rep data Correcting for the first of the month makes the Sales Rep data look more normal. That could be the end of this chapter. monthly_sales_onl_pct &lt;- dbGetQuery( con, &quot; select EXTRACT(MONTH FROM orderdate) mo ,EXTRACT(YEAR FROM orderdate) yr ,sum(ORDERQTY) ,sum(case when salespersonid is null and onlineorderflag then 1 else 0 end) onl ,sum(case when salespersonid is not null and not onlineorderflag then 1 else 0 end) sp ,round(sum(case when onlineorderflag then 1 else 0 end )*1.0/count(*) * 100.0,2) onl_pct ,round(sum(case when not onlineorderflag then 1 else 0 end )*1.0/count(*) * 100.0,2) sp_pct ,onlineorderflag ,count(*) FROM sales.salesorderheader sh INNER JOIN sales.salesorderdetail sd ON sh.salesorderid = sd.salesorderid INNER JOIN production.product p ON sd.productid = p.productid INNER JOIN sales.specialoffer so ON sd.specialofferid = so.specialofferid LEFT OUTER JOIN sales.specialofferproduct sop ON sd.specialofferid = sop.specialofferid and sd.productid = sop.productid WHERE sop.productid is not null group by EXTRACT(MONTH FROM orderdate) ,EXTRACT(YEAR FROM orderdate) ,onlineorderflag order by mo,yr &quot; ) sp_print_df(head(monthly_sales_onl_pct)) mo_onl_pct &lt;- dbGetQuery( con, &quot; SELECT * ,round(orders/mo_orders * 100.0,2) mo_pct ,round(sales_dollars/mo_sales * 100.0,2) mo_dlr_pct FROM (SELECT EXTRACT(MONTH FROM orderdate) mo, EXTRACT(YEAR FROM orderdate) yr , min(orderdate)::DATE min_soh_orderdate, max(orderdate)::DATE max_soh_orderdate , round(sum(subtotal), 2) sales_dollars , round(sum(sum(subtotal)) over (partition by EXTRACT(MONTH FROM orderdate),EXTRACT(YEAR FROM orderdate) order by EXTRACT(YEAR FROM orderdate)),2) mo_sales , count(*) * 1.0 orders , sum(count(*)) over (partition by EXTRACT(MONTH FROM orderdate),EXTRACT(YEAR FROM orderdate) order by EXTRACT(YEAR FROM orderdate)) mo_orders , case when sh.onlineorderflag then &#39;online&#39; else &#39;sales rep&#39; end sales_type FROM sales.salesorderheader sh GROUP BY EXTRACT(MONTH FROM orderdate), EXTRACT(YEAR FROM orderdate), case when sh.onlineorderflag then &#39;online&#39; else &#39;sales rep&#39; end ) as src ORDER BY mo, yr, sales_type &quot; ) sp_print_df(head(mo_onl_pct)) mo_onl_pct$mo &lt;- as.factor(mo_onl_pct$mo) mo_onl_pct$yr &lt;- as.factor(mo_onl_pct$yr) mo_onl_pct$sales_type &lt;- as.factor(mo_onl_pct$sales_type) mo_2011 &lt;- mo_onl_pct %&gt;% filter(yr == 2011) mo_2012 &lt;- mo_onl_pct %&gt;% filter(yr == 2012) mo_2013 &lt;- mo_onl_pct %&gt;% filter(yr == 2013) mo_2014 &lt;- mo_onl_pct %&gt;% filter(yr == 2014) ggplot(data = NULL) + # data=mo_2011 first results in the x axis months out of order. geom_line(data = mo_2012, aes(x = mo, y = mo_pct, color = yr, group = sales_type)) + geom_line(data = mo_2011, aes(x = mo, y = mo_pct, color = yr, group = sales_type)) + geom_line(data = mo_2013, aes(x = mo, y = mo_pct, color = yr, group = sales_type)) + geom_line(data = mo_2014, aes(x = mo, y = mo_pct, color = yr, group = sales_type)) + geom_point(data = mo_2011, aes(x = mo, y = mo_pct, color = sales_type)) + geom_point(data = mo_2012, aes(x = mo, y = mo_pct, color = sales_type)) + geom_point(data = mo_2013, aes(x = mo, y = mo_pct, color = sales_type)) + geom_point(data = mo_2014, aes(x = mo, y = mo_pct, color = sales_type)) + geom_text( data = mo_2011, aes(x = mo, y = mo_pct, label = paste(orders, &quot;:$&quot;, sales_dollars, &quot;:&quot;, mo_dlr_pct, &quot;%&quot;)), position = position_dodge(.3), size = 2.25, hjust = 1.0 ) + geom_text( data = mo_2012, aes(x = mo, y = mo_pct, label = paste(orders, &quot;:$&quot;, sales_dollars, &quot;:&quot;, mo_dlr_pct, &quot;%&quot;)), position = position_dodge(.3), size = 2.25, hjust = 1.0 ) + geom_text( data = mo_2013, aes(x = mo, y = mo_pct, label = paste(orders, &quot;:$&quot;, sales_dollars, &quot;:&quot;, mo_dlr_pct, &quot;%&quot;)), position = position_dodge(.3), size = 2.25, hjust = 1.0 ) + geom_text( data = mo_2014, aes(x = mo, y = mo_pct, label = paste(orders, &quot;:$&quot;, sales_dollars, &quot;:&quot;, mo_dlr_pct, &quot;%&quot;)), color = &quot;lightblue&quot;, position = position_dodge(.3), size = 2.25, hjust = 1.0, vjust = 1.5 ) + xlab(&quot;Month&quot;) + ylab(&quot;% Online Sales\\nvs\\n%Rep Sales&quot;) + theme(plot.title = element_text(hjust = .50)) + ggtitle(paste( &quot;Sales by Month\\n&quot;, &quot;Online Orders Versus Rep Orders\\n&quot;, min_soh_dt, &quot; - &quot;, max_soh_dt, &quot; &quot;, &quot;Each Point shows Number of Orders: $ Amount: % of Total $ For the Month&quot; )) This plot is much easier to read, but the sales orders =&gt; avg_s From the tidy point of view overview, https://tidyr.tidyverse.org/: Tidy data is data where: Each variable is in a column. Each observation is a row. Each value is a cell. The gather command throws the following warning: attributes are not identical across measure variables; they will be dropped 8.9 These queries and graphs may be redundant mo_onl_pct &lt;- dbGetQuery( con, &quot; SELECT * ,round(orders/mo_orders * 100.0,2) mo_pct ,round(sales_dollars/mo_sales * 100.0,2) mo_dlr_pct FROM (SELECT EXTRACT(MONTH FROM orderdate) mo, EXTRACT(YEAR FROM orderdate) yr , min(orderdate)::DATE min_soh_orderdate, max(orderdate)::DATE max_soh_orderdate , round(sum(subtotal), 2) sales_dollars , round(sum(sum(subtotal)) over (partition by EXTRACT(MONTH FROM orderdate),EXTRACT(YEAR FROM orderdate) order by EXTRACT(YEAR FROM orderdate)),2) mo_sales , count(*) * 1.0 orders , sum(count(*)) over (partition by EXTRACT(MONTH FROM orderdate),EXTRACT(YEAR FROM orderdate) order by EXTRACT(YEAR FROM orderdate)) mo_orders , case when sh.onlineorderflag then &#39;online&#39; else &#39;sales rep&#39; end sales_type FROM sales.salesorderheader sh GROUP BY EXTRACT(MONTH FROM orderdate), EXTRACT(YEAR FROM orderdate), case when sh.onlineorderflag then &#39;online&#39; else &#39;sales rep&#39; end ) as src ORDER BY mo, yr, sales_type &quot; ) sp_print_df(head(mo_onl_pct)) mo_onl_pct$mo &lt;- as.factor(mo_onl_pct$mo) mo_onl_pct$yr &lt;- as.factor(mo_onl_pct$yr) mo_onl_pct$sales_type &lt;- as.factor(mo_onl_pct$sales_type) mo_2011 &lt;- mo_onl_pct %&gt;% filter(yr == 2011) mo_2012 &lt;- mo_onl_pct %&gt;% filter(yr == 2012) mo_2013 &lt;- mo_onl_pct %&gt;% filter(yr == 2013) mo_2014 &lt;- mo_onl_pct %&gt;% filter(yr == 2014) ggplot(data = NULL) + # data=mo_2011 first results in the x axis months out of order. geom_line(data = mo_2012, aes(x = mo, y = mo_pct, color = yr, group = sales_type)) + geom_line(data = mo_2011, aes(x = mo, y = mo_pct, color = yr, group = sales_type)) + geom_line(data = mo_2013, aes(x = mo, y = mo_pct, color = yr, group = sales_type)) + geom_line(data = mo_2014, aes(x = mo, y = mo_pct, color = yr, group = sales_type)) + geom_point(data = mo_2011, aes(x = mo, y = mo_pct, color = sales_type)) + geom_point(data = mo_2012, aes(x = mo, y = mo_pct, color = sales_type)) + geom_point(data = mo_2013, aes(x = mo, y = mo_pct, color = sales_type)) + geom_point(data = mo_2014, aes(x = mo, y = mo_pct, color = sales_type)) + geom_text( data = mo_2011, aes(x = mo, y = mo_pct, label = paste(orders, &quot;:$&quot;, sales_dollars, &quot;:&quot;, mo_dlr_pct, &quot;%&quot;)), position = position_dodge(.3), size = 2.5, hjust = 0 ) + geom_text( data = mo_2012, aes(x = mo, y = mo_pct, label = paste(orders, &quot;:$&quot;, sales_dollars, &quot;:&quot;, mo_dlr_pct, &quot;%&quot;)), position = position_dodge(.3), size = 2.5, hjust = 0 ) + geom_text( data = mo_2013, aes(x = mo, y = mo_pct, label = paste(orders, &quot;:$&quot;, sales_dollars, &quot;:&quot;, mo_dlr_pct, &quot;%&quot;)), position = position_dodge(.3), size = 2.5, hjust = 0 ) + geom_text( data = mo_2014, aes(x = mo, y = mo_pct, label = paste(orders, &quot;:$&quot;, sales_dollars, &quot;:&quot;, mo_dlr_pct, &quot;%&quot;)), color = &quot;lightblue&quot;, position = position_dodge(.3), size = 2.5, hjust = 0, vjust = 1.5 ) + xlab(&quot;Month&quot;) + ylab(&quot;% Online Sales\\nvs\\n%Rep Sales&quot;) + theme(plot.title = element_text(hjust = .50)) + ggtitle(paste( &quot;Sales by Month\\n&quot;, &quot;Online Orders Versus Rep Orders\\n&quot;, min_soh_dt, &quot; - &quot;, max_soh_dt, &quot; &quot;, &quot;Each Point shows Number of Orders: $ Amount: % of Total $ For the Month&quot; )) The sales rep orders brought in over half the monthly sales dollars for every month except three, February, April, and June of 2014. The monthly sales rep orders for those months are 3, 2, and 0 respectively. 8.10 Disconnect from the database and stop Docker dbDisconnect(con) sp_docker_stop(&quot;adventureworks&quot;) "]
]
