[
["index.html", "Chapter 1 Introduction 1.1 Using R to query a DBMS in your organization 1.2 Docker as a tool for UseRs 1.3 Alternatives to Docker 1.4 Packages used in this book 1.5 Who are we? 1.6 How did this project come about? 1.7 Navigation", " Exploring Enterprise Databases with R A Tidyverse Approach John David Smith, Sophie Yang, M. Edward (Ed) Borasky, Jim Tyhurst, Scott Came, Mary Anne Thygesen, and Ian Frantz 2019-09-05 Chapter 1 Introduction This chapter introduces: The motivation for this book and the strategies we have adopted Our approach to exploring issues “beyind the enterprise firewall” using Docker to demonstrate access to a service like PostgreSQL from R Our team and how this project came about 1.1 Using R to query a DBMS in your organization Many R users (or useRs) live a dual life: in the vibrant open-source R community where R is created, improved, discussed, and taught. And then they go to work in a secured, complex, closed organizational environment where they may be on their own. Here is a request on the Rstudio community site for help that has been lightly edited to emphasize the generality that we see: I’m trying to migrate some inherited scripts that […] to connect to a […] database to […] instead. I’ve reviewed the https://db.rstudio.com docs and tried a number of configurations but haven’t been able to connect. I’m in uncharted territory within my org, so haven’t been able to get much help internally. This book will help you create a hybrid environment on your machine that can mimic some of the uncharted territory in your organization. It goes far beyond the basic connection issues and covers issues that you face when you are finding your way around or writing queries to your organization’s databases, not just when maintaining inherited scripts. Technology hurdles. The interfaces (passwords, packages, etc.) and gaps between R and a back end database are hidden from public view as a matter of security, so pinpointing exactly where a problem is can be difficult. A simulated environment such as we offer here can be an important learning resource. Scale issues. We see at least two types of scale issues. Handling large volumes of data so that performance issues must be a consideration requires a basic understanding of what’s happening in “the back end” (which is necessarily hidden from view). Therefore mastering techniques for drawing samples or small batches of data are essential. In addition to their size, your organization’s databases will often have structural characteristics that are complex and obscure. Data documentation is often incomplete and emphasizes operational characteristics, rather than analytic opportunities. A careful useR often needs to confirm the documentation on the fly and de-normalize data carefully. Use cases. R users frequently need to make sense of an organization’s complex data structures and coding schemes to address incompletely formed questions so that informal exploratory data analysis has to be intuitive and fast. The technology details should not get in the way. Sharing and discussing exploratory and diagnostic retrieval techniquesis best in public, but is constrained by organizational requirements. We have found that PostgreSQL in a Docker container solves many of the foregoing problems. 1.2 Docker as a tool for UseRs Noam Ross’s “Docker for the UseR” (Ross 2018a) suggests that there are four distinct Docker use-cases for useRs. Make a fixed working environment for reproducible analysis Access a service outside of R (e.g., PostgreSQL) Create an R based service (e.g., with plumber) Send our compute jobs to the cloud with minimal reconfiguration or revision This book explores #2 because it allows us to work on the database access issues described above and to practice on an industrial-scale DBMS. Docker is a comparatively easy way to simulate the relationship between an R/RStudio session and a database – all on on your machine (provided you have Docker installed and running). Running PostgreSQL on a Docker container avoids OS or system dependencies or conflicts that cause confusion and limit reproducibility. A Docker environment consumes relatively few resources. Our sandbox does much less but only includes PostgreSQL and sample data, so it takes up about 5% of the space taken up by the Vagrant environment that inspired this project. (Makubuya 2018) A simple Docker container such as the one used in our sandbox is easy to use and could be extended for other uses. Docker is a widely used technology for deploying applications in the cloud, so for many useRs it’s worth mastering. 1.3 Alternatives to Docker We have found Docker to be a great tool for simulating the complexities of an enterprise environment. However, installing Docker can be challenging, especially for Windows users. Therefore the code in this book depends on PostgreSQL(Group 2019) in a Docker container, but it can all be readily adapted to either SQLite(Consortium 2019), PostgreSQL running natively on your computer, or even PostgreSQL running in the cloud. The technical details of these alternatives are all in separate chapters. 1.4 Packages used in this book The following packages are used in this book: bookdown DBI dbplyr devtools DiagrammeR downloader glue here knitr RPostgres skimr sqlpetr (installs with: remotes::install_github(&quot;smithjd/sqlpetr&quot;, force = TRUE, quiet = TRUE, build = TRUE, build_opts = &quot;&quot;)) tidyverse 1.5 Who are we? We have been collaborating on this book since the Summer of 2018, each of us chipping into the project as time permits: Ian Franz - @ianfrantz Jim Tyhurst - @jimtyhurst John David Smith - @smithjd M. Edward (Ed) Borasky - @znmeb Maryanne Thygesen @maryannet Scott Came - @scottcame Sophie Yang - @SophieMYang 1.6 How did this project come about? We trace this book back to the June 2, 2018 Cascadia R Conf where Aaron Makubuya gave a presentation using Vagrant hosting (Makubuya 2018). After that John Smith, Ian Franz, and Sophie Yang had discussions after the monthly Data Discussion Meetups about the difficulties around setting up Vagrant (a virtual environment), connecting to an enterprise database, and having realistic public environment to demo or practice the issues that come up behind corporate firewalls. Scott Came’s tutorial on R and Docker (Came 2018) (an alternative to Vagrant) at the 2018 UseR Conference in Melbourne was provocative and it turned out he lived nearby. We re-connected with M. Edward (Ed) Borasky who had done extensive development for a Hack Oregon data science containerization project (Borasky 2018). 1.7 Navigation If this is the first bookdown (Xie 2016) book you’ve read, here’s how to navigate the website. The controls on the upper left: there are four controls on the upper left. A “hamburger” menu: this toggles the table of contents on the left side of the page on or off. A magnifying glass: this toggles a search box on or off. A letter “A”: this lets you pick how you want the site to display. You have your choice of small or large text, a serif or sans-serif font, and a white, sepia or night theme. A pencil: this is the “Edit” button. This will take you to a GitHub edit dialog for the chapter you’re reading. If you’re a committer to the repository, you’ll be able to edit the source directly. If not, GitHub will fork a copy of the repository to your own account and you’ll be able to edit that version. Then you can make a pull request. The share buttons in the upper right hand corner. There’s one for Twitter, one for Facebook, and one that gives a menu of options, including LinkedIn. References "],
["chapter-how-to-use-this-book.html", "Chapter 2 How to use this book 2.1 Retrieve the code from GitHub 2.2 Read along, experiment as you go 2.3 Participating", " Chapter 2 How to use this book This chapter explains: Getting the code used in this book How you can contribute to the book project This book is full of examples that you can replicate on your computer. 2.1 Retrieve the code from GitHub The code to generate the book and the exercises it contains can be downloaded from this repo. 2.2 Read along, experiment as you go We have never been sure whether we’re writing an expository book or a massive tutorial. You may use it either way. The best way to learn the material we cover is to experiment. After the introductory chapters and the chapter that creates the persistent database, you can jump around and each chapter stands on its own. 2.3 Participating 2.3.1 Browsing the book If you just want to read the book and copy / paste code into your working environment, simply browse to https://smithjd.github.io/sql-pet. If you get stuck, or find things aren’t working, open an issue at https://github.com/smithjd/sql-pet/issues/new/. 2.3.2 Diving in If you want to experiment with the code in the book, run it in RStudio and interact with it, you’ll need to do two more things: Install the sqlpetr R package (Borasky et al. 2018). See https://smithjd.github.io/sqlpetr for the package documentation. Installation may take some time if it has to install or update packages not available on your computer. Clone the Git repository https://github.com/smithjd/sql-pet.git and open the project file sql-pet.Rproj in RStudio. Enjoy! References "],
["chapter-learning-goals.html", "Chapter 3 Learning Goals and Use Cases 3.1 Challenge: goals, context and expectations 3.2 The Challenge: Investigating a question using an organization’s database 3.3 Making your way through the book 3.4 Adventure Works", " Chapter 3 Learning Goals and Use Cases This chapter sets the context for the book by: Describing our assumptions about the reader of this book: the challenges you face, your R skills, your learning goals, and context. Describing what the book offers in terms of: Problems that are addressed Learning objectives Sequence of topics, ranging from connecting to the database to exploring an issue in response to questions from an executive R packages used Describing the sample database used in the book 3.1 Challenge: goals, context and expectations Working behind the corporate firewall – the need to simulate it. Important because that’s where the data (and possibly your paycheck) are coming from. Differences between production and data warehouse environments. We are simulating a production environment. There are many similarities. Data models are different. Performance is a bigger deal in the OLTP. Data in a organizational environment around the database. Learning to keep your DBAs happy: You are your own DBA in this simulation, so you can wreak havoc and learn from it, but you can learn to be DBA-friendly here. In the end it’s the subject-matter experts (people using the data every day) that really understand your data, but you have to work with your DBAs first. You can’t believe all the data you pull out of the database. 3.2 The Challenge: Investigating a question using an organization’s database Using an enterprise database to create meaningful management insights requires a combination of very different skills: Need both familiarity with the data and a focus question An iterative process where the data resource can shape your understanding of the question the question you need to answer will frame how you see the data resource You need to go back and forth between the two, asking do I understand the question? do I understand the data? A “good enough” understanding of the data resource (in the DBMS) Nobody knows everything about an entire organization’s data resources. We do, however, need to know what more we need to know and estimate what we don’t know yet. Use all available documentation and understand its limits Use your own tools and skills to examine the data resource What is missing from the database: (columns, records, cells) Why is the data missing? A “good enough” understanding of the question you seek to answer How general or specific is your question? How aligned is it with the purpose for which the database was designed and is being operated? How different are your assumptions and concerns from those of the people who enter and use the data on a day to day basis? Some cycles in this iteration between question refinement and reformulation on the one hand and data retrieval and investigation on the other feel like a waste time. That’s inevitable. Bringing R tools and skills to bear on these R is a powerful tool for data access, manipulation, modeling and presentation Different R packages and techniques are available for each of the elements involved in exploring, analyzing and reporting on enterprise behavior using the enterprise database. 3.2.1 Problems that we address in the book This book emphasizes database exploration and the R techniques that are needed. We are emphasizing a tidyverse approach. &amp; graphics to really makes sense of what we find. We can’t call on real people in the adventureworks company, obviously, but we invent some characters to illustrate the investigation process as we have experienced it in various organizational settings. 3.2.2 Book structure The book explores R techniques and behaviors using progressively more complex queries, exploring this scenario: There is a new Executive VP of Sales at Adventure Works. She wants an overview of sales and the sales organization’s performance at AW. Early chapters use just one table from the database: the salesordedrheader table in the sales schema. The motivating question might be: “How many sales persons does the Adventure Works company have?” Starting with base tables, then use views (that contain knowledge about the application) More involved queries join three tables in three different schemas: salesperson, employee, and person. The relevant question might be “Who is my top salesperson? Are the 3 top salespersons older or younger?” Finally, we build a series of queries that explore the sales workflow: sales territories, sales people, top customers by product, product mixture that gives top 80% of sales. What are they producing in detail? Seasonal? Type of product, region, etc.? 3.3 Making your way through the book After working through the code in this book, you can expect to be able to: R, SQL and PostgreSQL Run queries against PostgreSQL in an environment that simulates what is found in a corporate setting. Understand techniques and some of the trade-offs between: queries aimed at exploration or informal investigation using dplyr (Wickham 2018); and queries that should be written in SQL, because performance is important due to the size of the database or the frequency with which a query is to be run. Understand the equivalence between dplyr and SQL queries, and how R translates one into the other. Gain familiarity with techniques that help you explore a database and verify its documentation. Gain familiarity with the standard metadata that a SQL database contains to describe its own contents. Understand some advanced SQL techniques. Gain some understanding of techniques for assessing query structure and performance. Docker related Set up a PostgreSQL database in a Docker environment. Gain familiarity with the various ways of interacting with the Docker and PostgreSQL environments Understand enough about Docker to swap databases, e.g. Sports DB for the DVD rental database used in this tutorial. Or swap the database management system (DBMS), e.g. MySQL for PostgreSQL. 3.3.1 R Packages These R packages are discussed or used in exercises: DBI dbplyr devtools downloader glue gt here knitr RPostgres skimr sqlpetr (installs with: remotes::install_github(&quot;smithjd/sqlpetr&quot;, force = TRUE, quiet = TRUE, build = TRUE, build_opts = &quot;&quot;)) tidyverse In addition, these are used to render the book: * bookdown * DiagrammeR 3.4 Adventure Works In this book we have adopted the Microsoft Adventure Works online transaction processing database for our examples. It is https://docs.microsoft.com/en-us/previous-versions/sql/sql-server-2008/ms124438(v=sql.100) See Sections 3 and 4 Journal of Information Systems Education, Vol. 26(3) Summer 2015. “Teaching Tip Active Learning via a Sample Database: The Case of Microsoft’s Adventure Works” by Michel Mitri http://jise.org/Volume26/n3/JISEv26n3p177.pdf See the AdventureWorks Data Dictionary and a sample table (employee). Here is a (link to an ERD diagram)[https://i.stack.imgur.com/LMu4W.gif] References "],
["chapter-setup-adventureworks-db.html", "Chapter 4 Create and connect to the adventureworks database in PostgreSQL 4.1 Overview 4.2 Verify that Docker is up, running, and clean up if necessary 4.3 Clean up if appropriate 4.4 Build the adventureworks Docker image 4.5 Run the adventureworks Docker Image 4.6 Connect to PostgreSQL with R 4.7 Adventureworks Schemas 4.8 Investigate the database using Rstudio 4.9 Stop and start to demonstrate persistence 4.10 Cleaning up 4.11 Using the adventureworks container in the rest of the book", " Chapter 4 Create and connect to the adventureworks database in PostgreSQL This chapter demonstrates how to: Create and connect to the PostgreSQL adventureworks database in Docker Keep necessary credentials secret while being available to R when it executes. Leverage Rstudio features to get a peek at your data, Set up the environment for subsequent chapters 4.1 Overview Docker commands can be run from a terminal (e.g., the Rstudio Terminal pane) or with a system2() command. The necessary functions to start, stop Docker containers and do other busy work are provided in the sqlpetr package. Note: The functions in the package are designed to help you focus on interacting with a dbms from R. You can ignore how they work until you are ready to delve into the details. They are all named to begin with sp_. The first time a function is called in the book, we provide a note explaining its use. Please install the sqlpetr package if not already installed: library(devtools) if (!require(sqlpetr)) { remotes::install_github( &quot;smithjd/sqlpetr&quot;, force = TRUE, build = FALSE, quiet = TRUE) } Note that when you install this package the first time, it will ask you to update the packages it uses and that may take some time. These packages are called in this Chapter: library(tidyverse) library(DBI) library(RPostgres) library(glue) require(knitr) library(dbplyr) library(sqlpetr) library(bookdown) library(here) 4.2 Verify that Docker is up, running, and clean up if necessary The sp_check_that_docker_is_up function from the sqlpetr package checks whether Docker is up and running. If it’s not, then you need to install, launch or re-install Docker. sp_check_that_docker_is_up() ## [1] &quot;Docker is up but running no containers&quot; 4.3 Clean up if appropriate Force-remove the adventureworks container if it was left over (e.g., from a prior runs): sp_docker_remove_container(&quot;adventureworks&quot;) ## [1] 0 4.4 Build the adventureworks Docker image Now we set up a “realistic” database named adventureworks in Docker. NOTE: This chapter doesn’t go into the details of creating or restoring the adventureworks database. For more detail on what’s going on behind the scenes, you can examine the step-by-step code in: source('book-src/restore-adventureworks-postgres-on-docker.R') To save space here in the book, we’ve created a function in sqlpetr to build this image, called OUT OF DATE!! . Vignette Building the adventureworks Docker Image describes the build process. *Ignore the errors in the following step: source(here(&quot;book-src&quot;, &quot;restore-adventureworks-postgres-on-docker.R&quot;)) ## docker run --detach --name adventureworks --publish 5432:5432 --mount type=bind,source=&quot;/Users/jds/Documents/Library/R/r-system/sql-pet&quot;,target=/petdir postgres:11 4.5 Run the adventureworks Docker Image Now we can run the image in a container and connect to the database. To run the image we use an sqlpetr function called OUT OF DATE sp_pg_docker_run For the rest of the book we will assume that you have a Docker container called adventureworks that can be stopped and started. In that sense each chapter in the book is independent. sp_docker_start(&quot;adventureworks&quot;) 4.6 Connect to PostgreSQL with R *CHECK for sqlpetr update!Thesp_make_simple_pgfunction we called above created a container from thepostgres:11library image downloaded from Docker Hub. As part of the process, it set the password for the PostgreSQL database superuserpostgres` to the value “postgres”. For simplicity, we are using a weak password at this point and it’s shown here and in the code in plain text. That is bad practice because user credentials should not be shared in open code like that. A subsequent chapter demonstrates how to store and use credentials to access the DBMS so that they are kept private. The sp_get_postgres_connection function from the sqlpetr package gets a DBI connection string to a PostgreSQL database, waiting if it is not ready. This function connects to an instance of PostgreSQL and we assign it to a symbol, con, for subsequent use. The connctions_tab = TRUE parameter opens a connections tab that’s useful for navigating a database. Note that we are using port 5439 for PostgreSQL inside the container and published to localhost. Why? If you have PostgreSQL already running on the host or another container, it probably claimed port 5432, since that’s the default. So we need to use a different port for our PostgreSQL container. Use the DBI package to connect to the adventureworks database in PostgreSQL. Remember the settings discussion about [keeping passwords hidden][Pause for some security considerations] con &lt;- sp_get_postgres_connection( host = &quot;localhost&quot;, port = 5432, # this version still using 5432!!! user = &quot;postgres&quot;, password = &quot;postgres&quot;, dbname = &quot;adventureworks&quot;, seconds_to_test = 20, connection_tab = TRUE ) 4.7 Adventureworks Schemas Think of the Adventureworks database as a model of the Adventureworks business. The business is organized around different departments (humanresources, sales, and purchasing), business processes (production), and resources (person). Each schema is a container for the all the database objects needed to model the departments, business processes, and resources. As a data analyst, the connections tab has three of the five database objects of interest. These are schemas, tables and views. The other two database objects of interest not shown in the connetions tab are the table primary and foreign keys, PK and FK. Those database objects enforce the referential integrity of the data and the performance of the application. Let the DBA’s worry about them. The Connections tab has three icons. The node icon represents a schema. The schema helps organize the structure and design of the database. The schema contains the views, the grid with the glasses, and tables, the grids without the glasses, that are of interest to the data analyst. A table is a database object usually represents something useful to a business process. For example, a sales person may enter a new order. The first screen is typically called the sales order header screen which contains information about the customer placing the order. This information is captured in salesorderheader table. The customers ordered items are typically entered via multiple screens. These are captured in the salesorderdetail table. A view is a database object that maybe a subset of either the columns or rows of a single table. For example, the customer table has information on all the customers, but the customer view, c, shows only a single customer. Or a view may have data from a primary/driving table and joined to other tables to provide a better understanding/view of the information in the primary table. For example, the primary table typically has a primary key column, PK, and zero or more foreign key columns, FK. The PK and FK are usually an integer which is great for a computer, but not so nice us mere mortals. An extended view pulls information associated with the FK. For example a sales order view a customer foreign key, can show the actual customer name. 4.8 Investigate the database using Rstudio The Rstudio Connections tab shows that you are connected to Postgres and that the adventureworks database has a many schemas each of which has multiple tables in it: Connections tab - adventureworks Clicking on the icon to the left of a schema expands the list of tables and views in that schema. Clicking on the View or Table icon opens up Rstudio’s View pane to get a peek at the data: View of employee table The number of rows and columns shown in the View pane depends on the size of the window. Back on the Rstudio Connections tab, clicking on the icon to the left of a table or view displays a list of columns and their corresponding data types: adventureworks employee table columns Disconnect from the database: dbDisconnect(con) 4.9 Stop and start to demonstrate persistence Stop the container: sp_docker_stop(&quot;adventureworks&quot;) sp_docker_containers_tibble() ## # A tibble: 0 x 0 When we stopped adventureworks, it no longer appeared in the tibble. But the container is still there. sp_docker_containers_tibble by default only lists the running containers. But we can use the list_all option and see it: sp_docker_containers_tibble(list_all = TRUE) ## # A tibble: 1 x 12 ## container_id image command created_at created ports status size names ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 dd6f353c7881 post… docker… 2019-09-0… 17 sec… &lt;NA&gt; Exite… 0B (… adve… ## # … with 3 more variables: labels &lt;chr&gt;, mounts &lt;chr&gt;, networks &lt;chr&gt; Restart the container and verify that the adventureworks tables are still there: sp_docker_start(&quot;adventureworks&quot;) sp_docker_containers_tibble() ## # A tibble: 1 x 12 ## container_id image command created_at created ports status size names ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 dd6f353c7881 post… docker… 2019-09-0… 18 sec… 0.0.… Up Le… 63B … adve… ## # … with 3 more variables: labels &lt;chr&gt;, mounts &lt;chr&gt;, networks &lt;chr&gt; Connect to the adventureworks database in PostgreSQL: con &lt;- sp_get_postgres_connection( host = &quot;localhost&quot;, port = 5432, user = &quot;postgres&quot;, password = &quot;postgres&quot;, dbname = &quot;adventureworks&quot;, seconds_to_test = 30 ) The database is still there, in the same state as it was when it was originally built. 4.10 Cleaning up Always have R disconnect from the database when you’re done. dbDisconnect(con) Stop the adventureworks container: sp_docker_stop(&quot;adventureworks&quot;) Show that the container still exists even though it’s not running sp_show_all_docker_containers() ## CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES ## dd6f353c7881 postgres:11 &quot;docker-entrypoint.s…&quot; 19 seconds ago Exited (0) Less than a second ago adventureworks Next time, you can just use this command to start the container: sp_docker_start(&quot;adventureworks&quot;) And once stopped, the container can be removed with: sp_check_that_docker_is_up(&quot;adventureworks&quot;) 4.11 Using the adventureworks container in the rest of the book After this point in the book, we assume that Docker is up and that we can always start up our adventureworks database with: sp_docker_start(&quot;adventureworks&quot;) "],
["chapter-dbms-login-credentials.html", "Chapter 5 Securing and using your dbms log-in credentials 5.1 Set up the adventureworks Docker container 5.2 Storing your dbms credentials 5.3 Clean up", " Chapter 5 Securing and using your dbms log-in credentials This chapter demonstrates how to: Keep necessary credentials secret or at least invisible Interact with PostgreSQL using your stored dbms credentials Connecting to a dbms can be very frustrating at first. In many organizations, simply getting access credentials takes time and may involve jumping through multiple hoops. In addition, a dbms is terse or deliberately inscrutable when your credetials are incorrect. That’s a security strategy, not a limitation of your understanding or of your software. When R can’t log you on to a dbms, you usually will have no information as to what went wrong. There are many different strategies for managing credentials. See Securing Credentials in RStudio’s Databases using R documentation for some alternatives to the method we adopt in this book. We provide more details about PostgreSQL Authentication in our sandbox environment in an appendix. The following packages are used in this chapter: library(tidyverse) library(DBI) library(RPostgres) require(knitr) library(sqlpetr) 5.1 Set up the adventureworks Docker container 5.1.1 Verify that Docker is running Check that Docker is up and running: sp_check_that_docker_is_up() ## [1] &quot;Docker is up but running no containers&quot; 5.1.2 Start the Docker container: Start the adventureworks Docker container: sp_docker_start(&quot;adventureworks&quot;) 5.2 Storing your dbms credentials In previous chapters the connection string for connecting to the dbms has used default credentials specified in plain text as follows: user= 'postgres', password = 'postgres' When we call sp_get_postgres_connection below we’ll use environment variables that R obtains from reading the .Renviron file when R starts up. This approach has two benefits: that file is not uploaded to GitHub and R looks for it in your default directory every time it loads. To see whether you have already created that file, use the R Studio Files tab to look at your home directory: That file should contain lines that look like the example below. Although in this example it contains the PostgreSQL default values for the username and password, they are obviously not secret. But this approach demonstrates where you should put secrets that R needs while not risking accidental uploaded to GitHub or some other public location.. Open your .Renviron file with this command: file.edit(&quot;~/.Renviron&quot;) Or you can execute define_postgresql_params.R to create the file or you could copy / paste the following into your .Renviron file: DEFAULT_POSTGRES_PASSWORD=postgres DEFAULT_POSTGRES_USER_NAME=postgres Once that file is created, restart R, and after that R reads it every time it comes up. 5.2.1 Connect with Postgres using the Sys.getenv function Connect to the postgrSQL using the sp_get_postgres_connection function: con &lt;- sp_get_postgres_connection(user = Sys.getenv(&quot;DEFAULT_POSTGRES_USER_NAME&quot;), password = Sys.getenv(&quot;DEFAULT_POSTGRES_PASSWORD&quot;), port = 5432, dbname = &quot;adventureworks&quot;, seconds_to_test = 30, connection_tab = TRUE) Once the connection object has been created, you can list all of the tables in one of the schemas: dbExecute(con, &quot;set search_path to humanresources, public;&quot;) # watch for duplicates! ## [1] 0 dbListTables(con) ## [1] &quot;employee&quot; &quot;shift&quot; ## [3] &quot;employeepayhistory&quot; &quot;jobcandidate&quot; ## [5] &quot;department&quot; &quot;vemployee&quot; ## [7] &quot;vemployeedepartment&quot; &quot;vemployeedepartmenthistory&quot; ## [9] &quot;vjobcandidate&quot; &quot;vjobcandidateeducation&quot; ## [11] &quot;vjobcandidateemployment&quot; &quot;employeedepartmenthistory&quot; 5.3 Clean up Afterwards, always disconnect from the dbms: dbDisconnect(con) Tell Docker to stop the adventureworks container: sp_docker_stop(&quot;adventureworks&quot;) "],
["chapter-connect-to-adventureworks-db.html", "Chapter 6 Connect to the adventureworks database in PostgreSQL 6.1 Overview 6.2 Verify that Docker is up, running, and clean up if necessary 6.3 Connect to PostgreSQL with R 6.4 dplyr connection objects 6.5 Stop and start to demonstrate persistence 6.6 Cleaning up 6.7 Using the adventureworks container in the rest of the book", " Chapter 6 Connect to the adventureworks database in PostgreSQL This chapter demonstrates how to: Create and connect to the PostgreSQL adventureworks database in Docker Keep necessary credentials secret while being available to R when it executes. Connect to and disconnect R from the adventureworks database Set up the environment for subsequent chapters 6.1 Overview Docker commands can be run from a terminal (e.g., the Rstudio Terminal pane) or with a system2() command. The necessary functions to start, stop Docker containers and do other busy work are provided in the sqlpetr package. Note: The functions in the package are designed to help you focus on interacting with a dbms from R. You can ignore how they work until you are ready to delve into the details. They are all named to begin with sp_. The first time a function is called in the book, we provide a note explaining its use. Please install the sqlpetr package if not already installed: library(devtools) if (!require(sqlpetr)) { remotes::install_github( &quot;smithjd/sqlpetr&quot;, force = TRUE, build = FALSE, quiet = TRUE) } Note that when you install this package the first time, it will ask you to update the packages it uses and that may take some time. These packages are called in this Chapter: library(tidyverse) library(DBI) library(RPostgres) library(glue) require(knitr) library(dbplyr) library(sqlpetr) library(bookdown) library(here) 6.2 Verify that Docker is up, running, and clean up if necessary The sp_check_that_docker_is_up function from the sqlpetr package checks whether Docker is up and running. If it’s not, then you need to install, launch or re-install Docker. sp_check_that_docker_is_up() ## [1] &quot;Docker is up but running no containers&quot; sp_docker_start(&quot;adventureworks&quot;) 6.3 Connect to PostgreSQL with R *CHECK for sqlpetr update!Thesp_make_simple_pgfunction we called above created a container from thepostgres:11library image downloaded from Docker Hub. As part of the process, it set the password for the PostgreSQL database superuserpostgres` to the value “postgres”. For simplicity, we are using a weak password at this point and it’s shown here and in the code in plain text. That is bad practice because user credentials should not be shared in open code like that. A subsequent chapter demonstrates how to store and use credentials to access the DBMS so that they are kept private. The sp_get_postgres_connection function from the sqlpetr package gets a DBI connection string to a PostgreSQL database, waiting if it is not ready. This function connects to an instance of PostgreSQL and we assign it to a symbol, con, for subsequent use. The connctions_tab = TRUE parameter opens a connections tab that’s useful for navigating a database. Note that we are using port 5439 for PostgreSQL inside the container and published to localhost. Why? If you have PostgreSQL already running on the host or another container, it probably claimed port 5432, since that’s the default. So we need to use a different port for our PostgreSQL container. Use the DBI package to connect to the adventureworks database in PostgreSQL. Remember the settings discussion about [keeping passwords hidden][Pause for some security considerations] con &lt;- sp_get_postgres_connection( host = &quot;localhost&quot;, port = 5432, # this version still using 5432!!! user = &quot;postgres&quot;, password = &quot;postgres&quot;, dbname = &quot;adventureworks&quot;, seconds_to_test = 20, connection_tab = TRUE ) That’s equivalent to excuting this code to download the table from the DBMS to a local data frame: For the moment we by-pass some complexity that results from the fact that the adventureworks database has multiple schemas and that we are interested in only one of them, named information_schema. tbl(con, in_schema(&quot;information_schema&quot;, &quot;schemata&quot;)) %&gt;% select(catalog_name, schema_name, schema_owner) %&gt;% collect() ## # A tibble: 16 x 3 ## catalog_name schema_name schema_owner ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 adventureworks sales postgres ## 2 adventureworks sa postgres ## 3 adventureworks purchasing postgres ## 4 adventureworks pu postgres ## 5 adventureworks production postgres ## 6 adventureworks pr postgres ## 7 adventureworks person postgres ## 8 adventureworks pe postgres ## 9 adventureworks humanresources postgres ## 10 adventureworks hr postgres ## 11 adventureworks information_schema postgres ## 12 adventureworks public postgres ## 13 adventureworks pg_catalog postgres ## 14 adventureworks pg_toast_temp_1 postgres ## 15 adventureworks pg_temp_1 postgres ## 16 adventureworks pg_toast postgres Schemas will be discussed later on because multiple schemas are the norm in an enterprise database environment, but they are a side issue at this point. So we switch the order in which PostgreSQL searches for objects with the following SQL code: dbExecute(con, &quot;set search_path to sales, public;&quot;) ## [1] 0 With the custom search_path, the following command shows the tables in the sales schema. In the adventureworks database, there are no tables in the public schema. dbListTables(con) ## [1] &quot;countryregioncurrency&quot; ## [2] &quot;customer&quot; ## [3] &quot;currencyrate&quot; ## [4] &quot;creditcard&quot; ## [5] &quot;personcreditcard&quot; ## [6] &quot;specialoffer&quot; ## [7] &quot;specialofferproduct&quot; ## [8] &quot;salesorderheadersalesreason&quot; ## [9] &quot;shoppingcartitem&quot; ## [10] &quot;salespersonquotahistory&quot; ## [11] &quot;salesperson&quot; ## [12] &quot;currency&quot; ## [13] &quot;store&quot; ## [14] &quot;salesorderheader&quot; ## [15] &quot;salesorderdetail&quot; ## [16] &quot;salesreason&quot; ## [17] &quot;salesterritoryhistory&quot; ## [18] &quot;vindividualcustomer&quot; ## [19] &quot;vpersondemographics&quot; ## [20] &quot;vsalesperson&quot; ## [21] &quot;vsalespersonsalesbyfiscalyears&quot; ## [22] &quot;vsalespersonsalesbyfiscalyearsdata&quot; ## [23] &quot;vstorewithaddresses&quot; ## [24] &quot;vstorewithcontacts&quot; ## [25] &quot;vstorewithdemographics&quot; ## [26] &quot;salestaxrate&quot; ## [27] &quot;salesterritory&quot; Notice there are several tables that start with the letter v: they are actually views which will turn out to be important. They are clearly distinguished in the connections tab, but the naming is a matter of convention. Same for dbListFields: dbListFields(con, &quot;salesorderheader&quot;) ## [1] &quot;salesorderid&quot; &quot;revisionnumber&quot; ## [3] &quot;orderdate&quot; &quot;duedate&quot; ## [5] &quot;shipdate&quot; &quot;status&quot; ## [7] &quot;onlineorderflag&quot; &quot;purchaseordernumber&quot; ## [9] &quot;accountnumber&quot; &quot;customerid&quot; ## [11] &quot;salespersonid&quot; &quot;territoryid&quot; ## [13] &quot;billtoaddressid&quot; &quot;shiptoaddressid&quot; ## [15] &quot;shipmethodid&quot; &quot;creditcardid&quot; ## [17] &quot;creditcardapprovalcode&quot; &quot;currencyrateid&quot; ## [19] &quot;subtotal&quot; &quot;taxamt&quot; ## [21] &quot;freight&quot; &quot;totaldue&quot; ## [23] &quot;comment&quot; &quot;rowguid&quot; ## [25] &quot;modifieddate&quot; Thus with this search order, the following two produce identical results: tbl(con, in_schema(&quot;sales&quot;, &quot;salesorderheader&quot;)) %&gt;% head() ## # Source: lazy query [?? x 25] ## # Database: postgres [postgres@localhost:5432/adventureworks] ## salesorderid revisionnumber orderdate duedate ## &lt;int&gt; &lt;int&gt; &lt;dttm&gt; &lt;dttm&gt; ## 1 43659 8 2011-05-31 00:00:00 2011-06-12 00:00:00 ## 2 43660 8 2011-05-31 00:00:00 2011-06-12 00:00:00 ## 3 43661 8 2011-05-31 00:00:00 2011-06-12 00:00:00 ## 4 43662 8 2011-05-31 00:00:00 2011-06-12 00:00:00 ## 5 43663 8 2011-05-31 00:00:00 2011-06-12 00:00:00 ## 6 43664 8 2011-05-31 00:00:00 2011-06-12 00:00:00 ## # … with 21 more variables: shipdate &lt;dttm&gt;, status &lt;int&gt;, ## # onlineorderflag &lt;lgl&gt;, purchaseordernumber &lt;chr&gt;, accountnumber &lt;chr&gt;, ## # customerid &lt;int&gt;, salespersonid &lt;int&gt;, territoryid &lt;int&gt;, ## # billtoaddressid &lt;int&gt;, shiptoaddressid &lt;int&gt;, shipmethodid &lt;int&gt;, ## # creditcardid &lt;int&gt;, creditcardapprovalcode &lt;chr&gt;, ## # currencyrateid &lt;int&gt;, subtotal &lt;dbl&gt;, taxamt &lt;dbl&gt;, freight &lt;dbl&gt;, ## # totaldue &lt;dbl&gt;, comment &lt;chr&gt;, rowguid &lt;chr&gt;, modifieddate &lt;dttm&gt; tbl(con, &quot;salesorderheader&quot;) %&gt;% head() ## # Source: lazy query [?? x 25] ## # Database: postgres [postgres@localhost:5432/adventureworks] ## salesorderid revisionnumber orderdate duedate ## &lt;int&gt; &lt;int&gt; &lt;dttm&gt; &lt;dttm&gt; ## 1 43659 8 2011-05-31 00:00:00 2011-06-12 00:00:00 ## 2 43660 8 2011-05-31 00:00:00 2011-06-12 00:00:00 ## 3 43661 8 2011-05-31 00:00:00 2011-06-12 00:00:00 ## 4 43662 8 2011-05-31 00:00:00 2011-06-12 00:00:00 ## 5 43663 8 2011-05-31 00:00:00 2011-06-12 00:00:00 ## 6 43664 8 2011-05-31 00:00:00 2011-06-12 00:00:00 ## # … with 21 more variables: shipdate &lt;dttm&gt;, status &lt;int&gt;, ## # onlineorderflag &lt;lgl&gt;, purchaseordernumber &lt;chr&gt;, accountnumber &lt;chr&gt;, ## # customerid &lt;int&gt;, salespersonid &lt;int&gt;, territoryid &lt;int&gt;, ## # billtoaddressid &lt;int&gt;, shiptoaddressid &lt;int&gt;, shipmethodid &lt;int&gt;, ## # creditcardid &lt;int&gt;, creditcardapprovalcode &lt;chr&gt;, ## # currencyrateid &lt;int&gt;, subtotal &lt;dbl&gt;, taxamt &lt;dbl&gt;, freight &lt;dbl&gt;, ## # totaldue &lt;dbl&gt;, comment &lt;chr&gt;, rowguid &lt;chr&gt;, modifieddate &lt;dttm&gt; 6.4 dplyr connection objects As introduced in the previous chapter, the dplyr::tbl function creates an object that might look like a data frame in that when you enter it on the command line, it prints a bunch of rows from the dbms table. But it is actually a list object that dplyr uses for constructing queries and retrieving data from the DBMS. The following code illustrates these issues. The dplyr::tbl function creates the connection object that we store in an object named salesorderheader_table: salesorderheader_table &lt;- dplyr::tbl(con, in_schema(&quot;sales&quot;, &quot;salesorderheader&quot;)) %&gt;% select(-rowguid) %&gt;% rename(salesorderheader_details_updated = modifieddate) At first glance, it acts like a data frame when you print it, although it only prints 10 of the table’s 31,465 rows: salesorderheader_table ## # Source: lazy query [?? x 24] ## # Database: postgres [postgres@localhost:5432/adventureworks] ## salesorderid revisionnumber orderdate duedate ## &lt;int&gt; &lt;int&gt; &lt;dttm&gt; &lt;dttm&gt; ## 1 43659 8 2011-05-31 00:00:00 2011-06-12 00:00:00 ## 2 43660 8 2011-05-31 00:00:00 2011-06-12 00:00:00 ## 3 43661 8 2011-05-31 00:00:00 2011-06-12 00:00:00 ## 4 43662 8 2011-05-31 00:00:00 2011-06-12 00:00:00 ## 5 43663 8 2011-05-31 00:00:00 2011-06-12 00:00:00 ## 6 43664 8 2011-05-31 00:00:00 2011-06-12 00:00:00 ## 7 43665 8 2011-05-31 00:00:00 2011-06-12 00:00:00 ## 8 43666 8 2011-05-31 00:00:00 2011-06-12 00:00:00 ## 9 43667 8 2011-05-31 00:00:00 2011-06-12 00:00:00 ## 10 43668 8 2011-05-31 00:00:00 2011-06-12 00:00:00 ## # … with more rows, and 20 more variables: shipdate &lt;dttm&gt;, status &lt;int&gt;, ## # onlineorderflag &lt;lgl&gt;, purchaseordernumber &lt;chr&gt;, accountnumber &lt;chr&gt;, ## # customerid &lt;int&gt;, salespersonid &lt;int&gt;, territoryid &lt;int&gt;, ## # billtoaddressid &lt;int&gt;, shiptoaddressid &lt;int&gt;, shipmethodid &lt;int&gt;, ## # creditcardid &lt;int&gt;, creditcardapprovalcode &lt;chr&gt;, ## # currencyrateid &lt;int&gt;, subtotal &lt;dbl&gt;, taxamt &lt;dbl&gt;, freight &lt;dbl&gt;, ## # totaldue &lt;dbl&gt;, comment &lt;chr&gt;, salesorderheader_details_updated &lt;dttm&gt; However, notice that the first output line shows ??, rather than providing the number of rows in the table. Similarly, the next to last line shows: … with more rows, and 20 more variables: whereas the output for a normal tbl of this salesorderheader data would say: … with 31,455 more rows, and 20 more variables: So even though salesorderheader_table is a tbl, it’s also a tbl_PqConnection: class(salesorderheader_table) ## [1] &quot;tbl_PqConnection&quot; &quot;tbl_dbi&quot; &quot;tbl_sql&quot; ## [4] &quot;tbl_lazy&quot; &quot;tbl&quot; It is not just a normal tbl of data. We can see that from the structure of salesorderheader_table: str(salesorderheader_table) ## List of 2 ## $ src:List of 2 ## ..$ con :Formal class &#39;PqConnection&#39; [package &quot;RPostgres&quot;] with 3 slots ## .. .. ..@ ptr :&lt;externalptr&gt; ## .. .. ..@ bigint : chr &quot;integer64&quot; ## .. .. ..@ typnames:&#39;data.frame&#39;: 796 obs. of 2 variables: ## .. .. .. ..$ oid : int [1:796] 16 17 18 19 20 21 22 23 24 25 ... ## .. .. .. ..$ typname: chr [1:796] &quot;bool&quot; &quot;bytea&quot; &quot;char&quot; &quot;name&quot; ... ## ..$ disco: NULL ## ..- attr(*, &quot;class&quot;)= chr [1:4] &quot;src_PqConnection&quot; &quot;src_dbi&quot; &quot;src_sql&quot; &quot;src&quot; ## $ ops:List of 4 ## ..$ name: chr &quot;select&quot; ## ..$ x :List of 2 ## .. ..$ x : &#39;ident_q&#39; chr &quot;sales.salesorderheader&quot; ## .. ..$ vars: chr [1:25] &quot;salesorderid&quot; &quot;revisionnumber&quot; &quot;orderdate&quot; &quot;duedate&quot; ... ## .. ..- attr(*, &quot;class&quot;)= chr [1:3] &quot;op_base_remote&quot; &quot;op_base&quot; &quot;op&quot; ## ..$ dots: list() ## ..$ args:List of 1 ## .. ..$ vars:List of 24 ## .. .. ..$ salesorderid : symbol salesorderid ## .. .. ..$ revisionnumber : symbol revisionnumber ## .. .. ..$ orderdate : symbol orderdate ## .. .. ..$ duedate : symbol duedate ## .. .. ..$ shipdate : symbol shipdate ## .. .. ..$ status : symbol status ## .. .. ..$ onlineorderflag : symbol onlineorderflag ## .. .. ..$ purchaseordernumber : symbol purchaseordernumber ## .. .. ..$ accountnumber : symbol accountnumber ## .. .. ..$ customerid : symbol customerid ## .. .. ..$ salespersonid : symbol salespersonid ## .. .. ..$ territoryid : symbol territoryid ## .. .. ..$ billtoaddressid : symbol billtoaddressid ## .. .. ..$ shiptoaddressid : symbol shiptoaddressid ## .. .. ..$ shipmethodid : symbol shipmethodid ## .. .. ..$ creditcardid : symbol creditcardid ## .. .. ..$ creditcardapprovalcode : symbol creditcardapprovalcode ## .. .. ..$ currencyrateid : symbol currencyrateid ## .. .. ..$ subtotal : symbol subtotal ## .. .. ..$ taxamt : symbol taxamt ## .. .. ..$ freight : symbol freight ## .. .. ..$ totaldue : symbol totaldue ## .. .. ..$ comment : symbol comment ## .. .. ..$ salesorderheader_details_updated: symbol modifieddate ## ..- attr(*, &quot;class&quot;)= chr [1:3] &quot;op_select&quot; &quot;op_single&quot; &quot;op&quot; ## - attr(*, &quot;class&quot;)= chr [1:5] &quot;tbl_PqConnection&quot; &quot;tbl_dbi&quot; &quot;tbl_sql&quot; &quot;tbl_lazy&quot; ... It has only two rows! The first row contains all the information in the con object, which contains information about all the tables and objects in the database: salesorderheader_table$src$con@typnames$typname[380:437] ## [1] &quot;user_mappings&quot; &quot;tablefunc_crosstab_2&quot; ## [3] &quot;_tablefunc_crosstab_2&quot; &quot;tablefunc_crosstab_3&quot; ## [5] &quot;_tablefunc_crosstab_3&quot; &quot;tablefunc_crosstab_4&quot; ## [7] &quot;_tablefunc_crosstab_4&quot; &quot;AccountNumber&quot; ## [9] &quot;_AccountNumber&quot; &quot;Flag&quot; ## [11] &quot;_Flag&quot; &quot;Name&quot; ## [13] &quot;_Name&quot; &quot;NameStyle&quot; ## [15] &quot;_NameStyle&quot; &quot;OrderNumber&quot; ## [17] &quot;_OrderNumber&quot; &quot;Phone&quot; ## [19] &quot;_Phone&quot; &quot;department&quot; ## [21] &quot;_department&quot; &quot;pg_toast_16439&quot; ## [23] &quot;d&quot; &quot;_d&quot; ## [25] &quot;employee&quot; &quot;_employee&quot; ## [27] &quot;pg_toast_16450&quot; &quot;e&quot; ## [29] &quot;_e&quot; &quot;employeedepartmenthistory&quot; ## [31] &quot;_employeedepartmenthistory&quot; &quot;edh&quot; ## [33] &quot;_edh&quot; &quot;employeepayhistory&quot; ## [35] &quot;_employeepayhistory&quot; &quot;pg_toast_16482&quot; ## [37] &quot;eph&quot; &quot;_eph&quot; ## [39] &quot;jobcandidate&quot; &quot;_jobcandidate&quot; ## [41] &quot;pg_toast_16495&quot; &quot;jc&quot; ## [43] &quot;_jc&quot; &quot;shift&quot; ## [45] &quot;_shift&quot; &quot;pg_toast_16506&quot; ## [47] &quot;s&quot; &quot;_s&quot; ## [49] &quot;department_departmentid_seq&quot; &quot;jobcandidate_jobcandidateid_seq&quot; ## [51] &quot;shift_shiftid_seq&quot; &quot;address&quot; ## [53] &quot;_address&quot; &quot;businessentityaddress&quot; ## [55] &quot;_businessentityaddress&quot; &quot;countryregion&quot; ## [57] &quot;_countryregion&quot; &quot;pg_toast_16533&quot; The second row contains a list of the columns in the salesorderheader table, among other things: salesorderheader_table$ops$x$vars ## [1] &quot;salesorderid&quot; &quot;revisionnumber&quot; ## [3] &quot;orderdate&quot; &quot;duedate&quot; ## [5] &quot;shipdate&quot; &quot;status&quot; ## [7] &quot;onlineorderflag&quot; &quot;purchaseordernumber&quot; ## [9] &quot;accountnumber&quot; &quot;customerid&quot; ## [11] &quot;salespersonid&quot; &quot;territoryid&quot; ## [13] &quot;billtoaddressid&quot; &quot;shiptoaddressid&quot; ## [15] &quot;shipmethodid&quot; &quot;creditcardid&quot; ## [17] &quot;creditcardapprovalcode&quot; &quot;currencyrateid&quot; ## [19] &quot;subtotal&quot; &quot;taxamt&quot; ## [21] &quot;freight&quot; &quot;totaldue&quot; ## [23] &quot;comment&quot; &quot;rowguid&quot; ## [25] &quot;modifieddate&quot; salesorderheader_table holds information needed to get the data from the ‘salesorderheader’ table, but salesorderheader_table does not hold the data itself. In the following sections, we will examine more closely this relationship between the salesorderheader_table object and the data in the database’s ‘salesorderheader’ table. Disconnect from the database: dbDisconnect(con) 6.5 Stop and start to demonstrate persistence Stop the container: sp_docker_stop(&quot;adventureworks&quot;) sp_docker_containers_tibble() ## # A tibble: 0 x 0 When we stopped adventureworks, it no longer appeared in the tibble. But the container is still there. sp_docker_containers_tibble by default only lists the running containers. But we can use the list_all option and see it: sp_docker_containers_tibble(list_all = TRUE) ## # A tibble: 1 x 12 ## container_id image command created_at created ports status size names ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 dd6f353c7881 post… docker… 2019-09-0… 27 sec… &lt;NA&gt; Exite… 0B (… adve… ## # … with 3 more variables: labels &lt;chr&gt;, mounts &lt;chr&gt;, networks &lt;chr&gt; Restart the container and verify that the adventureworks tables are still there: sp_docker_start(&quot;adventureworks&quot;) sp_docker_containers_tibble() ## # A tibble: 1 x 12 ## container_id image command created_at created ports status size names ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 dd6f353c7881 post… docker… 2019-09-0… 28 sec… 0.0.… Up Le… 63B … adve… ## # … with 3 more variables: labels &lt;chr&gt;, mounts &lt;chr&gt;, networks &lt;chr&gt; Connect to the adventureworks database in PostgreSQL: con &lt;- sp_get_postgres_connection( host = &quot;localhost&quot;, port = 5432, user = &quot;postgres&quot;, password = &quot;postgres&quot;, dbname = &quot;adventureworks&quot;, seconds_to_test = 30 ) Check that you can still see the first few rows of the salesorderheader table: tbl(con, in_schema(&quot;sales&quot;, &quot;salesorderheader&quot;)) %&gt;% head() ## # Source: lazy query [?? x 25] ## # Database: postgres [postgres@localhost:5432/adventureworks] ## salesorderid revisionnumber orderdate duedate ## &lt;int&gt; &lt;int&gt; &lt;dttm&gt; &lt;dttm&gt; ## 1 43659 8 2011-05-31 00:00:00 2011-06-12 00:00:00 ## 2 43660 8 2011-05-31 00:00:00 2011-06-12 00:00:00 ## 3 43661 8 2011-05-31 00:00:00 2011-06-12 00:00:00 ## 4 43662 8 2011-05-31 00:00:00 2011-06-12 00:00:00 ## 5 43663 8 2011-05-31 00:00:00 2011-06-12 00:00:00 ## 6 43664 8 2011-05-31 00:00:00 2011-06-12 00:00:00 ## # … with 21 more variables: shipdate &lt;dttm&gt;, status &lt;int&gt;, ## # onlineorderflag &lt;lgl&gt;, purchaseordernumber &lt;chr&gt;, accountnumber &lt;chr&gt;, ## # customerid &lt;int&gt;, salespersonid &lt;int&gt;, territoryid &lt;int&gt;, ## # billtoaddressid &lt;int&gt;, shiptoaddressid &lt;int&gt;, shipmethodid &lt;int&gt;, ## # creditcardid &lt;int&gt;, creditcardapprovalcode &lt;chr&gt;, ## # currencyrateid &lt;int&gt;, subtotal &lt;dbl&gt;, taxamt &lt;dbl&gt;, freight &lt;dbl&gt;, ## # totaldue &lt;dbl&gt;, comment &lt;chr&gt;, rowguid &lt;chr&gt;, modifieddate &lt;dttm&gt; 6.6 Cleaning up Always have R disconnect from the database when you’re done. dbDisconnect(con) Stop the adventureworks container: sp_docker_stop(&quot;adventureworks&quot;) Show that the container still exists even though it’s not running sp_show_all_docker_containers() ## CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES ## dd6f353c7881 postgres:11 &quot;docker-entrypoint.s…&quot; 29 seconds ago Exited (0) Less than a second ago adventureworks Next time, you can just use this command to start the container: sp_docker_start(&quot;adventureworks&quot;) And once stopped, the container can be removed with: sp_check_that_docker_is_up(&quot;adventureworks&quot;) 6.7 Using the adventureworks container in the rest of the book After this point in the book, we assume that Docker is up and that we can always start up our adventureworks database with: sp_docker_start(&quot;adventureworks&quot;) "],
["chapter-database-exploration.html", "Chapter 7 Exploring a database 7.1 Setup 7.2 Getting data from the database 7.3 Additional reading", " Chapter 7 Exploring a database This chapter demonstrates how to: Investigate what tables are in the database and what fields a table contains Build up queries 7.1 Setup The following packages are used in this chapter: library(tidyverse) library(DBI) library(RPostgres) library(dbplyr) require(knitr) library(bookdown) library(sqlpetr) Assume that the Docker container with PostgreSQL and the adventureworks database are ready to go. If not go back to [Chapter 6][#chapter_setup-adventureworks-db] sqlpetr::sp_docker_start(&quot;adventureworks&quot;) Connect to the database: con &lt;- sqlpetr::sp_get_postgres_connection( user = Sys.getenv(&quot;DEFAULT_POSTGRES_USER_NAME&quot;), password = Sys.getenv(&quot;DEFAULT_POSTGRES_PASSWORD&quot;), dbname = &quot;adventureworks&quot;, port = 5432, seconds_to_test = 20, connection_tab = TRUE ) 7.2 Getting data from the database As we show later on, the database serves as a store of data and as an engine for sub-setting, joining, and computation on the data. We begin with getting data from the dbms, or “downloading” data. 7.2.1 Finding out what’s there We’ve already seen how the connections tab is the easiest way to explore a database. Adventureworks connections tab It’s a little more complex than the typical SQLite examples found in many tutorials because we have additional structure: the adventureworks database contains schemas, which contain tables. The hr schema is the same as the sales schema, but with nicknames (the d table in hr is the same as the department table in the sales schema). Schemas are used to control access and to set up shortcuts. Clicking on the the right opens up the table view of the d table: Adventureworks connections tab Exploring a databse using R code is a little more complicated. The following command does not give you a list of tables as it did in the simpler case when there were no schemas other than the public schema: tables &lt;- DBI::dbListTables(con) tables ## character(0) We need to to tell the database which schemas to search dbExecute(con, &quot;set search_path to sales, sa;&quot;) ## [1] 0 DBI::dbListTables(con) ## [1] &quot;countryregioncurrency&quot; ## [2] &quot;c&quot; ## [3] &quot;cc&quot; ## [4] &quot;customer&quot; ## [5] &quot;cr&quot; ## [6] &quot;crc&quot; ## [7] &quot;currencyrate&quot; ## [8] &quot;creditcard&quot; ## [9] &quot;cu&quot; ## [10] &quot;pcc&quot; ## [11] &quot;personcreditcard&quot; ## [12] &quot;s&quot; ## [13] &quot;specialoffer&quot; ## [14] &quot;sci&quot; ## [15] &quot;sohsr&quot; ## [16] &quot;so&quot; ## [17] &quot;specialofferproduct&quot; ## [18] &quot;sod&quot; ## [19] &quot;salesorderheadersalesreason&quot; ## [20] &quot;soh&quot; ## [21] &quot;sop&quot; ## [22] &quot;shoppingcartitem&quot; ## [23] &quot;salespersonquotahistory&quot; ## [24] &quot;sp&quot; ## [25] &quot;spqh&quot; ## [26] &quot;salesperson&quot; ## [27] &quot;sr&quot; ## [28] &quot;currency&quot; ## [29] &quot;store&quot; ## [30] &quot;salesorderheader&quot; ## [31] &quot;salesorderdetail&quot; ## [32] &quot;salesreason&quot; ## [33] &quot;st&quot; ## [34] &quot;sth&quot; ## [35] &quot;salesterritoryhistory&quot; ## [36] &quot;tr&quot; ## [37] &quot;vindividualcustomer&quot; ## [38] &quot;vpersondemographics&quot; ## [39] &quot;vsalesperson&quot; ## [40] &quot;vsalespersonsalesbyfiscalyears&quot; ## [41] &quot;vsalespersonsalesbyfiscalyearsdata&quot; ## [42] &quot;vstorewithaddresses&quot; ## [43] &quot;vstorewithcontacts&quot; ## [44] &quot;vstorewithdemographics&quot; ## [45] &quot;salestaxrate&quot; ## [46] &quot;salesterritory&quot; Notice the way the database designers have abbreviated table names for your convenience. DBI::dbListFields(con, &quot;so&quot;) ## [1] &quot;id&quot; &quot;specialofferid&quot; &quot;description&quot; &quot;discountpct&quot; ## [5] &quot;type&quot; &quot;category&quot; &quot;startdate&quot; &quot;enddate&quot; ## [9] &quot;minqty&quot; &quot;maxqty&quot; &quot;rowguid&quot; &quot;modifieddate&quot; 7.2.2 Listing all the fields for all the tables The first example, DBI::dbListTables(con) returned 46 tables and the second example, DBI::dbListFields(con, &quot;salesorderheader&quot;) returns 12 fields. Here we combine the two calls to return a list of tables which has a list of all the fields in the table. The code block just shows the first two tables. table_columns &lt;- purrr::map(tables, ~ dbListFields(.,con = con) ) Rename each list [[1]] … [[43]] to meaningful table name names(table_columns) &lt;- tables head(table_columns) ## named list() Later on we’ll discuss how to get more extensive data about each table and column from the database’s own store of metadata using a similar technique. As we go further the issue of scale will come up again and again: you need to be careful about how much data a call to the dbms will return, whether it’s a list of tables or a table that could have millions of rows. It’s important to connect with people who own, generate, or are the subjects of the data. A good chat with people who own the data, generate it, or are the subjects can generate insights and set the context for your investigation of the database. The purpose for collecting the data or circumstances where it was collected may be buried far afield in an organization, but usually someone knows. The metadata discussed in a later chapter is essential but will only take you so far. There are different ways of just looking at the data, which we explore below. 7.2.3 A table object that can be reused The dplyr::tbl function gives us more control over access to a table by enabling control over which columns and rows to download. It creates an object that might look like a data frame, but it’s actually a list object that dplyr uses for constructing queries and retrieving data from the DBMS. salesorderheader_table &lt;- dplyr::tbl(con, &quot;salesorderheader&quot;) class(salesorderheader_table) ## [1] &quot;tbl_PqConnection&quot; &quot;tbl_dbi&quot; &quot;tbl_sql&quot; ## [4] &quot;tbl_lazy&quot; &quot;tbl&quot; 7.2.4 Table links for queries To illustrate the different issues involved in data retrieval, we create more connection objects to link to two other tables. salesorderheader_table &lt;- tbl(con, in_schema(&quot;sales&quot;, &quot;salesorderheader&quot;)) %&gt;% select(-rowguid, -modifieddate) The ‘salesorderheader’ table has 31,465 obs. of 23 columns because we dropped modifieddate which is a column name that appears in more than one table. To get the data we want we will usually want to drop or rename duplicates as we connect to each table. address_table &lt;- tbl(con, in_schema(&quot;person&quot;, &quot;address&quot;)) %&gt;% select(-rowguid) %&gt;% rename(address_info_updated = modifieddate) The ‘address’ table has 19,614 rows and 8 columns. Here is a simple string of dplyr verbs similar to the query used to illustrate issues in the last chapter: Q &lt;- salesorderheader_table %&gt;% left_join(address_table, by = c(&quot;shiptoaddressid&quot; = &quot;addressid&quot;)) %&gt;% dplyr::select(orderdate, shipdate, addressline1, city) Q ## # Source: lazy query [?? x 4] ## # Database: postgres [postgres@localhost:5432/adventureworks] ## orderdate shipdate addressline1 city ## &lt;dttm&gt; &lt;dttm&gt; &lt;chr&gt; &lt;chr&gt; ## 1 2011-05-31 00:00:00 2011-06-07 00:00:00 42525 Austell Road Austell ## 2 2011-05-31 00:00:00 2011-06-07 00:00:00 6055 Shawnee Industr… Suwanee ## 3 2011-05-31 00:00:00 2011-06-07 00:00:00 2573 Dufferin Street Toronto ## 4 2011-05-31 00:00:00 2011-06-07 00:00:00 2500 University Aven… Toronto ## 5 2011-05-31 00:00:00 2011-06-07 00:00:00 3065 Santa Margarita… Trabuco C… ## 6 2011-05-31 00:00:00 2011-06-07 00:00:00 765 Delridge Way Sw Seattle ## 7 2011-05-31 00:00:00 2011-06-07 00:00:00 4251 First Avenue Seattle ## 8 2011-05-31 00:00:00 2011-06-07 00:00:00 9920 Bridgepointe Pa… San Mateo ## 9 2011-05-31 00:00:00 2011-06-07 00:00:00 St. Louis Marketplace Saint Lou… ## 10 2011-05-31 00:00:00 2011-06-07 00:00:00 254480 River Rd Richmond ## # … with more rows Note that in the previous example we follow this book’s convention of creating a connection object to each table and fully qualifying function names (e.g., specifying the package). In practice, it’s possible and convenient to use more abbreviated notation. Q &lt;- tbl(con, in_schema(&quot;sales&quot;, &quot;salesorderheader&quot;)) %&gt;% select(-rowguid, -modifieddate) %&gt;% left_join(tbl(con, in_schema(&quot;person&quot;, &quot;address&quot;)), by = c(&quot;shiptoaddressid&quot; = &quot;addressid&quot;)) %&gt;% dplyr::select(orderdate, shipdate, addressline1, city) Q ## # Source: lazy query [?? x 4] ## # Database: postgres [postgres@localhost:5432/adventureworks] ## orderdate shipdate addressline1 city ## &lt;dttm&gt; &lt;dttm&gt; &lt;chr&gt; &lt;chr&gt; ## 1 2011-05-31 00:00:00 2011-06-07 00:00:00 42525 Austell Road Austell ## 2 2011-05-31 00:00:00 2011-06-07 00:00:00 6055 Shawnee Industr… Suwanee ## 3 2011-05-31 00:00:00 2011-06-07 00:00:00 2573 Dufferin Street Toronto ## 4 2011-05-31 00:00:00 2011-06-07 00:00:00 2500 University Aven… Toronto ## 5 2011-05-31 00:00:00 2011-06-07 00:00:00 3065 Santa Margarita… Trabuco C… ## 6 2011-05-31 00:00:00 2011-06-07 00:00:00 765 Delridge Way Sw Seattle ## 7 2011-05-31 00:00:00 2011-06-07 00:00:00 4251 First Avenue Seattle ## 8 2011-05-31 00:00:00 2011-06-07 00:00:00 9920 Bridgepointe Pa… San Mateo ## 9 2011-05-31 00:00:00 2011-06-07 00:00:00 St. Louis Marketplace Saint Lou… ## 10 2011-05-31 00:00:00 2011-06-07 00:00:00 254480 River Rd Richmond ## # … with more rows 7.2.5 Close the connection and shut down adventureworks Where you place the collect function matters. DBI::dbDisconnect(con) sqlpetr::sp_docker_stop(&quot;adventureworks&quot;) 7.3 Additional reading (Wickham 2018) (Baumer 2018) References "],
["chapter-dbms-queries-intro.html", "Chapter 8 Introduction to DBMS queries 8.1 Setup 8.2 Downloading a single table 8.3 Mixing dplyr and SQL 8.4 Examining a single table with R 8.5 Additional reading", " Chapter 8 Introduction to DBMS queries This chapter demonstrates how to: Get a glimpse of what tables are in the database and what fields a table contains Download all or part of a table from the dbms See how dplyr code is translated into SQL commands Get acquainted with some useful tools for investigating a single table Begin thinking about how to divide the work between your local R session and the dbms 8.1 Setup The following packages are used in this chapter: library(tidyverse) library(DBI) library(RPostgres) library(dbplyr) require(knitr) library(bookdown) library(sqlpetr) Assume that the Docker container with PostgreSQL and the adventureworks database are ready to go. If not go back to [Chapter 6][#chapter_setup-adventureworks-db] sqlpetr::sp_docker_start(&quot;adventureworks&quot;) Connect to the database: con &lt;- sqlpetr::sp_get_postgres_connection( user = Sys.getenv(&quot;DEFAULT_POSTGRES_USER_NAME&quot;), password = Sys.getenv(&quot;DEFAULT_POSTGRES_PASSWORD&quot;), dbname = &quot;adventureworks&quot;, port = 5432, seconds_to_test = 20, connection_tab = TRUE ) 8.2 Downloading a single table For the moment, assume you know something about the database and specifically what table you need to retrieve. 8.2.1 Downloading the entire table There are many different methods of getting data from a DBMS, and we’ll explore the different ways of controlling each one of them. DBI::dbReadTable will download an entire table into an R tibble. dbExecute(con, &quot;set search_path to sales, humanresources;&quot;) # watch for duplicates! ## [1] 0 salesorderheader_tibble &lt;- DBI::dbReadTable(con, &quot;salesorderheader&quot;) str(salesorderheader_tibble) ## &#39;data.frame&#39;: 31465 obs. of 25 variables: ## $ salesorderid : int 43659 43660 43661 43662 43663 43664 43665 43666 43667 43668 ... ## $ revisionnumber : int 8 8 8 8 8 8 8 8 8 8 ... ## $ orderdate : POSIXct, format: &quot;2011-05-31&quot; &quot;2011-05-31&quot; ... ## $ duedate : POSIXct, format: &quot;2011-06-12&quot; &quot;2011-06-12&quot; ... ## $ shipdate : POSIXct, format: &quot;2011-06-07&quot; &quot;2011-06-07&quot; ... ## $ status : int 5 5 5 5 5 5 5 5 5 5 ... ## $ onlineorderflag : logi FALSE FALSE FALSE FALSE FALSE FALSE ... ## $ purchaseordernumber : chr &quot;PO522145787&quot; &quot;PO18850127500&quot; &quot;PO18473189620&quot; &quot;PO18444174044&quot; ... ## $ accountnumber : chr &quot;10-4020-000676&quot; &quot;10-4020-000117&quot; &quot;10-4020-000442&quot; &quot;10-4020-000227&quot; ... ## $ customerid : int 29825 29672 29734 29994 29565 29898 29580 30052 29974 29614 ... ## $ salespersonid : int 279 279 282 282 276 280 283 276 277 282 ... ## $ territoryid : int 5 5 6 6 4 1 1 4 3 6 ... ## $ billtoaddressid : int 985 921 517 482 1073 876 849 1074 629 529 ... ## $ shiptoaddressid : int 985 921 517 482 1073 876 849 1074 629 529 ... ## $ shipmethodid : int 5 5 5 5 5 5 5 5 5 5 ... ## $ creditcardid : int 16281 5618 1346 10456 4322 806 15232 13349 10370 1566 ... ## $ creditcardapprovalcode: chr &quot;105041Vi84182&quot; &quot;115213Vi29411&quot; &quot;85274Vi6854&quot; &quot;125295Vi53935&quot; ... ## $ currencyrateid : int NA NA 4 4 NA NA NA NA NA 4 ... ## $ subtotal : num 20566 1294 32726 28833 419 ... ## $ taxamt : num 1971.5 124.2 3153.8 2775.2 40.3 ... ## $ freight : num 616.1 38.8 985.6 867.2 12.6 ... ## $ totaldue : num 23153 1457 36866 32475 472 ... ## $ comment : chr NA NA NA NA ... ## $ rowguid : chr &quot;79b65321-39ca-4115-9cba-8fe0903e12e6&quot; &quot;738dc42d-d03b-48a1-9822-f95a67ea7389&quot; &quot;d91b9131-18a4-4a11-bc3a-90b6f53e9d74&quot; &quot;4a1ecfc0-cc3a-4740-b028-1c50bb48711c&quot; ... ## $ modifieddate : POSIXct, format: &quot;2011-06-07&quot; &quot;2011-06-07&quot; ... That’s very simple, but if the table is large it may not be a good idea, since R is designed to keep the entire table in memory. Note that the first line of the str() output reports the total number of observations. 8.2.2 A table object that can be reused The dplyr::tbl function gives us more control over access to a table by enabling control over which columns and rows to download. It creates an object that might look like a data frame, but it’s actually a list object that dplyr uses for constructing queries and retrieving data from the DBMS. salesorderheader_table &lt;- dplyr::tbl(con, &quot;salesorderheader&quot;) class(salesorderheader_table) ## [1] &quot;tbl_PqConnection&quot; &quot;tbl_dbi&quot; &quot;tbl_sql&quot; ## [4] &quot;tbl_lazy&quot; &quot;tbl&quot; 8.2.3 Controlling the number of rows returned The collect function triggers the creation of a tibble and controls the number of rows that the DBMS sends to R. For more complex queries, the dplyr::collect() function provides a mechanism to indicate what’s processed on on the dbms server and what’s processed by R on the local machine. The chapter on Lazy Evaluation and Execution Environment discusses this issue in detail. salesorderheader_table %&gt;% dplyr::collect(n = 3) %&gt;% dim ## [1] 3 25 salesorderheader_table %&gt;% dplyr::collect(n = 500) %&gt;% dim ## [1] 500 25 8.2.4 Random rows from the dbms When the dbms contains many rows, a sample of the data may be plenty for your purposes. Although dplyr has nice functions to sample a data frame that’s already in R (e.g., the sample_n and sample_frac functions), to get a sample from the dbms we have to use dbGetQuery to send native SQL to the database. To peek ahead, here is one example of a query that retrieves 20 rows from a 1% sample: one_percent_sample &lt;- DBI::dbGetQuery( con, &quot;SELECT orderdate, subtotal, taxamt, freight, totaldue FROM salesorderheader TABLESAMPLE BERNOULLI(3) LIMIT 20; &quot; ) one_percent_sample ## orderdate subtotal taxamt freight totaldue ## 1 2011-06-02 3578.270 286.2616 89.4568 3953.988 ## 2 2011-06-04 3578.270 286.2616 89.4568 3953.988 ## 3 2011-06-05 3578.270 286.2616 89.4568 3953.988 ## 4 2011-06-17 3578.270 286.2616 89.4568 3953.988 ## 5 2011-06-20 3578.270 286.2616 89.4568 3953.988 ## 6 2011-06-21 3374.990 269.9992 84.3748 3729.364 ## 7 2011-06-26 3578.270 286.2616 89.4568 3953.988 ## 8 2011-07-01 1749.588 167.9604 52.4876 1970.036 ## 9 2011-07-01 18320.689 1763.0175 550.9430 20634.650 ## 10 2011-07-05 3578.270 286.2616 89.4568 3953.988 ## 11 2011-07-26 3578.270 286.2616 89.4568 3953.988 ## 12 2011-07-28 3578.270 286.2616 89.4568 3953.988 ## 13 2011-07-31 3374.990 269.9992 84.3748 3729.364 ## 14 2011-08-01 8129.976 780.4777 243.8993 9154.353 ## 15 2011-08-06 3578.270 286.2616 89.4568 3953.988 ## 16 2011-08-09 3374.990 269.9992 84.3748 3729.364 ## 17 2011-08-12 3578.270 286.2616 89.4568 3953.988 ## 18 2011-08-20 3578.270 286.2616 89.4568 3953.988 ## 19 2011-08-31 7802.882 748.3930 233.8728 8785.147 ## 20 2011-08-31 3578.270 286.2616 89.4568 3953.988 Exact sample of 100 records This technique depends on knowing the range of a record index, such as the businessentityid in the salesorderheader table of our adventureworks database. Start by finding the min and max values. DBI::dbListFields(con, &quot;salesorderheader&quot;) ## [1] &quot;salesorderid&quot; &quot;revisionnumber&quot; ## [3] &quot;orderdate&quot; &quot;duedate&quot; ## [5] &quot;shipdate&quot; &quot;status&quot; ## [7] &quot;onlineorderflag&quot; &quot;purchaseordernumber&quot; ## [9] &quot;accountnumber&quot; &quot;customerid&quot; ## [11] &quot;salespersonid&quot; &quot;territoryid&quot; ## [13] &quot;billtoaddressid&quot; &quot;shiptoaddressid&quot; ## [15] &quot;shipmethodid&quot; &quot;creditcardid&quot; ## [17] &quot;creditcardapprovalcode&quot; &quot;currencyrateid&quot; ## [19] &quot;subtotal&quot; &quot;taxamt&quot; ## [21] &quot;freight&quot; &quot;totaldue&quot; ## [23] &quot;comment&quot; &quot;rowguid&quot; ## [25] &quot;modifieddate&quot; salesorderheader_df &lt;- DBI::dbReadTable(con, &quot;salesorderheader&quot;) (max_id &lt;- max(salesorderheader_df$salesorderid)) ## [1] 75123 (min_id &lt;- min(salesorderheader_df$salesorderid)) ## [1] 43659 Set the random number seed and draw the sample. set.seed(123) sample_rows &lt;- sample(1:max(salesorderheader_df$salesorderid), 10) salesorderheader_table &lt;- dplyr::tbl(con, &quot;salesorderheader&quot;) Run query with the filter verb listing the randomly sampled rows to be retrieved: salesorderheader_sample &lt;- salesorderheader_table %&gt;% dplyr::filter(salesorderid %in% sample_rows) %&gt;% dplyr::collect() str(salesorderheader_sample) ## Classes &#39;tbl_df&#39;, &#39;tbl&#39; and &#39;data.frame&#39;: 7 obs. of 25 variables: ## $ salesorderid : int 45404 46435 51663 57870 62555 65161 68293 ## $ revisionnumber : int 8 8 8 8 8 8 8 ## $ orderdate : POSIXct, format: &quot;2012-01-10&quot; &quot;2012-05-06&quot; ... ## $ duedate : POSIXct, format: &quot;2012-01-22&quot; &quot;2012-05-18&quot; ... ## $ shipdate : POSIXct, format: &quot;2012-01-17&quot; &quot;2012-05-13&quot; ... ## $ status : int 5 5 5 5 5 5 5 ## $ onlineorderflag : logi TRUE TRUE TRUE TRUE TRUE FALSE ... ## $ purchaseordernumber : chr NA NA NA NA ... ## $ accountnumber : chr &quot;10-4030-011217&quot; &quot;10-4030-012251&quot; &quot;10-4030-016327&quot; &quot;10-4030-018572&quot; ... ## $ customerid : int 11217 12251 16327 18572 13483 29799 13239 ## $ salespersonid : int NA NA NA NA NA 281 NA ## $ territoryid : int 1 9 8 4 1 4 6 ## $ billtoaddressid : int 19321 24859 19265 16902 15267 997 27923 ## $ shiptoaddressid : int 19321 24859 19265 16902 15267 997 27923 ## $ shipmethodid : int 1 1 1 1 1 5 1 ## $ creditcardid : int 8241 13188 16357 1884 4409 12582 1529 ## $ creditcardapprovalcode: chr &quot;332581Vi42712&quot; &quot;635144Vi68383&quot; &quot;420152Vi84562&quot; &quot;1224478Vi9772&quot; ... ## $ currencyrateid : int NA 4121 NA NA NA NA 11581 ## $ subtotal : num 3578 3375 2466 14 57 ... ## $ taxamt : num 286.26 270 197.31 1.12 4.56 ... ## $ freight : num 89.457 84.375 61.658 0.349 1.424 ... ## $ totaldue : num 3954 3729.4 2725.3 15.4 63 ... ## $ comment : chr NA NA NA NA ... ## $ rowguid : chr &quot;358f91b2-dadd-4014-8d4f-7f9736cb664e&quot; &quot;eb312409-fcd5-4bac-bd3b-16d4bd7889db&quot; &quot;ddc60552-af98-4166-9249-d09d424d8430&quot; &quot;fe46e631-47b9-4e14-9da5-1e4a4a135364&quot; ... ## $ modifieddate : POSIXct, format: &quot;2012-01-17&quot; &quot;2012-05-13&quot; ... 8.2.5 Sub-setting variables A table in the dbms may not only have many more rows than you want, but also many more columns. The select command controls which columns are retrieved. salesorderheader_table %&gt;% dplyr::select(orderdate, subtotal, taxamt, freight, totaldue) %&gt;% head() ## # Source: lazy query [?? x 5] ## # Database: postgres [postgres@localhost:5432/adventureworks] ## orderdate subtotal taxamt freight totaldue ## &lt;dttm&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 2011-05-31 00:00:00 20566. 1972. 616. 23153. ## 2 2011-05-31 00:00:00 1294. 124. 38.8 1457. ## 3 2011-05-31 00:00:00 32726. 3154. 986. 36866. ## 4 2011-05-31 00:00:00 28833. 2775. 867. 32475. ## 5 2011-05-31 00:00:00 419. 40.3 12.6 472. ## 6 2011-05-31 00:00:00 24433. 2345. 733. 27510. That’s exactly equivalent to submitting the following SQL commands dirctly: DBI::dbGetQuery( con, &#39;SELECT &quot;orderdate&quot;, &quot;subtotal&quot;, &quot;taxamt&quot;, &quot;freight&quot;, &quot;totaldue&quot; FROM &quot;salesorderheader&quot; LIMIT 6&#39;) ## orderdate subtotal taxamt freight totaldue ## 1 2011-05-31 20565.6206 1971.5149 616.0984 23153.2339 ## 2 2011-05-31 1294.2529 124.2483 38.8276 1457.3288 ## 3 2011-05-31 32726.4786 3153.7696 985.5530 36865.8012 ## 4 2011-05-31 28832.5289 2775.1646 867.2389 32474.9324 ## 5 2011-05-31 419.4589 40.2681 12.5838 472.3108 ## 6 2011-05-31 24432.6088 2344.9921 732.8100 27510.4109 We won’t discuss dplyr methods for sub-setting variables, deriving new ones, or sub-setting rows based on the values found in the table, because they are covered well in other places, including: Comprehensive reference: https://dplyr.tidyverse.org/ Good tutorial: https://suzan.rbind.io/tags/dplyr/ In practice we find that, renaming variables is often quite important because the names in an SQL database might not meet your needs as an analyst. In “the wild”, you will find names that are ambiguous or overly specified, with spaces in them, and other problems that will make them difficult to use in R. It is good practice to do whatever renaming you are going to do in a predictable place like at the top of your code. The names in the adventureworks database are simple and clear, but if they were not, you might rename them for subsequent use in this way: tbl(con, &quot;salesorderheader&quot;) %&gt;% dplyr::rename(order_date = orderdate, sub_total_amount = subtotal, tax_amount = taxamt, freight_amount = freight, total_due_amount = totaldue) %&gt;% dplyr::select(order_date, sub_total_amount, tax_amount, freight_amount, total_due_amount ) %&gt;% # head() show_query() ## &lt;SQL&gt; ## SELECT &quot;orderdate&quot; AS &quot;order_date&quot;, &quot;subtotal&quot; AS &quot;sub_total_amount&quot;, &quot;taxamt&quot; AS &quot;tax_amount&quot;, &quot;freight&quot; AS &quot;freight_amount&quot;, &quot;totaldue&quot; AS &quot;total_due_amount&quot; ## FROM &quot;salesorderheader&quot; That’s equivalent to the following SQL code: DBI::dbGetQuery( con, &#39;SELECT &quot;orderdate&quot; AS &quot;order_date&quot;, &quot;subtotal&quot; AS &quot;sub_total_amount&quot;, &quot;taxamt&quot; AS &quot;tax_amount&quot;, &quot;freight&quot; AS &quot;freight_amount&quot;, &quot;totaldue&quot; AS &quot;total_due_amount&quot; FROM &quot;salesorderheader&quot;&#39; ) %&gt;% head() ## order_date sub_total_amount tax_amount freight_amount total_due_amount ## 1 2011-05-31 20565.6206 1971.5149 616.0984 23153.2339 ## 2 2011-05-31 1294.2529 124.2483 38.8276 1457.3288 ## 3 2011-05-31 32726.4786 3153.7696 985.5530 36865.8012 ## 4 2011-05-31 28832.5289 2775.1646 867.2389 32474.9324 ## 5 2011-05-31 419.4589 40.2681 12.5838 472.3108 ## 6 2011-05-31 24432.6088 2344.9921 732.8100 27510.4109 The one difference is that the SQL code returns a regular data frame and the dplyr code returns a tibble. Notice that the seconds are greyed out in the tibble display. 8.2.6 Translating dplyr code to SQL queries Where did the translations we’ve shown above come from? The show_query function shows how dplyr is translating your query to the dialect of the target dbms: salesorderheader_table %&gt;% dplyr::tally() %&gt;% dplyr::show_query() ## &lt;SQL&gt; ## SELECT COUNT(*) AS &quot;n&quot; ## FROM &quot;salesorderheader&quot; Here is an extensive discussion of how dplyr code is translated into SQL: https://dbplyr.tidyverse.org/articles/sql-translation.html If you prefer to use SQL directly, rather than dplyr, you can submit SQL code to the DBMS through the DBI::dbGetQuery function: DBI::dbGetQuery( con, &#39;SELECT COUNT(*) AS &quot;n&quot; FROM &quot;salesorderheader&quot; &#39; ) ## n ## 1 31465 When you create a report to run repeatedly, you might want to put that query into R markdown. That way you can also execute that SQL code in a chunk with the following header: {sql, connection=con, output.var = &quot;query_results&quot;} SELECT COUNT(*) AS &quot;n&quot; FROM &quot;salesorderheader&quot;; Rmarkdown stores that query result in a tibble which can be printed by referring to it: query_results ## n ## 1 31465 8.3 Mixing dplyr and SQL When dplyr finds code that it does not know how to translate into SQL, it will simply pass it along to the dbms. Therefore you can interleave native commands that your dbms will understand in the middle of dplyr code. Consider this example that’s derived from (Ruiz 2019): salesorderheader_table %&gt;% dplyr::select_at(vars(subtotal, contains(&quot;date&quot;))) %&gt;% dplyr::mutate(today = now()) %&gt;% dplyr::show_query() ## &lt;SQL&gt; ## SELECT &quot;subtotal&quot;, &quot;orderdate&quot;, &quot;duedate&quot;, &quot;shipdate&quot;, &quot;modifieddate&quot;, CURRENT_TIMESTAMP AS &quot;today&quot; ## FROM &quot;salesorderheader&quot; That is native to PostgreSQL, not ANSI standard SQL. Verify that it works: salesorderheader_table %&gt;% dplyr::select_at(vars(subtotal, contains(&quot;date&quot;))) %&gt;% head() %&gt;% dplyr::mutate(today = now()) %&gt;% dplyr::collect() ## # A tibble: 6 x 6 ## subtotal orderdate duedate shipdate ## &lt;dbl&gt; &lt;dttm&gt; &lt;dttm&gt; &lt;dttm&gt; ## 1 20566. 2011-05-31 00:00:00 2011-06-12 00:00:00 2011-06-07 00:00:00 ## 2 1294. 2011-05-31 00:00:00 2011-06-12 00:00:00 2011-06-07 00:00:00 ## 3 32726. 2011-05-31 00:00:00 2011-06-12 00:00:00 2011-06-07 00:00:00 ## 4 28833. 2011-05-31 00:00:00 2011-06-12 00:00:00 2011-06-07 00:00:00 ## 5 419. 2011-05-31 00:00:00 2011-06-12 00:00:00 2011-06-07 00:00:00 ## 6 24433. 2011-05-31 00:00:00 2011-06-12 00:00:00 2011-06-07 00:00:00 ## # … with 2 more variables: modifieddate &lt;dttm&gt;, today &lt;dttm&gt; 8.4 Examining a single table with R Dealing with a large, complex database highlights the utility of specific tools in R. We include brief examples that we find to be handy: Base R structure: str Printing out some of the data: datatable, kable, and View Summary statistics: summary glimpse in the tibble package, which is included in the tidyverse skim in the skimr package 8.4.1 str - a base package workhorse str is a workhorse function that lists variables, their type and a sample of the first few variable values. str(salesorderheader_tibble) ## &#39;data.frame&#39;: 31465 obs. of 25 variables: ## $ salesorderid : int 43659 43660 43661 43662 43663 43664 43665 43666 43667 43668 ... ## $ revisionnumber : int 8 8 8 8 8 8 8 8 8 8 ... ## $ orderdate : POSIXct, format: &quot;2011-05-31&quot; &quot;2011-05-31&quot; ... ## $ duedate : POSIXct, format: &quot;2011-06-12&quot; &quot;2011-06-12&quot; ... ## $ shipdate : POSIXct, format: &quot;2011-06-07&quot; &quot;2011-06-07&quot; ... ## $ status : int 5 5 5 5 5 5 5 5 5 5 ... ## $ onlineorderflag : logi FALSE FALSE FALSE FALSE FALSE FALSE ... ## $ purchaseordernumber : chr &quot;PO522145787&quot; &quot;PO18850127500&quot; &quot;PO18473189620&quot; &quot;PO18444174044&quot; ... ## $ accountnumber : chr &quot;10-4020-000676&quot; &quot;10-4020-000117&quot; &quot;10-4020-000442&quot; &quot;10-4020-000227&quot; ... ## $ customerid : int 29825 29672 29734 29994 29565 29898 29580 30052 29974 29614 ... ## $ salespersonid : int 279 279 282 282 276 280 283 276 277 282 ... ## $ territoryid : int 5 5 6 6 4 1 1 4 3 6 ... ## $ billtoaddressid : int 985 921 517 482 1073 876 849 1074 629 529 ... ## $ shiptoaddressid : int 985 921 517 482 1073 876 849 1074 629 529 ... ## $ shipmethodid : int 5 5 5 5 5 5 5 5 5 5 ... ## $ creditcardid : int 16281 5618 1346 10456 4322 806 15232 13349 10370 1566 ... ## $ creditcardapprovalcode: chr &quot;105041Vi84182&quot; &quot;115213Vi29411&quot; &quot;85274Vi6854&quot; &quot;125295Vi53935&quot; ... ## $ currencyrateid : int NA NA 4 4 NA NA NA NA NA 4 ... ## $ subtotal : num 20566 1294 32726 28833 419 ... ## $ taxamt : num 1971.5 124.2 3153.8 2775.2 40.3 ... ## $ freight : num 616.1 38.8 985.6 867.2 12.6 ... ## $ totaldue : num 23153 1457 36866 32475 472 ... ## $ comment : chr NA NA NA NA ... ## $ rowguid : chr &quot;79b65321-39ca-4115-9cba-8fe0903e12e6&quot; &quot;738dc42d-d03b-48a1-9822-f95a67ea7389&quot; &quot;d91b9131-18a4-4a11-bc3a-90b6f53e9d74&quot; &quot;4a1ecfc0-cc3a-4740-b028-1c50bb48711c&quot; ... ## $ modifieddate : POSIXct, format: &quot;2011-06-07&quot; &quot;2011-06-07&quot; ... 8.4.2 Always look at your data with head, View, or kable There is no substitute for looking at your data and R provides several ways to just browse it. The head function controls the number of rows that are displayed. Note that tail does not work against a database object. In every-day practice you would look at more than the default 6 rows, but here we wrap head around the data frame: sqlpetr::sp_print_df(head(salesorderheader_tibble)) 8.4.3 The summary function in base The base package’s summary function provides basic statistics that serve a unique diagnostic purpose in this context. For example, the following output shows that: * `businessentityid` is a number from 1 to 16,049. In a previous section, we ran the `str` function and saw that there are 16,044 observations in this table. Therefore, the `businessentityid` seems to be sequential from 1:16049, but there are 5 values missing from that sequence. _Exercise for the Reader_: Which 5 values from 1:16049 are missing from `businessentityid` values in the `salesorderheader` table? (_Hint_: In the chapter on SQL Joins, you will learn the functions needed to answer this question.) * The number of NA&#39;s in the `return_date` column is a good first guess as to the number of DVDs rented out or lost as of 2005-09-02 02:35:22. summary(salesorderheader_tibble) ## salesorderid revisionnumber orderdate ## Min. :43659 Min. :8.000 Min. :2011-05-31 00:00:00 ## 1st Qu.:51525 1st Qu.:8.000 1st Qu.:2013-06-20 00:00:00 ## Median :59391 Median :8.000 Median :2013-11-03 00:00:00 ## Mean :59391 Mean :8.001 Mean :2013-08-21 12:05:04 ## 3rd Qu.:67257 3rd Qu.:8.000 3rd Qu.:2014-02-28 00:00:00 ## Max. :75123 Max. :9.000 Max. :2014-06-30 00:00:00 ## ## duedate shipdate status ## Min. :2011-06-12 00:00:00 Min. :2011-06-07 00:00:00 Min. :5 ## 1st Qu.:2013-07-02 00:00:00 1st Qu.:2013-06-27 00:00:00 1st Qu.:5 ## Median :2013-11-15 00:00:00 Median :2013-11-10 00:00:00 Median :5 ## Mean :2013-09-02 12:05:41 Mean :2013-08-28 12:06:06 Mean :5 ## 3rd Qu.:2014-03-13 00:00:00 3rd Qu.:2014-03-08 00:00:00 3rd Qu.:5 ## Max. :2014-07-12 00:00:00 Max. :2014-07-07 00:00:00 Max. :5 ## ## onlineorderflag purchaseordernumber accountnumber customerid ## Mode :logical Length:31465 Length:31465 Min. :11000 ## FALSE:3806 Class :character Class :character 1st Qu.:14432 ## TRUE :27659 Mode :character Mode :character Median :19452 ## Mean :20170 ## 3rd Qu.:25994 ## Max. :30118 ## ## salespersonid territoryid billtoaddressid shiptoaddressid ## Min. :274.0 Min. : 1.000 Min. : 405 Min. : 9 ## 1st Qu.:277.0 1st Qu.: 4.000 1st Qu.:14080 1st Qu.:14063 ## Median :279.0 Median : 6.000 Median :19449 Median :19438 ## Mean :280.6 Mean : 6.091 Mean :18263 Mean :18249 ## 3rd Qu.:284.0 3rd Qu.: 9.000 3rd Qu.:24678 3rd Qu.:24672 ## Max. :290.0 Max. :10.000 Max. :29883 Max. :29883 ## NA&#39;s :27659 ## shipmethodid creditcardid creditcardapprovalcode currencyrateid ## Min. :1.000 Min. : 1 Length:31465 Min. : 2 ## 1st Qu.:1.000 1st Qu.: 4894 Class :character 1st Qu.: 8510 ## Median :1.000 Median : 9720 Mode :character Median :10074 ## Mean :1.484 Mean : 9684 Mean : 9192 ## 3rd Qu.:1.000 3rd Qu.:14511 3rd Qu.:11282 ## Max. :5.000 Max. :19237 Max. :12431 ## NA&#39;s :1131 NA&#39;s :17489 ## subtotal taxamt freight ## Min. : 1.37 Min. : 0.110 Min. : 0.034 ## 1st Qu.: 56.97 1st Qu.: 4.558 1st Qu.: 1.424 ## Median : 782.99 Median : 62.639 Median : 19.575 ## Mean : 3491.07 Mean : 323.756 Mean : 101.174 ## 3rd Qu.: 2366.96 3rd Qu.: 189.598 3rd Qu.: 59.249 ## Max. :163930.39 Max. :17948.519 Max. :5608.912 ## ## totaldue comment rowguid ## Min. : 1.52 Length:31465 Length:31465 ## 1st Qu.: 62.95 Class :character Class :character ## Median : 865.20 Mode :character Mode :character ## Mean : 3916.00 ## 3rd Qu.: 2615.49 ## Max. :187487.83 ## ## modifieddate ## Min. :2011-06-07 00:00:00 ## 1st Qu.:2013-06-27 00:00:00 ## Median :2013-11-10 00:00:00 ## Mean :2013-08-28 12:06:06 ## 3rd Qu.:2014-03-08 00:00:00 ## Max. :2014-07-07 00:00:00 ## So the summary function is surprisingly useful as we first start to look at the table contents. 8.4.4 The glimpse function in the tibble package The tibble package’s glimpse function is a more compact version of str: tibble::glimpse(salesorderheader_tibble) ## Observations: 31,465 ## Variables: 25 ## $ salesorderid &lt;int&gt; 43659, 43660, 43661, 43662, 43663, 43664,… ## $ revisionnumber &lt;int&gt; 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,… ## $ orderdate &lt;dttm&gt; 2011-05-31, 2011-05-31, 2011-05-31, 2011… ## $ duedate &lt;dttm&gt; 2011-06-12, 2011-06-12, 2011-06-12, 2011… ## $ shipdate &lt;dttm&gt; 2011-06-07, 2011-06-07, 2011-06-07, 2011… ## $ status &lt;int&gt; 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,… ## $ onlineorderflag &lt;lgl&gt; FALSE, FALSE, FALSE, FALSE, FALSE, FALSE,… ## $ purchaseordernumber &lt;chr&gt; &quot;PO522145787&quot;, &quot;PO18850127500&quot;, &quot;PO184731… ## $ accountnumber &lt;chr&gt; &quot;10-4020-000676&quot;, &quot;10-4020-000117&quot;, &quot;10-4… ## $ customerid &lt;int&gt; 29825, 29672, 29734, 29994, 29565, 29898,… ## $ salespersonid &lt;int&gt; 279, 279, 282, 282, 276, 280, 283, 276, 2… ## $ territoryid &lt;int&gt; 5, 5, 6, 6, 4, 1, 1, 4, 3, 6, 1, 3, 1, 6,… ## $ billtoaddressid &lt;int&gt; 985, 921, 517, 482, 1073, 876, 849, 1074,… ## $ shiptoaddressid &lt;int&gt; 985, 921, 517, 482, 1073, 876, 849, 1074,… ## $ shipmethodid &lt;int&gt; 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,… ## $ creditcardid &lt;int&gt; 16281, 5618, 1346, 10456, 4322, 806, 1523… ## $ creditcardapprovalcode &lt;chr&gt; &quot;105041Vi84182&quot;, &quot;115213Vi29411&quot;, &quot;85274V… ## $ currencyrateid &lt;int&gt; NA, NA, 4, 4, NA, NA, NA, NA, NA, 4, NA, … ## $ subtotal &lt;dbl&gt; 20565.6206, 1294.2529, 32726.4786, 28832.… ## $ taxamt &lt;dbl&gt; 1971.5149, 124.2483, 3153.7696, 2775.1646… ## $ freight &lt;dbl&gt; 616.0984, 38.8276, 985.5530, 867.2389, 12… ## $ totaldue &lt;dbl&gt; 23153.2339, 1457.3288, 36865.8012, 32474.… ## $ comment &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N… ## $ rowguid &lt;chr&gt; &quot;79b65321-39ca-4115-9cba-8fe0903e12e6&quot;, &quot;… ## $ modifieddate &lt;dttm&gt; 2011-06-07, 2011-06-07, 2011-06-07, 2011… 8.4.5 The skim function in the skimr package The skimr package has several functions that make it easy to examine an unknown data frame and assess what it contains. It is also extensible. library(skimr) ## ## Attaching package: &#39;skimr&#39; ## The following object is masked from &#39;package:knitr&#39;: ## ## kable ## The following object is masked from &#39;package:stats&#39;: ## ## filter skimr::skim(salesorderheader_tibble) ## Skim summary statistics ## n obs: 31465 ## n variables: 25 ## ## ── Variable type:character ─── ## variable missing complete n min max empty n_unique ## accountnumber 0 31465 31465 14 14 0 19119 ## comment 31465 0 31465 NA NA 0 0 ## creditcardapprovalcode 1131 30334 31465 9 15 0 30334 ## purchaseordernumber 27659 3806 31465 10 13 0 3806 ## rowguid 0 31465 31465 36 36 0 31465 ## ## ── Variable type:integer ───── ## variable missing complete n mean sd p0 p25 ## billtoaddressid 0 31465 31465 18263.15 8210.07 405 14080 ## creditcardid 1131 30334 31465 9684.1 5566.3 1 4894.25 ## currencyrateid 17489 13976 31465 9191.5 2945.17 2 8510 ## customerid 0 31465 31465 20170.18 6261.73 11000 14432 ## revisionnumber 0 31465 31465 8 0.031 8 8 ## salesorderid 0 31465 31465 59391 9083.31 43659 51525 ## salespersonid 27659 3806 31465 280.61 4.85 274 277 ## shipmethodid 0 31465 31465 1.48 1.3 1 1 ## shiptoaddressid 0 31465 31465 18249.19 8218.43 9 14063 ## status 0 31465 31465 5 0 5 5 ## territoryid 0 31465 31465 6.09 2.96 1 4 ## p50 p75 p100 hist ## 19449 24678 29883 ▆▁▁▇▇▇▇▇ ## 9719.5 14510.75 19237 ▇▇▇▇▇▇▇▇ ## 10074 11282 12431 ▁▁▁▁▂▃▇▇ ## 19452 25994 30118 ▇▆▅▅▃▃▅▇ ## 8 8 9 ▇▁▁▁▁▁▁▁ ## 59391 67257 75123 ▇▇▇▇▇▇▇▇ ## 279 284 290 ▇▆▅▅▃▁▂▅ ## 1 1 5 ▇▁▁▁▁▁▁▁ ## 19438 24672 29883 ▆▁▁▇▇▇▇▇ ## 5 5 5 ▁▁▁▇▁▁▁▁ ## 6 9 10 ▃▁▅▁▃▂▂▇ ## ## ── Variable type:logical ───── ## variable missing complete n mean count ## onlineorderflag 0 31465 31465 0.88 TRU: 27659, FAL: 3806, NA: 0 ## ## ── Variable type:numeric ───── ## variable missing complete n mean sd p0 p25 p50 ## freight 0 31465 31465 101.17 339.08 0.034 1.42 19.57 ## subtotal 0 31465 31465 3491.07 11093.45 1.37 56.97 782.99 ## taxamt 0 31465 31465 323.76 1085.05 0.11 4.56 62.64 ## totaldue 0 31465 31465 3916 12515.46 1.52 62.95 865.2 ## p75 p100 hist ## 59.25 5608.91 ▇▁▁▁▁▁▁▁ ## 2366.96 163930.39 ▇▁▁▁▁▁▁▁ ## 189.6 17948.52 ▇▁▁▁▁▁▁▁ ## 2615.49 187487.83 ▇▁▁▁▁▁▁▁ ## ## ── Variable type:POSIXct ───── ## variable missing complete n min max median ## duedate 0 31465 31465 2011-06-12 2014-07-12 2013-11-15 ## modifieddate 0 31465 31465 2011-06-07 2014-07-07 2013-11-10 ## orderdate 0 31465 31465 2011-05-31 2014-06-30 2013-11-03 ## shipdate 0 31465 31465 2011-06-07 2014-07-07 2013-11-10 ## n_unique ## 1124 ## 1124 ## 1124 ## 1124 skimr::skim_to_wide(salesorderheader_tibble) #skimr doesn&#39;t like certain kinds of columns ## # A tibble: 25 x 19 ## type variable missing complete n min max empty n_unique mean ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 char… account… 0 31465 31465 14 14 0 19119 &lt;NA&gt; ## 2 char… comment 31465 0 31465 NA NA 0 0 &lt;NA&gt; ## 3 char… creditc… 1131 30334 31465 9 15 0 30334 &lt;NA&gt; ## 4 char… purchas… 27659 3806 31465 10 13 0 3806 &lt;NA&gt; ## 5 char… rowguid 0 31465 31465 36 36 0 31465 &lt;NA&gt; ## 6 inte… billtoa… 0 31465 31465 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; 1826… ## 7 inte… creditc… 1131 30334 31465 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &quot; 96… ## 8 inte… currenc… 17489 13976 31465 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &quot; 91… ## 9 inte… custome… 0 31465 31465 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; 2017… ## 10 inte… revisio… 0 31465 31465 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &quot; … ## # … with 15 more rows, and 9 more variables: sd &lt;chr&gt;, p0 &lt;chr&gt;, ## # p25 &lt;chr&gt;, p50 &lt;chr&gt;, p75 &lt;chr&gt;, p100 &lt;chr&gt;, hist &lt;chr&gt;, count &lt;chr&gt;, ## # median &lt;chr&gt; 8.4.6 Close the connection and shut down adventureworks Where you place the collect function matters. DBI::dbDisconnect(con) sqlpetr::sp_docker_stop(&quot;adventureworks&quot;) 8.5 Additional reading (Wickham 2018) (Baumer 2018) References "],
["chapter-exploring-a-single-table.html", "Chapter 9 Exploring a Single Table (with a Business Perspective) 9.1 Sales Orders and Dollars 9.2 Adventure Works Monthly Sales. 9.3 Monthly Sales Rep Performance Analysis 9.4 Adventure Works Monthly Sales 9.5 Views", " Chapter 9 Exploring a Single Table (with a Business Perspective) This chapter demonstrates how to: Dig into a single Adventureworks table containing sales data Investigate the ddata from a business value perspective This chapter explores one table, illustrating the kind of detective work that’s needed to understand one table. We’ll investigate the salesorderheader table in the sales schema. This code currently uses the new pivot_longer function. You may need to install devtools::install_github(&quot;tidyverse/tidyr&quot;) sp_docker_start(&quot;adventureworks&quot;) Sys.sleep(sleep_default) con &lt;- sp_get_postgres_connection( host = &quot;localhost&quot;, port = 5432, user = &quot;postgres&quot;, password = &quot;postgres&quot;, dbname = &quot;adventureworks&quot;, seconds_to_test = sleep_default, connection_tab = TRUE ) ## &lt;PqConnection&gt; adventureworks@localhost:5432 https://www.rstudio.com/wp-content/uploads/2015/03/rmarkdown-reference.pdf (moved a big chunk about schemas to 050 - setup adventureworks and connect with rstudio) The previous chapter has demonstrated some of the automated techniques for showing what’s in the table using specific functions and packages. The first item we examine is Adventure Works’ sales dollars over the span of data available at different levels of detail. On an annual basis, are sales dollars trending up, down or flat? annual_sales &lt;- tbl(con, in_schema(&quot;sales&quot;, &quot;salesorderheader&quot;)) %&gt;% mutate(year = substr(as.character(orderdate), 1, 4)) %&gt;% group_by(year) %&gt;% summarize( min_orderdate = min(orderdate, na.rm = TRUE), max_orderdate = max(orderdate, na.rm = TRUE), so_dollars = round(sum(subtotal, na.rm = TRUE), 2), avg_so_dollars = round(mean(subtotal, na.rm = TRUE),2), so_cnt = n() ) %&gt;% arrange(year) %&gt;% select(year, min_orderdate, max_orderdate, so_dollars, avg_so_dollars, so_cnt) %&gt;% collect() %&gt;% as.data.frame() annual_sales ## year min_orderdate max_orderdate so_dollars avg_so_dollars so_cnt ## 1 2011 2011-05-31 2011-12-31 12641672.21 7866.63 1607 ## 2 2012 2012-01-01 2012-12-31 33524301.33 8563.04 3915 ## 3 2013 2013-01-01 2013-12-31 43622479.05 3075.90 14182 ## 4 2014 2014-01-01 2014-06-30 20057928.81 1705.46 11761 min_dt &lt;- min(annual_sales$min_orderdate) max_dt &lt;- max(annual_sales$max_orderdate) ggplot(data = annual_sales, aes(x = year, y = so_dollars)) + geom_col(fill = &quot;lightblue&quot;, color = &quot;blue&quot;) + geom_text(aes(label = paste( &quot;avg $ &quot;, avg_so_dollars )), vjust = 1.5) + # orders inside each bar at top xlab(&quot;Year&quot;) + ylab(&quot;Sales $&quot;) + ggtitle(paste(&quot;Adventure Works Sales Dollars by Year\\n &quot;, min_dt, &quot; - &quot;, max_dt)) From the title we see that the available data covers the last seven months of 2011 through the first six months of 2014. From 2011 through 2013, sales are trending up and the growth between years is slowing down. 2014 sales dollars look a little behind 2013. Are sales dollars for 2014 really down or are sales dollars seasonal? To see if the sales dollars are sesonal, we will drill in and look at the monthly sales. Let’s first clean up the y-axis labels and include the number of sales orders and the average sales order dollars associated with the annual dollars? 9.1 Sales Orders and Dollars How are the sales dollars related to the number of orders and what is the average order amount? In the next plot, the title is centered, the y-axis is rescaled, and number of orders and average order dollar amount is added to the top of each bar. The following 3 plots show how odd the sales data is: Look at average dollars per sale sale: ggplot(data = annual_sales, aes(x = year, y = avg_so_dollars)) + geom_text(aes(label = paste( &quot;orders&quot;, so_cnt, &quot; &quot;, &quot;avg $ &quot;, avg_so_dollars )), vjust = 1.5) + # orders inside each bar at top geom_col(fill = &quot;lightblue&quot;, color = &quot;blue&quot;) + xlab(&quot;Year&quot;) + ylab(&quot;Average sale amount&quot;) + scale_y_continuous(labels = dollar) + # clean up y-axis ggtitle(paste(&quot;Average Dollars per Sale\\n&quot;, min_dt, &quot; - &quot;, max_dt)) Look at number of orders per year: ggplot(data = annual_sales, aes(x = year, y = as.numeric(so_cnt))) + geom_col(fill = &quot;lightblue&quot;, color = &quot;blue&quot;) + geom_text(aes(label = paste( &quot;orders&quot;, so_cnt), vjust = 1.5)) + # orders inside each bar at top xlab(&quot;Year&quot;) + ylab(&quot;Total number of orders&quot;) + ggtitle(paste(&quot;Number of Orders per Year\\n&quot;, min_dt, &quot; - &quot;, max_dt)) Look at number of orders by the the average sales per order for the four years: annual_sales %&gt;% arrange(min_orderdate) %&gt;% ggplot(aes(x = avg_so_dollars, y = as.numeric(so_cnt))) + geom_point() + geom_text(aes(label = year, hjust = .5, vjust = 0)) + geom_path() + xlab(&quot;Average dollars per order&quot;) + ylab(&quot;Total number of orders&quot;) + ggtitle(paste(&quot;Number of Orders by Average Order Amount\\n&quot;, min_dt, &quot; - &quot;, max_dt)) The orders in 2012 are about 30% of the 2013 sales, but the 2012 average sales order dollars are 2.75 larger than the 2013 average sales order. Why are the number of orders increasing, but the average order dollar amount dropping? 9.2 Adventure Works Monthly Sales. The next code block drills down from annual sales dollars to monthly sales dollars. monthly_sales &lt;- tbl(con, in_schema(&quot;sales&quot;, &quot;salesorderheader&quot;)) %&gt;% mutate(yr = year(orderdate), mo = month(orderdate)) %&gt;% group_by(yr, mo) %&gt;% summarize( min_orderdate = min(orderdate, na.rm = TRUE), max_orderdate = max(orderdate, na.rm = TRUE), so_dollars = round(sum(subtotal, na.rm = TRUE), 2), avg_so_dollars = round(mean(subtotal, na.rm = TRUE), 2), so_cnt = n() ) %&gt;% arrange(yr, mo) %&gt;% mutate(so_date = as.Date(min_orderdate)) %&gt;% select(yr, mo, so_date, min_orderdate, max_orderdate, so_dollars, avg_so_dollars, so_cnt) %&gt;% collect() %&gt;% as.data.frame() sp_print_df(monthly_sales) min_dt &lt;- min(monthly_sales$min_orderdate) max_dt &lt;- max(monthly_sales$max_orderdate) ggplot(data = monthly_sales, aes(x = mo, y = so_dollars, fill = yr)) + geom_col() + xlab(&quot;Month&quot;) + ylab(&quot;Sales Dollars&quot;) + scale_y_continuous(labels = dollar) + geom_text(aes(label = so_cnt), vjust = 1.5) + # Add nbr of orders theme(plot.title = element_text(hjust = 0.5)) + # Center ggplot title ggtitle(paste(&quot;Sales by Month\\n&quot;, min_dt, &quot; - &quot;, max_dt)) ## Don&#39;t know how to automatically pick scale for object of type integer64. Defaulting to continuous. That is one ugly and useless graph. It is hard to read/interpret * the dollar amounts associated with each color/year in each bar * the number of orders/month for each year, * the x-axis labels and associated months. SQL does not have a factor data type. The ‘mo’ and ‘yr’ INT data types are converted to factors. This changes the yr legend on the right from the default black to blue to the default factor colors. The bar text positioned based on cum_so_dollars and adjusted down 1.5 units. monthly_sales$mo &lt;- as.factor(monthly_sales$mo) monthly_sales$yr &lt;- as.factor(monthly_sales$yr) # changes color scale from continuous blue to distinct colors ggplot(data = monthly_sales, aes(x = mo, y = so_dollars, fill = yr)) + geom_col(position = position_stack(reverse = TRUE)) + # reverse stacked bars 2011 bottom 2014 top guides(fill = guide_legend(reverse = TRUE)) + # reverse bar/legend fill xlab(&quot;Month&quot;) + ylab(&quot;Sales Dollars&quot;) + scale_y_continuous(labels = dollar) + theme(plot.title = element_text(hjust = 0.5)) + # Center ggplot title ggtitle(paste(&quot;Sales by Month by Year\\nWith Number of Sales Orders\\n&quot;, min_dt, &quot; - &quot;, max_dt)) This plot is better. The colors associated with each year and the number of orders by year are much easier to read and the x-axis now reflect the months. Having stacked bars, it is difficult to compare the monthly dollar amounts between the different years. The next plot fixes some of these short comings. Instead of stacking the bars vertically, the next plot shows the bars horizontally in ascending year order for each month and the plot width is increased from the default 7 to 16. Note that the first four months only have three years and that the bars are wider than those with four bars. The overall width of for each month is same. # The next two statements were done in the previous code block # Why do the need to be done again in this code block monthly_sales$mo &lt;- as.factor(monthly_sales$mo) monthly_sales$yr &lt;- as.factor(monthly_sales$yr) min_dt &lt;- min(monthly_sales$min_orderdate) max_dt &lt;- max(monthly_sales$max_orderdate) start_year &lt;- monthly_sales %&gt;% filter(yr == min(yr)) %&gt;% group_by(yr) %&gt;% summarize(so_dollars = sum(so_dollars), so_cnt = sum(so_cnt), n_months = n(), avg_dollars = so_dollars / n_months, avg_cnt = so_cnt / n_months) start_year ## # A tibble: 1 x 6 ## yr so_dollars so_cnt n_months avg_dollars avg_cnt ## &lt;dbl&gt; &lt;dbl&gt; &lt;int64&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 2011 12641672. 1607 8 1580209. 201. normalized_monthly_sales &lt;- monthly_sales %&gt;% mutate(dollars = (100 * so_dollars) / start_year$avg_dollars, number_of_orders = (100 * so_cnt) / start_year$avg_cnt) normalized_monthly_sales &lt;- normalized_monthly_sales %&gt;% mutate(date = as.Date(min_orderdate)) %&gt;% select(date, dollars, number_of_orders) %&gt;% pivot_longer(-date, names_to = &quot;relative_to_2011_average&quot;, values_to = &quot;amount&quot; ) normalized_monthly_sales %&gt;% ggplot(aes(date, amount, color = relative_to_2011_average)) + geom_line() + geom_hline(yintercept = 100) + xlab(&quot;Date&quot;) + ylab(&quot;&quot;) + scale_x_date(date_labels = &quot;%Y-%m&quot;, date_breaks = &quot;6 months&quot;) + ggtitle(paste(&quot;Adventureworks Normalized Monthly Sales\\nNumber of Sales Orders and Dollar Totals\\n&quot;, min_dt, &quot; to &quot;, max_dt)) ggplot(data = monthly_sales, aes(x = mo, y = so_dollars, fill = yr)) + geom_col(position = position_stack(reverse = TRUE)) + # reverse stacked bars 2011 bottom 2014 top guides(fill = guide_legend(reverse = TRUE)) + # reverse bar/legend fill xlab(&quot;Month&quot;) + ylab(&quot;Sales Dollars&quot;) + scale_y_continuous(labels = dollar) + theme(plot.title = element_text(hjust = 0.5)) + # Center ggplot title ggtitle(paste(&quot;Sales by Month by Year\\nWith Number of Sales Orders\\n&quot;, min_dt, &quot; - &quot;, max_dt)) # The next two statements were done in the previous code block # Why do the need to be done again in this code block monthly_sales$mo &lt;- as.factor(monthly_sales$mo) monthly_sales$yr &lt;- as.factor(monthly_sales$yr) # ggplot(data=monthly_sales,aes(x=mo,y=so_dollars,fill=yr)) + ggplot(data = monthly_sales, aes(x = mo, y = so_dollars, fill = yr)) + geom_col(position = &quot;dodge&quot;, color = &quot;black&quot;) + # unstack columns and outline in black xlab(&quot;Month&quot;) + ylab(&quot;Sales Dollars&quot;) + scale_y_continuous(labels = dollar) + # geom_text(aes(label = paste(so_cnt, &quot; # &quot;, avg_so_dollars)), # size = 2.5, # color = &quot;black&quot;, # vjust = 1.5, # position = position_dodge(.9) # ) + theme(plot.title = element_text(hjust = 0.5)) + # Center ggplot title ggtitle(paste(&quot;Sales by Month by Year\\nWith Number of Sales Orders\\nAnd Average SO $ Amount\\n&quot;, min_dt, &quot; - &quot;, max_dt)) The next plot shows the same data as a line graph. # sp_print_df(monthly_sales) ggplot( data = monthly_sales, aes( x = mo, y = so_dollars, color = as.factor(yr), group = as.factor(yr) ) ) + # Removes msg: Each group consists of only one observation. Do you need to adjust the group aesthetic? geom_line() + geom_point() + xlab(&quot;Month&quot;) + ylab(&quot;Sales Dollars&quot;) + scale_y_continuous(labels = dollar) + geom_text(aes(label = paste(so_cnt, &quot; &quot;, avg_so_dollars)), size = 2.5, color = &quot;black&quot;, vjust = 1.5, position = position_dodge(.5) ) + # orders =&gt; avg so $ amt theme(plot.title = element_text(hjust = .5)) + # Center ggplot title ggtitle(paste(&quot;Sales by Month by Year\\nWith Number of Sales Orders\\nAnd Average SO $ Amount\\n&quot;, min_dt, &quot; - &quot;, max_dt)) Figure 9.1: SO, SO Dollars, and Average SO Dollars A couple of things jump out from the graph. 2012 and 2013 have similar sales dollar plots and peak every three months. This may reflect the closing as many sales orders as possible to make the quarterly sales numbers look good. 2011 has more variation than 2012 and 2013 and peaks every two months. 2014 has the most variation and also peaks every two months. Both the number of sales, 939, and the average sales order size, $52.19 plumet in June 2014. # sp_print_df(monthly_sales) ggplot( data = monthly_sales, aes( x = so_date, y = so_dollars) # , color = as.factor(yr), # group = as.factor(yr) # ) ) + geom_line() + geom_smooth(se = FALSE) + xlab(&quot;Month&quot;) + ylab(&quot;Sales Dollars&quot;) + scale_y_continuous(labels = dollar) + scale_x_date(date_breaks = &quot;year&quot;, date_labels = &quot;%Y&quot;, date_minor_breaks = &quot;3 months&quot;) + theme(plot.title = element_text(hjust = .5)) + # Center ggplot title ggtitle(paste(&quot;Sales by Month by Year\\nWith Number of Sales Orders\\nAnd Average SO $ Amount\\n&quot;, min_dt, &quot; - &quot;, max_dt)) ## `geom_smooth()` using method = &#39;loess&#39; and formula &#39;y ~ x&#39; Figure 9.2: SO, SO Dollars, and Average SO Dollars-b A couple of things jump out from the graph. 2012 and 2013 have similar sales dollar plots and peak every three months. This may reflect the closing as many sales orders as possible to make the quarterly sales numbers look good. 2011 has more variation than 2012 and 2013 and peaks every two months. 2014 has the most variation and also peaks every two months. Both the number of sales, 939, and the average sales order size, $52.19 plumet in June 2014. # so_cnt_2011 &lt;- monthly_sales %&gt;% # filter(yr == 2011) %&gt;% # select(so_cnt, min_orderdate, mo) # so_cnt_2012_5_12 &lt;- monthly_sales %&gt;% # filter(yr == 2012 &amp; mo %in% c(5, 6, 7, 8, 9, 10, 11, 12)) %&gt;% # select(so_cnt, min_orderdate, mo) # so_cnt_2012 &lt;- monthly_sales %&gt;% # filter(yr == 2012) %&gt;% # select(so_cnt, min_orderdate, mo) # so_cnt_2013 &lt;- monthly_sales %&gt;% # filter(yr == 2013) %&gt;% # select(so_cnt, min_orderdate, mo) # so_cnt_2013_1_6 &lt;- monthly_sales %&gt;% # filter(yr == 2013 &amp; mo %in% c(1, 2, 3, 4, 5, 6)) %&gt;% # select(so_cnt, min_oderdate, mo) # so_cnt_2014 &lt;- monthly_sales %&gt;% # filter(yr == 2014) %&gt;% # select(so_cnt, min_oderdate, mo) # STOPPED HERE. need to join the data frames and plot the lags. # so_cnt_2012_2011 &lt;- so_cnt_2012_5_12 / so_cnt_2011 # so_cnt_2013_2012 &lt;- so_cnt_2013 / so_cnt_2012 # so_cnt_2014_2013 &lt;- so_cnt_2014 / so_cnt_2013_1_6 # # cat(&quot;2012 vs 2011 sales order ratios for May - December # &quot;, unlist(so_cnt_2012_2011)) # # cat(&quot;2013 vs 2012 sales order ratios # &quot;, unlist(so_cnt_2013_2012)) # # cat(&quot;2014 vs 2013 sales order ratios for January - June # &quot;, unlist(so_cnt_2014_2013)) Comparing the number of sales orders year over year by month for 2013 and 2012, one can see that the 2013 sales are between 1.2 and 1.8 times larger than the corresponding month of 2012 from January through June. In July the 2013 sales are 5 to 6 times the 2012 sales orders. This trend continues into 2014 before the number of sales plumet to just 1.3 time in June. What happened in July 2013? mo_onl_pct &lt;- dbGetQuery( con, &quot; SELECT * ,round(orders/mo_orders * 100.0,2) mo_pct ,round(sales_dollars/mo_sales * 100.0,2) mo_dlr_pct FROM (SELECT EXTRACT(MONTH FROM orderdate) mo, EXTRACT(YEAR FROM orderdate) yr , min(orderdate)::DATE min_orderdate, max(orderdate)::DATE max_orderdate , round(sum(subtotal), 2) sales_dollars , round(sum(sum(subtotal)) over (partition by EXTRACT(MONTH FROM orderdate),EXTRACT(YEAR FROM orderdate) order by EXTRACT(YEAR FROM orderdate)),2) mo_sales , count(*) * 1.0 orders , sum(count(*)) over (partition by EXTRACT(MONTH FROM orderdate),EXTRACT(YEAR FROM orderdate) order by EXTRACT(YEAR FROM orderdate)) mo_orders , case when sh.onlineorderflag then &#39;online&#39; else &#39;sales rep&#39; end sales_type FROM sales.salesorderheader sh GROUP BY EXTRACT(MONTH FROM orderdate), EXTRACT(YEAR FROM orderdate), case when sh.onlineorderflag then &#39;online&#39; else &#39;sales rep&#39; end ) as src ORDER BY mo, yr, sales_type &quot; ) sp_print_df(mo_onl_pct) min_dt &lt;- min(monthly_sales$min_orderdate) max_dt &lt;- max(monthly_sales$max_orderdate) mo_onl_pct$mo &lt;- as.factor(mo_onl_pct$mo) mo_onl_pct$yr &lt;- as.factor(mo_onl_pct$yr) mo_onl_pct$sales_type &lt;- as.factor(mo_onl_pct$sales_type) mo_2011 &lt;- mo_onl_pct %&gt;% filter(yr == 2011) mo_2012 &lt;- mo_onl_pct %&gt;% filter(yr == 2012) mo_2013 &lt;- mo_onl_pct %&gt;% filter(yr == 2013) mo_2014 &lt;- mo_onl_pct %&gt;% filter(yr == 2014) ggplot(data = NULL) + # data=mo_2011 first results in the x axis months out of order. geom_line(data = mo_2012, aes(x = mo, y = mo_pct, color = yr, group = sales_type)) + geom_line(data = mo_2011, aes(x = mo, y = mo_pct, color = yr, group = sales_type)) + geom_line(data = mo_2013, aes(x = mo, y = mo_pct, color = yr, group = sales_type)) + geom_line(data = mo_2014, aes(x = mo, y = mo_pct, color = yr, group = sales_type)) + geom_point(data = mo_2011, aes(x = mo, y = mo_pct, color = sales_type)) + geom_point(data = mo_2012, aes(x = mo, y = mo_pct, color = sales_type)) + geom_point(data = mo_2013, aes(x = mo, y = mo_pct, color = sales_type)) + geom_point(data = mo_2014, aes(x = mo, y = mo_pct, color = sales_type)) + geom_text( data = mo_2011, aes(x = mo, y = mo_pct, label = paste(orders, &quot;:$&quot;, sales_dollars, &quot;:&quot;, mo_dlr_pct, &quot;%&quot;)), position = position_dodge(.3), size = 2.5, hjust = 0 ) + geom_text( data = mo_2012, aes(x = mo, y = mo_pct, label = paste(orders, &quot;:$&quot;, sales_dollars, &quot;:&quot;, mo_dlr_pct, &quot;%&quot;)), position = position_dodge(.3), size = 2.5, hjust = 0 ) + geom_text( data = mo_2013, aes(x = mo, y = mo_pct, label = paste(orders, &quot;:$&quot;, sales_dollars, &quot;:&quot;, mo_dlr_pct, &quot;%&quot;)), position = position_dodge(.3), size = 2.5, hjust = 0 ) + geom_text( data = mo_2014, aes(x = mo, y = mo_pct, label = paste(orders, &quot;:$&quot;, sales_dollars, &quot;:&quot;, mo_dlr_pct, &quot;%&quot;)), color = &quot;blue&quot;, position = position_dodge(.3), size = 2.5, hjust = 0, vjust = 1.5 ) + xlab(&quot;Month&quot;) + ylab(&quot;% Online Sales\\nvs\\n%Rep Sales&quot;) + theme(plot.title = element_text(hjust = .50)) + ggtitle(paste( &quot;Sales by Month\\n&quot;, &quot;Online Orders Versus Rep Orders\\n&quot;, min_dt, &quot; - &quot;, max_dt, &quot; &quot;, &quot;Each Point shows Number of Orders: $ Amount: % of Total $ For the Month&quot; )) The sales rep orders brought in over half the monthly sales dollars for every month except three, February, Arpil, and June of 2014. The monthly sales rep orders for those months are 3, 2, and 0 respectively. 9.3 Monthly Sales Rep Performance Analysis mo_so_sreps &lt;- dbGetQuery( con, &quot; SELECT * ,round(orders/mo_orders * 100.0,2) mo_pct ,round(sales_dollars/mo_sales * 100.0,2) mo_dlr_pct FROM (SELECT EXTRACT(MONTH FROM orderdate) mo, EXTRACT(YEAR FROM orderdate) yr , min(orderdate)::DATE min_orderdate, max(orderdate)::DATE max_orderdate , round(sum(subtotal), 2) sales_dollars , round(sum(sum(subtotal)) over (partition by EXTRACT(MONTH FROM orderdate),EXTRACT(YEAR FROM orderdate) order by EXTRACT(YEAR FROM orderdate)),2) mo_sales , count(*) * 1.0 orders , sum(count(*)) over (partition by EXTRACT(MONTH FROM orderdate),EXTRACT(YEAR FROM orderdate) order by EXTRACT(YEAR FROM orderdate)) mo_orders , case when sh.onlineorderflag then &#39;online&#39; else &#39;sales rep&#39; end sales_type FROM sales.salesorderheader sh INNER JOIN sales.salesorderdetail sd ON sh.salesorderid = sd.salesorderid WHERE not sh.onlineorderflag GROUP BY EXTRACT(MONTH FROM orderdate), EXTRACT(YEAR FROM orderdate), case when sh.onlineorderflag then &#39;online&#39; else &#39;sales rep&#39; end ) as src ORDER BY mo, yr, sales_type &quot; ) sp_print_df(mo_so_sreps) monthly_sales_online &lt;- dbGetQuery( con, &quot; SELECT EXTRACT(MONTH FROM orderdate) mo, EXTRACT(YEAR FROM orderdate) yr , min(orderdate)::DATE min_orderdate, max(orderdate)::DATE max_orderdate , so.category , round(sum(subtotal), 2) sales_dollars , count(*) * 1.0 orders FROM sales.salesorderheader sh JOIN sales.salesorderdetail sd ON SH.salesorderid = sd.salesorderid JOIN sales.specialoffer so ON Sd.specialofferid = so.specialofferid GROUP BY EXTRACT(MONTH FROM orderdate), EXTRACT(YEAR FROM orderdate), so.category ORDER BY mo, yr &quot; ) sp_print_df(monthly_sales_online) Figure 9.3: caption goes here ggplot(data = monthly_sales_online, aes(x = factor(mo), y = sales_dollars, fill = factor(yr))) + geom_col(position = &quot;dodge&quot;, color = &quot;black&quot;) + # unstack columns and outline in black xlab(&quot;Month&quot;) + ylab(&quot;Sales Dollars&quot;) + scale_y_continuous(labels = dollar) + geom_text(aes(label = category), size = 2.5 # ,color = &#39;black&#39; , vjust = 1.5, position = position_dodge(.9) ) + # orders =&gt; avg so $ amt theme(plot.title = element_text(hjust = .50)) + # Center ggplot title ggtitle(paste(&quot;Sales by Month\\nBy Online Flag&quot;)) Figure 9.3: caption goes here monthly_sales_onl_pct &lt;- dbGetQuery( con, &quot; select EXTRACT(MONTH FROM orderdate) mo ,EXTRACT(YEAR FROM orderdate) yr ,sum(ORDERQTY) ,sum(case when salespersonid is null and onlineorderflag then 1 else 0 end) onl ,sum(case when salespersonid is not null and not onlineorderflag then 1 else 0 end) sp ,round(sum(case when onlineorderflag then 1 else 0 end )*1.0/count(*) * 100.0,2) onl_pct ,round(sum(case when not onlineorderflag then 1 else 0 end )*1.0/count(*) * 100.0,2) sp_pct ,onlineorderflag ,count(*) FROM sales.salesorderheader sh INNER JOIN sales.salesorderdetail sd ON sh.salesorderid = sd.salesorderid INNER JOIN production.product p ON sd.productid = p.productid INNER JOIN sales.specialoffer so ON sd.specialofferid = so.specialofferid LEFT OUTER JOIN sales.specialofferproduct sop ON sd.specialofferid = sop.specialofferid and sd.productid = sop.productid WHERE sop.productid is not null group by EXTRACT(MONTH FROM orderdate) ,EXTRACT(YEAR FROM orderdate) ,onlineorderflag order by mo,yr &quot; ) sp_print_df(monthly_sales_onl_pct) mo_onl_pct &lt;- dbGetQuery( con, &quot; SELECT * ,round(orders/mo_orders * 100.0,2) mo_pct ,round(sales_dollars/mo_sales * 100.0,2) mo_dlr_pct FROM (SELECT EXTRACT(MONTH FROM orderdate) mo, EXTRACT(YEAR FROM orderdate) yr , min(orderdate)::DATE min_orderdate, max(orderdate)::DATE max_orderdate , round(sum(subtotal), 2) sales_dollars , round(sum(sum(subtotal)) over (partition by EXTRACT(MONTH FROM orderdate),EXTRACT(YEAR FROM orderdate) order by EXTRACT(YEAR FROM orderdate)),2) mo_sales , count(*) * 1.0 orders , sum(count(*)) over (partition by EXTRACT(MONTH FROM orderdate),EXTRACT(YEAR FROM orderdate) order by EXTRACT(YEAR FROM orderdate)) mo_orders , case when sh.onlineorderflag then &#39;online&#39; else &#39;sales rep&#39; end sales_type FROM sales.salesorderheader sh GROUP BY EXTRACT(MONTH FROM orderdate), EXTRACT(YEAR FROM orderdate), case when sh.onlineorderflag then &#39;online&#39; else &#39;sales rep&#39; end ) as src ORDER BY mo, yr, sales_type &quot; ) sp_print_df(mo_onl_pct) min_dt &lt;- min(monthly_sales$min_orderdate) max_dt &lt;- max(monthly_sales$max_orderdate) mo_onl_pct$mo &lt;- as.factor(mo_onl_pct$mo) mo_onl_pct$yr &lt;- as.factor(mo_onl_pct$yr) mo_onl_pct$sales_type &lt;- as.factor(mo_onl_pct$sales_type) mo_2011 &lt;- mo_onl_pct %&gt;% filter(yr == 2011) mo_2012 &lt;- mo_onl_pct %&gt;% filter(yr == 2012) mo_2013 &lt;- mo_onl_pct %&gt;% filter(yr == 2013) mo_2014 &lt;- mo_onl_pct %&gt;% filter(yr == 2014) ggplot(data = NULL) + # data=mo_2011 first results in the x axis months out of order. geom_line(data = mo_2012, aes(x = mo, y = mo_pct, color = yr, group = sales_type)) + geom_line(data = mo_2011, aes(x = mo, y = mo_pct, color = yr, group = sales_type)) + geom_line(data = mo_2013, aes(x = mo, y = mo_pct, color = yr, group = sales_type)) + geom_line(data = mo_2014, aes(x = mo, y = mo_pct, color = yr, group = sales_type)) + geom_point(data = mo_2011, aes(x = mo, y = mo_pct, color = sales_type)) + geom_point(data = mo_2012, aes(x = mo, y = mo_pct, color = sales_type)) + geom_point(data = mo_2013, aes(x = mo, y = mo_pct, color = sales_type)) + geom_point(data = mo_2014, aes(x = mo, y = mo_pct, color = sales_type)) + geom_text( data = mo_2011, aes(x = mo, y = mo_pct, label = paste(orders, &quot;:$&quot;, sales_dollars, &quot;:&quot;, mo_dlr_pct, &quot;%&quot;)), position = position_dodge(.3), size = 2.25, hjust = 1.0 ) + geom_text( data = mo_2012, aes(x = mo, y = mo_pct, label = paste(orders, &quot;:$&quot;, sales_dollars, &quot;:&quot;, mo_dlr_pct, &quot;%&quot;)), position = position_dodge(.3), size = 2.25, hjust = 1.0 ) + geom_text( data = mo_2013, aes(x = mo, y = mo_pct, label = paste(orders, &quot;:$&quot;, sales_dollars, &quot;:&quot;, mo_dlr_pct, &quot;%&quot;)), position = position_dodge(.3), size = 2.25, hjust = 1.0 ) + geom_text( data = mo_2014, aes(x = mo, y = mo_pct, label = paste(orders, &quot;:$&quot;, sales_dollars, &quot;:&quot;, mo_dlr_pct, &quot;%&quot;)), color = &quot;blue&quot;, position = position_dodge(.3), size = 2.25, hjust = 1.0, vjust = 1.5 ) + xlab(&quot;Month&quot;) + ylab(&quot;% Online Sales\\nvs\\n%Rep Sales&quot;) + theme(plot.title = element_text(hjust = .50)) + ggtitle(paste( &quot;Sales by Month\\n&quot;, &quot;Online Orders Versus Rep Orders\\n&quot;, min_dt, &quot; - &quot;, max_dt, &quot; &quot;, &quot;Each Point shows Number of Orders: $ Amount: % of Total $ For the Month&quot; )) This plot is much easier to read, but the sales orders =&gt; avg_s From the tidyR overview, https://tidyr.tidyverse.org/: Tidy data is data where: Each variable is in a column. Each observation is a row. Each value is a cell. The gather command throws the following warning: attributes are not identical across measure variables; they will be dropped 9.4 Adventure Works Monthly Sales Instead of annual sales, we drill into the monthly sales to see how sales dollars are generated over the year. We also clean up our next graph a bit. The y-axis is rescaled to make it easier to read and center the title. monthly_sales &lt;- dbGetQuery( con, &quot;SELECT to_char(orderdate,&#39;YYMM&#39;) yymm ,min(orderdate)::date min_orderdate ,max(orderdate)::date max_orderdate ,count(*) nbr_of_orders ,round(sum(subtotal),2) subtotal FROM sales.salesorderheader sh GROUP BY to_char(orderdate,&#39;YYMM&#39;) ORDER BY to_char(orderdate,&#39;YYMM&#39;) &quot; ) monthly_sales ## yymm min_orderdate max_orderdate nbr_of_orders subtotal ## 1 1105 2011-05-31 2011-05-31 43 503805.92 ## 2 1106 2011-06-01 2011-06-30 141 458910.82 ## 3 1107 2011-07-01 2011-07-31 231 2044600.00 ## 4 1108 2011-08-01 2011-08-31 250 2495816.73 ## 5 1109 2011-09-01 2011-09-30 157 502073.85 ## 6 1110 2011-10-01 2011-10-31 327 4588761.82 ## 7 1111 2011-11-01 2011-11-30 230 737839.82 ## 8 1112 2011-12-01 2011-12-31 228 1309863.25 ## 9 1201 2012-01-01 2012-01-31 336 3970627.28 ## 10 1202 2012-02-01 2012-02-29 219 1475426.91 ## 11 1203 2012-03-01 2012-03-31 304 2975748.24 ## 12 1204 2012-04-01 2012-04-30 269 1634600.80 ## 13 1205 2012-05-01 2012-05-31 293 3074602.81 ## 14 1206 2012-06-01 2012-06-30 390 4099354.36 ## 15 1207 2012-07-01 2012-07-31 385 3417953.87 ## 16 1208 2012-08-01 2012-08-31 285 2175637.22 ## 17 1209 2012-09-01 2012-09-30 352 3454151.94 ## 18 1210 2012-10-01 2012-10-31 321 2544091.11 ## 19 1211 2012-11-01 2012-11-30 383 1872701.98 ## 20 1212 2012-12-01 2012-12-31 378 2829404.82 ## 21 1301 2013-01-01 2013-01-31 400 2087872.46 ## 22 1302 2013-02-01 2013-02-28 325 2316922.15 ## 23 1303 2013-03-01 2013-03-31 441 3412068.97 ## 24 1304 2013-04-01 2013-04-30 428 2532265.91 ## 25 1305 2013-05-01 2013-05-31 428 3245623.76 ## 26 1306 2013-06-01 2013-06-30 719 5081069.13 ## 27 1307 2013-07-01 2013-07-31 1740 4896353.74 ## 28 1308 2013-08-01 2013-08-31 1789 3333964.07 ## 29 1309 2013-09-01 2013-09-30 1791 4532908.71 ## 30 1310 2013-10-01 2013-10-31 1968 4795813.29 ## 31 1311 2013-11-01 2013-11-30 2103 3312130.25 ## 32 1312 2013-12-01 2013-12-31 2050 4075486.63 ## 33 1401 2014-01-01 2014-01-31 2141 4289817.95 ## 34 1402 2014-02-01 2014-02-28 1756 1337725.04 ## 35 1403 2014-03-01 2014-03-31 2399 7217531.09 ## 36 1404 2014-04-01 2014-04-30 2115 1797173.92 ## 37 1405 2014-05-01 2014-05-31 2411 5366674.97 ## 38 1406 2014-06-01 2014-06-30 939 49005.84 translate previous query with dplyr monthly_sales &lt;- tbl(con, in_schema(&quot;sales&quot;, &quot;salesorderheader&quot;)) %&gt;% mutate(order_date = substr(as.character(orderdate), 1, 7)) %&gt;% group_by(order_date) %&gt;% summarize( min_orderdate = min(orderdate), max_orderdate = max(orderdate), nbr_of_orders = n(), so_dollars = round(sum(subtotal, na.rm = TRUE), 2) ) %&gt;% arrange(order_date) %&gt;% select(order_date, min_orderdate, max_orderdate, nbr_of_orders, so_dollars) %&gt;% collect() %&gt;% as.data.frame() ## Warning: Missing values are always removed in SQL. ## Use `MIN(x, na.rm = TRUE)` to silence this warning ## This warning is displayed only once per session. ## Warning: Missing values are always removed in SQL. ## Use `MAX(x, na.rm = TRUE)` to silence this warning ## This warning is displayed only once per session. monthly_sales ## order_date min_orderdate max_orderdate nbr_of_orders so_dollars ## 1 2011-05 2011-05-31 2011-05-31 43 503805.92 ## 2 2011-06 2011-06-01 2011-06-30 141 458910.82 ## 3 2011-07 2011-07-01 2011-07-31 231 2044600.00 ## 4 2011-08 2011-08-01 2011-08-31 250 2495816.73 ## 5 2011-09 2011-09-01 2011-09-30 157 502073.85 ## 6 2011-10 2011-10-01 2011-10-31 327 4588761.82 ## 7 2011-11 2011-11-01 2011-11-30 230 737839.82 ## 8 2011-12 2011-12-01 2011-12-31 228 1309863.25 ## 9 2012-01 2012-01-01 2012-01-31 336 3970627.28 ## 10 2012-02 2012-02-01 2012-02-29 219 1475426.91 ## 11 2012-03 2012-03-01 2012-03-31 304 2975748.24 ## 12 2012-04 2012-04-01 2012-04-30 269 1634600.80 ## 13 2012-05 2012-05-01 2012-05-31 293 3074602.81 ## 14 2012-06 2012-06-01 2012-06-30 390 4099354.36 ## 15 2012-07 2012-07-01 2012-07-31 385 3417953.87 ## 16 2012-08 2012-08-01 2012-08-31 285 2175637.22 ## 17 2012-09 2012-09-01 2012-09-30 352 3454151.94 ## 18 2012-10 2012-10-01 2012-10-31 321 2544091.11 ## 19 2012-11 2012-11-01 2012-11-30 383 1872701.98 ## 20 2012-12 2012-12-01 2012-12-31 378 2829404.82 ## 21 2013-01 2013-01-01 2013-01-31 400 2087872.46 ## 22 2013-02 2013-02-01 2013-02-28 325 2316922.15 ## 23 2013-03 2013-03-01 2013-03-31 441 3412068.97 ## 24 2013-04 2013-04-01 2013-04-30 428 2532265.91 ## 25 2013-05 2013-05-01 2013-05-31 428 3245623.76 ## 26 2013-06 2013-06-01 2013-06-30 719 5081069.13 ## 27 2013-07 2013-07-01 2013-07-31 1740 4896353.74 ## 28 2013-08 2013-08-01 2013-08-31 1789 3333964.07 ## 29 2013-09 2013-09-01 2013-09-30 1791 4532908.71 ## 30 2013-10 2013-10-01 2013-10-31 1968 4795813.29 ## 31 2013-11 2013-11-01 2013-11-30 2103 3312130.25 ## 32 2013-12 2013-12-01 2013-12-31 2050 4075486.63 ## 33 2014-01 2014-01-01 2014-01-31 2141 4289817.95 ## 34 2014-02 2014-02-01 2014-02-28 1756 1337725.04 ## 35 2014-03 2014-03-01 2014-03-31 2399 7217531.09 ## 36 2014-04 2014-04-01 2014-04-30 2115 1797173.92 ## 37 2014-05 2014-05-01 2014-05-31 2411 5366674.97 ## 38 2014-06 2014-06-01 2014-06-30 939 49005.84 sp_print_df(monthly_sales) ggplot(data = monthly_sales, aes(x = min_orderdate, y = so_dollars)) + geom_line() + # fill = &#39;green&#39;, color = &#39;blue&#39;) + xlab(&quot;Year&quot;) + ylab(&quot;Sales&quot;) + scale_y_continuous(labels = dollar) + # see scales library ggtitle(paste(&quot;Sales by Month\\n&quot;, min_dt, &quot; - &quot;, max_dt)) + theme(plot.title = element_text(hjust = 0.5)) + # Center ggplot title theme(axis.text.x = element_text(angle = 60, hjust = 1)) 9.5 Views 9.5.1 Explore the vsalelsperson and vsalespersonsalesbyfiscalyearsdata views The following trick goes later in the book, where it’s used to prove the finding that to make sense of othe data you need to cat(unlist(dbGetQuery(con, &quot;select pg_get_viewdef(&#39;sales.vsalesperson&#39;, true)&quot;))) ## SELECT s.businessentityid, ## p.title, ## p.firstname, ## p.middlename, ## p.lastname, ## p.suffix, ## e.jobtitle, ## pp.phonenumber, ## pnt.name AS phonenumbertype, ## ea.emailaddress, ## p.emailpromotion, ## a.addressline1, ## a.addressline2, ## a.city, ## sp.name AS stateprovincename, ## a.postalcode, ## cr.name AS countryregionname, ## st.name AS territoryname, ## st.&quot;group&quot; AS territorygroup, ## s.salesquota, ## s.salesytd, ## s.saleslastyear ## FROM sales.salesperson s ## JOIN humanresources.employee e ON e.businessentityid = s.businessentityid ## JOIN person.person p ON p.businessentityid = s.businessentityid ## JOIN person.businessentityaddress bea ON bea.businessentityid = s.businessentityid ## JOIN person.address a ON a.addressid = bea.addressid ## JOIN person.stateprovince sp ON sp.stateprovinceid = a.stateprovinceid ## JOIN person.countryregion cr ON cr.countryregioncode::text = sp.countryregioncode::text ## LEFT JOIN sales.salesterritory st ON st.territoryid = s.territoryid ## LEFT JOIN person.emailaddress ea ON ea.businessentityid = p.businessentityid ## LEFT JOIN person.personphone pp ON pp.businessentityid = p.businessentityid ## LEFT JOIN person.phonenumbertype pnt ON pnt.phonenumbertypeid = pp.phonenumbertypeid; ## pg_get_viewdef ## 1 SELECT granular.salespersonid,\\n granular.fullname,\\n granular.jobtitle,\\n granular.salesterritory,\\n sum(granular.subtotal) AS salestotal,\\n granular.fiscalyear\\n FROM ( SELECT soh.salespersonid,\\n ((p.firstname::text || &#39; &#39;::text) || COALESCE(p.middlename::text || &#39; &#39;::text, &#39;&#39;::text)) || p.lastname::text AS fullname,\\n e.jobtitle,\\n st.name AS salesterritory,\\n soh.subtotal,\\n date_part(&#39;year&#39;::text, soh.orderdate + &#39;6 mons&#39;::interval) AS fiscalyear\\n FROM sales.salesperson sp\\n JOIN sales.salesorderheader soh ON sp.businessentityid = soh.salespersonid\\n JOIN sales.salesterritory st ON sp.territoryid = st.territoryid\\n JOIN humanresources.employee e ON soh.salespersonid = e.businessentityid\\n JOIN person.person p ON p.businessentityid = sp.businessentityid) granular\\n GROUP BY granular.salespersonid, granular.fullname, granular.jobtitle, granular.salesterritory, granular.fiscalyear; "],
["close-and-clean-up.html", "Chapter 10 Close and clean up", " Chapter 10 Close and clean up dbDisconnect(con) sp_docker_stop(&quot;adventureworks&quot;) "],
["chapter-lazy-evaluation-queries.html", "Chapter 11 Lazy Evaluation and Lazy Queries 11.1 Setup 11.2 R is lazy and comes with guardrails 11.3 Lazy evaluation and lazy queries 11.3.3 Source: lazy query [?? x 4] 11.3.3 Database: postgres 11.3.3 [postgres@localhost:5432/adventureworks] 11.4 Other resources", " Chapter 11 Lazy Evaluation and Lazy Queries This chapter: Reviews lazy loading, lazy evaluation and lazy query execution Demonstrates how dplyr code gets executed (and how R determines what is translated to SQL and what is processed locally by R) Offers some further resources on lazy loading, evaluation, execution, etc. 11.1 Setup The following packages are used in this chapter: library(tidyverse) library(DBI) library(RPostgres) library(dbplyr) require(knitr) library(bookdown) library(sqlpetr) Start your adventureworks container: sqlpetr::sp_docker_start(&quot;adventureworks&quot;) Connect to the database: con &lt;- sqlpetr::sp_get_postgres_connection( user = Sys.getenv(&quot;DEFAULT_POSTGRES_USER_NAME&quot;), password = Sys.getenv(&quot;DEFAULT_POSTGRES_PASSWORD&quot;), dbname = &quot;adventureworks&quot;, port = 5432, seconds_to_test = 20, connection_tab = TRUE ) 11.2 R is lazy and comes with guardrails By design, R is both a language and an interactive development environment (IDE). As a language, R tries to be as efficient as possible. As an IDE, R creates some guardrails to make it easy and safe to work with your data. For example getOption(&quot;max.print&quot;) prevents R from printing more rows of data than you want to handle in an interactive session, with a default of 99999 lines, which may or may not suit you. On the other hand SQL is a “Structured Query Language (SQL): a standard computer language for relational database management and data manipulation.”.1 SQL has various database-specific Interactive Development Environments (IDEs), such as pgAdmin for PostgreSQL. Roger Peng explains in R Programming for Data Science that: R has maintained the original S philosophy, which is that it provides a language that is both useful for interactive work, but contains a powerful programming language for developing new tools. This is complicated when R interacts with SQL. In a vignette for dbplyr Hadley Wickham explains: The most important difference between ordinary data frames and remote database queries is that your R code is translated into SQL and executed in the database on the remote server, not in R on your local machine. When working with databases, dplyr tries to be as lazy as possible: It never pulls data into R unless you explicitly ask for it. It delays doing any work until the last possible moment: it collects together everything you want to do and then sends it to the database in one step. Exactly when, which, and how much data is returned from the dbms is the topic of this chapter. Exactly how the data is represented in the dbms and then translated to a data frame is discussed in the DBI specification. Eventually, if you are interacting with a dbms from R you will need to understand the differences between lazy loading, lazy evaluation, and lazy queries. 11.2.1 Lazy loading “Lazy loading is always used for code in packages but is optional (selected by the package maintainer) for datasets in packages.”2 Lazy loading means that the code for a particular function doesn’t actually get loaded into memory until the last minute – when it’s actually being used. 11.2.2 Lazy evaluation Essentially “Lazy evaluation is a programming strategy that allows a symbol to be evaluated only when needed.”3 That means that lazy evaluation is about symbols such as function arguments4 when they are evaluated. Tidy evaluation complicates lazy evaluation.5 11.2.3 Lazy Queries “When you create a &quot;lazy&quot; query, you’re creating a pointer to a set of conditions on the database, but the query isn’t actually run and the data isn’t actually loaded until you call &quot;next&quot; or some similar method to actually fetch the data and load it into an object.”6 11.3 Lazy evaluation and lazy queries When does a lazy query trigger data retrieval? It depends on a lot of factors, as we explore below: 11.3.1 Create a black box query for experimentation Define the three tables discussed in the previous chapter to build a black box query: sales_person_table &lt;- tbl(con, in_schema(&quot;sales&quot;, &quot;salesperson&quot;)) %&gt;% select(-rowguid) %&gt;% rename(sale_info_updated = modifieddate) employee_table &lt;- tbl(con, in_schema(&quot;humanresources&quot;, &quot;employee&quot;)) %&gt;% select(-modifieddate, -rowguid) person_table &lt;- tbl(con, in_schema(&quot;person&quot;, &quot;person&quot;)) %&gt;% select(-modifieddate, -rowguid) Here is a typical string of dplyr verbs strung together with the magrittr %&gt;% pipe command that will be used to tease out the several different behaviors that a lazy query has when passed to different R functions. This query joins three connection objects into a query we’ll call Q: Q &lt;- sales_person_table %&gt;% dplyr::left_join(employee_table, by = c(&quot;businessentityid&quot; = &quot;businessentityid&quot;)) %&gt;% dplyr::left_join(person_table , by = c(&quot;businessentityid&quot; = &quot;businessentityid&quot;)) %&gt;% dplyr::select(firstname, lastname, salesytd, birthdate) The str function gives us a hint at how R is collecting information that can be used to construct and execute a query later on: str(Q, max.level = 2) ## List of 2 ## $ src:List of 2 ## ..$ con :Formal class &#39;PqConnection&#39; [package &quot;RPostgres&quot;] with 3 slots ## ..$ disco: NULL ## ..- attr(*, &quot;class&quot;)= chr [1:4] &quot;src_PqConnection&quot; &quot;src_dbi&quot; &quot;src_sql&quot; &quot;src&quot; ## $ ops:List of 4 ## ..$ name: chr &quot;select&quot; ## ..$ x :List of 4 ## .. ..- attr(*, &quot;class&quot;)= chr [1:3] &quot;op_join&quot; &quot;op_double&quot; &quot;op&quot; ## ..$ dots: list() ## ..$ args:List of 1 ## ..- attr(*, &quot;class&quot;)= chr [1:3] &quot;op_select&quot; &quot;op_single&quot; &quot;op&quot; ## - attr(*, &quot;class&quot;)= chr [1:5] &quot;tbl_PqConnection&quot; &quot;tbl_dbi&quot; &quot;tbl_sql&quot; &quot;tbl_lazy&quot; ... 11.3.2 Experiment overview Think of Q as a black box for the moment. The following examples will show how Q is interpreted differently by different functions. It’s important to remember in the following discussion that the “and then” operator (%&gt;%) actually wraps the subsequent code inside the preceding code so that Q %&gt;% print() is equivalent to print(Q). Notation A single green check indicates that some rows are returned. Two green checks indicate that all the rows are returned. The red X indicates that no rows are returned. R code Result Q %&gt;% print() Prints x rows; same as just entering Q Q %&gt;% dplyr::as_tibble() Forces Q to be a tibble Q %&gt;% head() Prints the first 6 rows Q %&gt;% tail() Error: tail() is not supported by sql sources Q %&gt;% length() Counts the rows in Q Q %&gt;% str() Shows the top 3 levels of the object Q Q %&gt;% nrow() Attempts to determine the number of rows Q %&gt;% dplyr::tally() Counts all the rows – on the dbms side Q %&gt;% dplyr::collect(n = 20) Prints 20 rows Q %&gt;% dplyr::collect(n = 20) %&gt;% head() Prints 6 rows Q %&gt;% ggplot Plots a barchart Q %&gt;% dplyr::show_query() Translates the lazy query object into SQL The next chapter will discuss how to build queries and how to explore intermediate steps. But first, the following subsections provide a more detailed discussion of each row in the preceding table. 11.3.3 Q %&gt;% print() Remember that Q %&gt;% print() is equivalent to print(Q) and the same as just entering Q on the command line. We use the magrittr pipe operator here, because chaining functions highlights how the same object behaves differently in each use. Q %&gt;% print() ## # Source: lazy query [?? x 4] ## # Database: postgres [postgres@localhost:5432/adventureworks] ## firstname lastname salesytd birthdate ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;date&gt; ## 1 Stephen Jiang 559698. 1951-10-17 ## 2 Michael Blythe 3763178. 1968-12-25 ## 3 Linda Mitchell 4251369. 1980-02-27 ## 4 Jillian Carson 3189418. 1962-08-29 ## 5 Garrett Vargas 1453719. 1975-02-04 ## 6 Tsvi Reiter 2315186. 1974-01-18 ## 7 Pamela Ansman-Wolfe 1352577. 1974-12-06 ## 8 Shu Ito 2458536. 1968-03-09 ## 9 José Saraiva 2604541. 1963-12-11 ## 10 David Campbell 1573013. 1974-02-11 ## # … with more rows R retrieves 10 observations and 3 columns. In its role as IDE, R has provided nicely formatted output that is similar to what it prints for a tibble, with descriptive information about the dataset and each column: 11.3.3 Source: lazy query [?? x 4] 11.3.3 Database: postgres 11.3.3 [postgres@localhost:5432/adventureworks] firstname lastname salesytd birthdate R has not determined how many rows are left to retrieve as it shows with [?? x 4] and ... with more rows in the data summary. 11.3.4 Q %&gt;% dplyr::as_tibble() In contrast to print(), the as_tibble() function causes R to download the whole table, using tibble’s default of displaying only the first 10 rows. Q %&gt;% dplyr::as_tibble() ## # A tibble: 17 x 4 ## firstname lastname salesytd birthdate ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;date&gt; ## 1 Stephen Jiang 559698. 1951-10-17 ## 2 Michael Blythe 3763178. 1968-12-25 ## 3 Linda Mitchell 4251369. 1980-02-27 ## 4 Jillian Carson 3189418. 1962-08-29 ## 5 Garrett Vargas 1453719. 1975-02-04 ## 6 Tsvi Reiter 2315186. 1974-01-18 ## 7 Pamela Ansman-Wolfe 1352577. 1974-12-06 ## 8 Shu Ito 2458536. 1968-03-09 ## 9 José Saraiva 2604541. 1963-12-11 ## 10 David Campbell 1573013. 1974-02-11 ## 11 Tete Mensa-Annan 1576562. 1978-01-05 ## 12 Syed Abbas 172524. 1975-01-11 ## 13 Lynn Tsoflias 1421811. 1977-02-14 ## 14 Amy Alberts 519906. 1957-09-20 ## 15 Rachel Valdez 1827067. 1975-07-09 ## 16 Jae Pak 4116871. 1968-03-17 ## 17 Ranjit Varkey Chudukatil 3121616. 1975-09-30 11.3.5 Q %&gt;% head() The head() function is very similar to print but has a different “max.print” value. Q %&gt;% head() ## # Source: lazy query [?? x 4] ## # Database: postgres [postgres@localhost:5432/adventureworks] ## firstname lastname salesytd birthdate ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;date&gt; ## 1 Stephen Jiang 559698. 1951-10-17 ## 2 Michael Blythe 3763178. 1968-12-25 ## 3 Linda Mitchell 4251369. 1980-02-27 ## 4 Jillian Carson 3189418. 1962-08-29 ## 5 Garrett Vargas 1453719. 1975-02-04 ## 6 Tsvi Reiter 2315186. 1974-01-18 11.3.6 Q %&gt;% tail() Produces an error, because Q does not hold all of the data, so it is not possible to list the last few items from the table: try( Q %&gt;% tail(), silent = FALSE, outFile = stdout() ) ## Error : tail() is not supported by sql sources 11.3.7 Q %&gt;% length() Because the Q object is relatively complex, using str() on it prints many lines. You can glimpse what’s going on with length(): Q %&gt;% length() ## [1] 2 11.3.8 Q %&gt;% str() Looking inside shows some of what’s going on (three levels deep): Q %&gt;% str(max.level = 3) ## List of 2 ## $ src:List of 2 ## ..$ con :Formal class &#39;PqConnection&#39; [package &quot;RPostgres&quot;] with 3 slots ## ..$ disco: NULL ## ..- attr(*, &quot;class&quot;)= chr [1:4] &quot;src_PqConnection&quot; &quot;src_dbi&quot; &quot;src_sql&quot; &quot;src&quot; ## $ ops:List of 4 ## ..$ name: chr &quot;select&quot; ## ..$ x :List of 4 ## .. ..$ name: chr &quot;join&quot; ## .. ..$ x :List of 2 ## .. .. ..- attr(*, &quot;class&quot;)= chr [1:5] &quot;tbl_PqConnection&quot; &quot;tbl_dbi&quot; &quot;tbl_sql&quot; &quot;tbl_lazy&quot; ... ## .. ..$ y :List of 2 ## .. .. ..- attr(*, &quot;class&quot;)= chr [1:5] &quot;tbl_PqConnection&quot; &quot;tbl_dbi&quot; &quot;tbl_sql&quot; &quot;tbl_lazy&quot; ... ## .. ..$ args:List of 4 ## .. ..- attr(*, &quot;class&quot;)= chr [1:3] &quot;op_join&quot; &quot;op_double&quot; &quot;op&quot; ## ..$ dots: list() ## ..$ args:List of 1 ## .. ..$ vars:List of 4 ## ..- attr(*, &quot;class&quot;)= chr [1:3] &quot;op_select&quot; &quot;op_single&quot; &quot;op&quot; ## - attr(*, &quot;class&quot;)= chr [1:5] &quot;tbl_PqConnection&quot; &quot;tbl_dbi&quot; &quot;tbl_sql&quot; &quot;tbl_lazy&quot; ... 11.3.9 Q %&gt;% nrow() Notice the difference between nrow() and tally(). The nrow functions returns NA and does not execute a query: Q %&gt;% nrow() ## [1] NA 11.3.10 Q %&gt;% dplyr::tally() The tally function actually counts all the rows. Q %&gt;% dplyr::tally() ## # Source: lazy query [?? x 1] ## # Database: postgres [postgres@localhost:5432/adventureworks] ## n ## &lt;int64&gt; ## 1 17 The nrow() function knows that Q is a list. On the other hand, the tally() function tells SQL to go count all the rows. Notice that Q results in 1,000 rows – the same number of rows as film. 11.3.11 Q %&gt;% dplyr::collect() The dplyr::collect function triggers a call to the DBI:dbFetch() function behind the scenes, which forces R to download a specified number of rows: Q %&gt;% dplyr::collect(n = 20) ## # A tibble: 17 x 4 ## firstname lastname salesytd birthdate ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;date&gt; ## 1 Stephen Jiang 559698. 1951-10-17 ## 2 Michael Blythe 3763178. 1968-12-25 ## 3 Linda Mitchell 4251369. 1980-02-27 ## 4 Jillian Carson 3189418. 1962-08-29 ## 5 Garrett Vargas 1453719. 1975-02-04 ## 6 Tsvi Reiter 2315186. 1974-01-18 ## 7 Pamela Ansman-Wolfe 1352577. 1974-12-06 ## 8 Shu Ito 2458536. 1968-03-09 ## 9 José Saraiva 2604541. 1963-12-11 ## 10 David Campbell 1573013. 1974-02-11 ## 11 Tete Mensa-Annan 1576562. 1978-01-05 ## 12 Syed Abbas 172524. 1975-01-11 ## 13 Lynn Tsoflias 1421811. 1977-02-14 ## 14 Amy Alberts 519906. 1957-09-20 ## 15 Rachel Valdez 1827067. 1975-07-09 ## 16 Jae Pak 4116871. 1968-03-17 ## 17 Ranjit Varkey Chudukatil 3121616. 1975-09-30 Q %&gt;% dplyr::collect(n = 20) %&gt;% head() ## # A tibble: 6 x 4 ## firstname lastname salesytd birthdate ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;date&gt; ## 1 Stephen Jiang 559698. 1951-10-17 ## 2 Michael Blythe 3763178. 1968-12-25 ## 3 Linda Mitchell 4251369. 1980-02-27 ## 4 Jillian Carson 3189418. 1962-08-29 ## 5 Garrett Vargas 1453719. 1975-02-04 ## 6 Tsvi Reiter 2315186. 1974-01-18 The dplyr::collect function triggers the creation of a tibble and controls the number of rows that the DBMS sends to R. Notice that head only prints 6 of the 20 rows that R has retrieved. If you do not provide a value for the n argument, all of the rows will be retrieved into your R workspace. 11.3.12 Q %&gt;% ggplot Passing the Q object to ggplot executes the query and plots the result. Q %&gt;% ggplot2::ggplot(aes(birthdate, salesytd)) + geom_point() * Rewrite previous query and this comment with adventureworks in mind. Comment on the plot… 11.3.13 Q %&gt;% dplyr::show_query() Q %&gt;% dplyr::show_query() ## &lt;SQL&gt; ## SELECT &quot;firstname&quot;, &quot;lastname&quot;, &quot;salesytd&quot;, &quot;birthdate&quot; ## FROM (SELECT &quot;LHS&quot;.&quot;businessentityid&quot; AS &quot;businessentityid&quot;, &quot;LHS&quot;.&quot;territoryid&quot; AS &quot;territoryid&quot;, &quot;LHS&quot;.&quot;salesquota&quot; AS &quot;salesquota&quot;, &quot;LHS&quot;.&quot;bonus&quot; AS &quot;bonus&quot;, &quot;LHS&quot;.&quot;commissionpct&quot; AS &quot;commissionpct&quot;, &quot;LHS&quot;.&quot;salesytd&quot; AS &quot;salesytd&quot;, &quot;LHS&quot;.&quot;saleslastyear&quot; AS &quot;saleslastyear&quot;, &quot;LHS&quot;.&quot;sale_info_updated&quot; AS &quot;sale_info_updated&quot;, &quot;LHS&quot;.&quot;nationalidnumber&quot; AS &quot;nationalidnumber&quot;, &quot;LHS&quot;.&quot;loginid&quot; AS &quot;loginid&quot;, &quot;LHS&quot;.&quot;jobtitle&quot; AS &quot;jobtitle&quot;, &quot;LHS&quot;.&quot;birthdate&quot; AS &quot;birthdate&quot;, &quot;LHS&quot;.&quot;maritalstatus&quot; AS &quot;maritalstatus&quot;, &quot;LHS&quot;.&quot;gender&quot; AS &quot;gender&quot;, &quot;LHS&quot;.&quot;hiredate&quot; AS &quot;hiredate&quot;, &quot;LHS&quot;.&quot;salariedflag&quot; AS &quot;salariedflag&quot;, &quot;LHS&quot;.&quot;vacationhours&quot; AS &quot;vacationhours&quot;, &quot;LHS&quot;.&quot;sickleavehours&quot; AS &quot;sickleavehours&quot;, &quot;LHS&quot;.&quot;currentflag&quot; AS &quot;currentflag&quot;, &quot;LHS&quot;.&quot;organizationnode&quot; AS &quot;organizationnode&quot;, &quot;RHS&quot;.&quot;persontype&quot; AS &quot;persontype&quot;, &quot;RHS&quot;.&quot;namestyle&quot; AS &quot;namestyle&quot;, &quot;RHS&quot;.&quot;title&quot; AS &quot;title&quot;, &quot;RHS&quot;.&quot;firstname&quot; AS &quot;firstname&quot;, &quot;RHS&quot;.&quot;middlename&quot; AS &quot;middlename&quot;, &quot;RHS&quot;.&quot;lastname&quot; AS &quot;lastname&quot;, &quot;RHS&quot;.&quot;suffix&quot; AS &quot;suffix&quot;, &quot;RHS&quot;.&quot;emailpromotion&quot; AS &quot;emailpromotion&quot;, &quot;RHS&quot;.&quot;additionalcontactinfo&quot; AS &quot;additionalcontactinfo&quot;, &quot;RHS&quot;.&quot;demographics&quot; AS &quot;demographics&quot; ## FROM (SELECT &quot;LHS&quot;.&quot;businessentityid&quot; AS &quot;businessentityid&quot;, &quot;LHS&quot;.&quot;territoryid&quot; AS &quot;territoryid&quot;, &quot;LHS&quot;.&quot;salesquota&quot; AS &quot;salesquota&quot;, &quot;LHS&quot;.&quot;bonus&quot; AS &quot;bonus&quot;, &quot;LHS&quot;.&quot;commissionpct&quot; AS &quot;commissionpct&quot;, &quot;LHS&quot;.&quot;salesytd&quot; AS &quot;salesytd&quot;, &quot;LHS&quot;.&quot;saleslastyear&quot; AS &quot;saleslastyear&quot;, &quot;LHS&quot;.&quot;sale_info_updated&quot; AS &quot;sale_info_updated&quot;, &quot;RHS&quot;.&quot;nationalidnumber&quot; AS &quot;nationalidnumber&quot;, &quot;RHS&quot;.&quot;loginid&quot; AS &quot;loginid&quot;, &quot;RHS&quot;.&quot;jobtitle&quot; AS &quot;jobtitle&quot;, &quot;RHS&quot;.&quot;birthdate&quot; AS &quot;birthdate&quot;, &quot;RHS&quot;.&quot;maritalstatus&quot; AS &quot;maritalstatus&quot;, &quot;RHS&quot;.&quot;gender&quot; AS &quot;gender&quot;, &quot;RHS&quot;.&quot;hiredate&quot; AS &quot;hiredate&quot;, &quot;RHS&quot;.&quot;salariedflag&quot; AS &quot;salariedflag&quot;, &quot;RHS&quot;.&quot;vacationhours&quot; AS &quot;vacationhours&quot;, &quot;RHS&quot;.&quot;sickleavehours&quot; AS &quot;sickleavehours&quot;, &quot;RHS&quot;.&quot;currentflag&quot; AS &quot;currentflag&quot;, &quot;RHS&quot;.&quot;organizationnode&quot; AS &quot;organizationnode&quot; ## FROM (SELECT &quot;businessentityid&quot;, &quot;territoryid&quot;, &quot;salesquota&quot;, &quot;bonus&quot;, &quot;commissionpct&quot;, &quot;salesytd&quot;, &quot;saleslastyear&quot;, &quot;modifieddate&quot; AS &quot;sale_info_updated&quot; ## FROM sales.salesperson) &quot;LHS&quot; ## LEFT JOIN (SELECT &quot;businessentityid&quot;, &quot;nationalidnumber&quot;, &quot;loginid&quot;, &quot;jobtitle&quot;, &quot;birthdate&quot;, &quot;maritalstatus&quot;, &quot;gender&quot;, &quot;hiredate&quot;, &quot;salariedflag&quot;, &quot;vacationhours&quot;, &quot;sickleavehours&quot;, &quot;currentflag&quot;, &quot;organizationnode&quot; ## FROM humanresources.employee) &quot;RHS&quot; ## ON (&quot;LHS&quot;.&quot;businessentityid&quot; = &quot;RHS&quot;.&quot;businessentityid&quot;) ## ) &quot;LHS&quot; ## LEFT JOIN (SELECT &quot;businessentityid&quot;, &quot;persontype&quot;, &quot;namestyle&quot;, &quot;title&quot;, &quot;firstname&quot;, &quot;middlename&quot;, &quot;lastname&quot;, &quot;suffix&quot;, &quot;emailpromotion&quot;, &quot;additionalcontactinfo&quot;, &quot;demographics&quot; ## FROM person.person) &quot;RHS&quot; ## ON (&quot;LHS&quot;.&quot;businessentityid&quot; = &quot;RHS&quot;.&quot;businessentityid&quot;) ## ) &quot;dbplyr_009&quot; Hand-written SQL code to do the same job will probably look a lot nicer and could be more efficient, but functionally dplyr does the job. DBI::dbDisconnect(con) sqlpetr::sp_docker_stop(&quot;adventureworks&quot;) 11.4 Other resources Benjamin S. Baumer. 2017. A Grammar for Reproducible and Painless Extract-Transform-Load Operations on Medium Data. https://arxiv.org/abs/1708.07073 dplyr Reference documentation: Remote tables. https://dplyr.tidyverse.org/reference/index.html#section-remote-tables Data Carpentry. SQL Databases and R. https://datacarpentry.org/R-ecology-lesson/05-r-and-databases.html https://www.techopedia.com/definition/1245/structured-query-language-sql↩ https://cran.r-project.org/doc/manuals/r-release/R-ints.html#Lazy-loading↩ https://colinfay.me/lazyeval/↩ http://adv-r.had.co.nz/Functions.html#function-arguments↩ https://colinfay.me/tidyeval-1/↩ https://www.quora.com/What-is-a-lazy-query↩ "],
["chapter-lazy-evaluation-and-timing.html", "Chapter 12 Lazy Evaluation and Execution Environment 12.1 Setup 12.2 Other resources", " Chapter 12 Lazy Evaluation and Execution Environment This chapter: Builds on the lazy loading discussion in the previous chapter Demonstrates how the use of the dplyr::collect() creates a boundary between code that is sent to a dbms and code that is executed locally 12.1 Setup The following packages are used in this chapter: library(tidyverse) library(DBI) library(RPostgres) library(dbplyr) require(knitr) library(bookdown) library(sqlpetr) If you have not yet set up the Docker container with PostgreSQL and the dvdrental database, go back to [those instructions][Build the pet-sql Docker Image] to configure your environment. Otherwise, start your adventureworks container: sqlpetr::sp_docker_start(&quot;adventureworks&quot;) Connect to the database: con &lt;- sqlpetr::sp_get_postgres_connection( user = Sys.getenv(&quot;DEFAULT_POSTGRES_USER_NAME&quot;), password = Sys.getenv(&quot;DEFAULT_POSTGRES_PASSWORD&quot;), dbname = &quot;adventureworks&quot;, port = 5432, seconds_to_test = 20, connection_tab = TRUE ) Here is a simple string of dplyr verbs similar to the query used to illustrate issues in the last chapter: Note that in the previous example we follow this book’s convention of creating a connection object to each table and fully qualifying function names (e.g., specifying the package). In practice, it’s possible and convenient to use more abbreviated notation. Q &lt;- tbl(con, in_schema(&quot;sales&quot;, &quot;salesperson&quot;)) %&gt;% left_join(tbl(con, in_schema(&quot;humanresources&quot;, &quot;employee&quot;)), by = c(&quot;businessentityid&quot; = &quot;businessentityid&quot;)) %&gt;% select(birthdate, saleslastyear) Q ## # Source: lazy query [?? x 2] ## # Database: postgres [postgres@localhost:5432/adventureworks] ## birthdate saleslastyear ## &lt;date&gt; &lt;dbl&gt; ## 1 1951-10-17 0 ## 2 1968-12-25 1750406. ## 3 1980-02-27 1439156. ## 4 1962-08-29 1997186. ## 5 1975-02-04 1620277. ## 6 1974-01-18 1849641. ## 7 1974-12-06 1927059. ## 8 1968-03-09 2073506. ## 9 1963-12-11 2038235. ## 10 1974-02-11 1371635. ## # … with more rows 12.1.1 Experiment overview Think of Q as a black box for the moment. The following examples will show how Q is interpreted differently by different functions. It’s important to remember in the following discussion that the “and then” operator (%&gt;%) actually wraps the subsequent code inside the preceding code so that Q %&gt;% print() is equivalent to print(Q). Notation Symbol Explanation A single green check indicates that some rows are returned. Two green checks indicate that all the rows are returned. The red X indicates that no rows are returned. R code Result Time-based, execution environment issues Qc &lt;- Q %&gt;% count(saleslastyear, sort = TRUE) Extends the lazy query object The next chapter will discuss how to build queries and how to explore intermediate steps. But first, the following subsections provide a more detailed discussion of each row in the preceding table. 12.1.2 Time-based, execution environment issues Remember that if the expression is assigned to an object, it is not executed. If an expression is entered on the command line or appears in your script by itself, a print() function is implied. These two are different: Q %&gt;% sum(saleslastyear) Q_query &lt;- Q %&gt;% sum(saleslastyear) This behavior is the basis of a useful debugging and development process where queries are built up incrementally. 12.1.3 Q %&gt;% more dplyr Because the following statement implies a print() function at the end, we can run it repeatedly, adding dplyr expressions, and only get 10 rows back. Every time we add a dplyr expression to a chain, R will rewrite the SQL code. For example: As we understand more about the data, we simply add dplyr expressions to pinpoint what we are looking for: Q %&gt;% filter(saleslastyear &gt; 40) %&gt;% arrange(desc(saleslastyear)) ## # Source: lazy query [?? x 2] ## # Database: postgres [postgres@localhost:5432/adventureworks] ## # Ordered by: desc(saleslastyear) ## birthdate saleslastyear ## &lt;date&gt; &lt;dbl&gt; ## 1 1975-09-30 2396540. ## 2 1977-02-14 2278549. ## 3 1968-03-09 2073506. ## 4 1963-12-11 2038235. ## 5 1962-08-29 1997186. ## 6 1974-12-06 1927059. ## 7 1974-01-18 1849641. ## 8 1968-12-25 1750406. ## 9 1968-03-17 1635823. ## 10 1975-02-04 1620277. ## # … with more rows Q %&gt;% summarize(total_sales = sum(saleslastyear, na.rm = TRUE), sales_persons_count = n()) ## # Source: lazy query [?? x 2] ## # Database: postgres [postgres@localhost:5432/adventureworks] ## total_sales sales_persons_count ## &lt;dbl&gt; &lt;int64&gt; ## 1 23685964. 17 When all the accumulated dplyr verbs are executed, they are submitted to the dbms and the number of rows that are returned follow the same rules as discussed above. ### Interspersing SQL and dplyr Q %&gt;% # mutate(birthdate = date(birthdate)) %&gt;% show_query() ## &lt;SQL&gt; ## SELECT &quot;birthdate&quot;, &quot;saleslastyear&quot; ## FROM (SELECT &quot;LHS&quot;.&quot;businessentityid&quot; AS &quot;businessentityid&quot;, &quot;LHS&quot;.&quot;territoryid&quot; AS &quot;territoryid&quot;, &quot;LHS&quot;.&quot;salesquota&quot; AS &quot;salesquota&quot;, &quot;LHS&quot;.&quot;bonus&quot; AS &quot;bonus&quot;, &quot;LHS&quot;.&quot;commissionpct&quot; AS &quot;commissionpct&quot;, &quot;LHS&quot;.&quot;salesytd&quot; AS &quot;salesytd&quot;, &quot;LHS&quot;.&quot;saleslastyear&quot; AS &quot;saleslastyear&quot;, &quot;LHS&quot;.&quot;rowguid&quot; AS &quot;rowguid.x&quot;, &quot;LHS&quot;.&quot;modifieddate&quot; AS &quot;modifieddate.x&quot;, &quot;RHS&quot;.&quot;nationalidnumber&quot; AS &quot;nationalidnumber&quot;, &quot;RHS&quot;.&quot;loginid&quot; AS &quot;loginid&quot;, &quot;RHS&quot;.&quot;jobtitle&quot; AS &quot;jobtitle&quot;, &quot;RHS&quot;.&quot;birthdate&quot; AS &quot;birthdate&quot;, &quot;RHS&quot;.&quot;maritalstatus&quot; AS &quot;maritalstatus&quot;, &quot;RHS&quot;.&quot;gender&quot; AS &quot;gender&quot;, &quot;RHS&quot;.&quot;hiredate&quot; AS &quot;hiredate&quot;, &quot;RHS&quot;.&quot;salariedflag&quot; AS &quot;salariedflag&quot;, &quot;RHS&quot;.&quot;vacationhours&quot; AS &quot;vacationhours&quot;, &quot;RHS&quot;.&quot;sickleavehours&quot; AS &quot;sickleavehours&quot;, &quot;RHS&quot;.&quot;currentflag&quot; AS &quot;currentflag&quot;, &quot;RHS&quot;.&quot;rowguid&quot; AS &quot;rowguid.y&quot;, &quot;RHS&quot;.&quot;modifieddate&quot; AS &quot;modifieddate.y&quot;, &quot;RHS&quot;.&quot;organizationnode&quot; AS &quot;organizationnode&quot; ## FROM sales.salesperson AS &quot;LHS&quot; ## LEFT JOIN humanresources.employee AS &quot;RHS&quot; ## ON (&quot;LHS&quot;.&quot;businessentityid&quot; = &quot;RHS&quot;.&quot;businessentityid&quot;) ## ) &quot;dbplyr_006&quot; # Need to come up with a different example illustrating where # the `collect` statement goes. # sales_person_table %&gt;% # mutate(birthdate = date(birthdate)) # # try(sales_person_table %&gt;% # mutate(birthdate = lubridate::date(birthdate)) # ) # # sales_person_table %&gt;% collect() %&gt;% # mutate(birthdate = lubridate::date(birthdate)) This may not be relevant in the context where it turns out that dates in adventureworks come through as date! The idea is to show how functions are interpreted BEFORE sending to the SQL translator. to_char &lt;- function(date, fmt) {return(fmt)} # sales_person_table %&gt;% # mutate(birthdate = to_char(birthdate, &quot;YYYY-MM&quot;)) %&gt;% # show_query() # # sales_person_table %&gt;% # mutate(birthdate = to_char(birthdate, &quot;YYYY-MM&quot;)) 12.1.4 Many handy R functions can’t be translated to SQL It just so happens that PostgreSQL has a date function that does the same thing as the date function in the lubridate package. In the following code the date function is executed by PostreSQL. # sales_person_table %&gt;% mutate(birthdate = date(birthdate)) If we specify that we want to use the lubridate version (or any number of other R functions) they are passed to the dbms unless we explicitly tell dplyr to stop translating and bring the results back to the R environment for local processing. try(sales_person_table %&gt;% collect() %&gt;% mutate(birthdate = lubridate::date(birthdate))) ## Error in eval(lhs, parent, parent) : ## object &#39;sales_person_table&#39; not found 12.1.5 Further lazy execution examples See more examples of lazy execution here. DBI::dbDisconnect(con) sqlpetr::sp_docker_stop(&quot;adventureworks&quot;) 12.2 Other resources Benjamin S. Baumer. 2017. A Grammar for Reproducible and Painless Extract-Transform-Load Operations on Medium Data. https://arxiv.org/abs/1708.07073 dplyr Reference documentation: Remote tables. https://dplyr.tidyverse.org/reference/index.html#section-remote-tables Data Carpentry. SQL Databases and R. https://datacarpentry.org/R-ecology-lesson/05-r-and-databases.html "],
["chapter-postgresql-metadata.html", "Chapter 13 Getting metadata about and from PostgreSQL 13.1 Database contents and structure 13.2 What columns do those tables contain? 13.3 Characterizing how things are named 13.4 Database keys 13.5 Creating your own data dictionary 13.6 Save your work!", " Chapter 13 Getting metadata about and from PostgreSQL This chapter demonstrates: What kind of data about the database is contained in a dbms Several methods for obtaining metadata from the dbms The following packages are used in this chapter: library(tidyverse) library(DBI) library(RPostgres) library(glue) library(here) require(knitr) library(dbplyr) library(sqlpetr) Assume that the Docker container with PostgreSQL and the dvdrental database are ready to go. sp_docker_start(&quot;adventureworks&quot;) Connect to the database: con &lt;- sqlpetr::sp_get_postgres_connection( user = Sys.getenv(&quot;DEFAULT_POSTGRES_USER_NAME&quot;), password = Sys.getenv(&quot;DEFAULT_POSTGRES_PASSWORD&quot;), dbname = &quot;adventureworks&quot;, port = 5432, seconds_to_test = 20, connection_tab = TRUE ) 13.1 Database contents and structure After just looking at the data you seek, it might be worthwhile stepping back and looking at the big picture. 13.1.1 Database structure For large or complex databases you need to use both the available documentation for your database (e.g., the dvdrental database) and the other empirical tools that are available. For example it’s worth learning to interpret the symbols in an Entity Relationship Diagram: The information_schema is a trove of information about the database. Its format is more or less consistent across the different SQL implementations that are available. Here we explore some of what’s available using several different methods. PostgreSQL stores a lot of metadata. 13.1.2 Contents of the information_schema For this chapter R needs the dbplyr package to access alternate schemas. A schema is an object that contains one or more tables. Most often there will be a default schema, but to access the metadata, you need to explicitly specify which schema contains the data you want. 13.1.3 What tables are in the database? The simplest way to get a list of tables is with … NO LONGER WORKS: schema_list &lt;- tbl(con, in_schema(&quot;information_schema&quot;, &quot;schemata&quot;)) %&gt;% select(catalog_name, schema_name, schema_owner) %&gt;% collect() kable(schema_list) catalog_name schema_name schema_owner adventureworks sales postgres adventureworks sa postgres adventureworks purchasing postgres adventureworks pu postgres adventureworks production postgres adventureworks pr postgres adventureworks person postgres adventureworks pe postgres adventureworks humanresources postgres adventureworks hr postgres adventureworks information_schema postgres adventureworks public postgres adventureworks pg_catalog postgres adventureworks pg_toast_temp_1 postgres adventureworks pg_temp_1 postgres adventureworks pg_toast postgres ### Digging into the `information_sche ma` We usually need more detail than just a list of tables. Most SQL databases have an information_schema that has a standard structure to describe and control the database. The information_schema is in a different schema from the default, so to connect to the tables table in the information_schema we connect to the database in a different way: table_info_schema_table &lt;- tbl(con, dbplyr::in_schema(&quot;information_schema&quot;, &quot;tables&quot;)) The information_schema is large and complex and contains 343 tables. So it’s easy to get lost in it. This query retrieves a list of the tables in the database that includes additional detail, not just the name of the table. table_info &lt;- table_info_schema_table %&gt;% # filter(table_schema == &quot;public&quot;) %&gt;% select(table_catalog, table_schema, table_name, table_type) %&gt;% arrange(table_type, table_name) %&gt;% collect() kable(table_info) table_catalog table_schema table_name table_type adventureworks person address BASE TABLE adventureworks person addresstype BASE TABLE adventureworks production billofmaterials BASE TABLE adventureworks person businessentity BASE TABLE adventureworks person businessentityaddress BASE TABLE adventureworks person businessentitycontact BASE TABLE adventureworks person contacttype BASE TABLE adventureworks person countryregion BASE TABLE adventureworks sales countryregioncurrency BASE TABLE adventureworks sales creditcard BASE TABLE adventureworks production culture BASE TABLE adventureworks sales currency BASE TABLE adventureworks sales currencyrate BASE TABLE adventureworks sales customer BASE TABLE adventureworks humanresources department BASE TABLE adventureworks production document BASE TABLE adventureworks person emailaddress BASE TABLE adventureworks humanresources employee BASE TABLE adventureworks humanresources employeedepartmenthistory BASE TABLE adventureworks humanresources employeepayhistory BASE TABLE adventureworks production illustration BASE TABLE adventureworks humanresources jobcandidate BASE TABLE adventureworks production location BASE TABLE adventureworks person password BASE TABLE adventureworks person person BASE TABLE adventureworks sales personcreditcard BASE TABLE adventureworks person personphone BASE TABLE adventureworks pg_catalog pg_aggregate BASE TABLE adventureworks pg_catalog pg_am BASE TABLE adventureworks pg_catalog pg_amop BASE TABLE adventureworks pg_catalog pg_amproc BASE TABLE adventureworks pg_catalog pg_attrdef BASE TABLE adventureworks pg_catalog pg_attribute BASE TABLE adventureworks pg_catalog pg_authid BASE TABLE adventureworks pg_catalog pg_auth_members BASE TABLE adventureworks pg_catalog pg_cast BASE TABLE adventureworks pg_catalog pg_class BASE TABLE adventureworks pg_catalog pg_collation BASE TABLE adventureworks pg_catalog pg_constraint BASE TABLE adventureworks pg_catalog pg_conversion BASE TABLE adventureworks pg_catalog pg_database BASE TABLE adventureworks pg_catalog pg_db_role_setting BASE TABLE adventureworks pg_catalog pg_default_acl BASE TABLE adventureworks pg_catalog pg_depend BASE TABLE adventureworks pg_catalog pg_description BASE TABLE adventureworks pg_catalog pg_enum BASE TABLE adventureworks pg_catalog pg_event_trigger BASE TABLE adventureworks pg_catalog pg_extension BASE TABLE adventureworks pg_catalog pg_foreign_data_wrapper BASE TABLE adventureworks pg_catalog pg_foreign_server BASE TABLE adventureworks pg_catalog pg_foreign_table BASE TABLE adventureworks pg_catalog pg_index BASE TABLE adventureworks pg_catalog pg_inherits BASE TABLE adventureworks pg_catalog pg_init_privs BASE TABLE adventureworks pg_catalog pg_language BASE TABLE adventureworks pg_catalog pg_largeobject BASE TABLE adventureworks pg_catalog pg_largeobject_metadata BASE TABLE adventureworks pg_catalog pg_namespace BASE TABLE adventureworks pg_catalog pg_opclass BASE TABLE adventureworks pg_catalog pg_operator BASE TABLE adventureworks pg_catalog pg_opfamily BASE TABLE adventureworks pg_catalog pg_partitioned_table BASE TABLE adventureworks pg_catalog pg_pltemplate BASE TABLE adventureworks pg_catalog pg_policy BASE TABLE adventureworks pg_catalog pg_proc BASE TABLE adventureworks pg_catalog pg_publication BASE TABLE adventureworks pg_catalog pg_publication_rel BASE TABLE adventureworks pg_catalog pg_range BASE TABLE adventureworks pg_catalog pg_replication_origin BASE TABLE adventureworks pg_catalog pg_rewrite BASE TABLE adventureworks pg_catalog pg_seclabel BASE TABLE adventureworks pg_catalog pg_sequence BASE TABLE adventureworks pg_catalog pg_shdepend BASE TABLE adventureworks pg_catalog pg_shdescription BASE TABLE adventureworks pg_catalog pg_shseclabel BASE TABLE adventureworks pg_catalog pg_statistic BASE TABLE adventureworks pg_catalog pg_statistic_ext BASE TABLE adventureworks pg_catalog pg_subscription BASE TABLE adventureworks pg_catalog pg_subscription_rel BASE TABLE adventureworks pg_catalog pg_tablespace BASE TABLE adventureworks pg_catalog pg_transform BASE TABLE adventureworks pg_catalog pg_trigger BASE TABLE adventureworks pg_catalog pg_ts_config BASE TABLE adventureworks pg_catalog pg_ts_config_map BASE TABLE adventureworks pg_catalog pg_ts_dict BASE TABLE adventureworks pg_catalog pg_ts_parser BASE TABLE adventureworks pg_catalog pg_ts_template BASE TABLE adventureworks pg_catalog pg_type BASE TABLE adventureworks pg_catalog pg_user_mapping BASE TABLE adventureworks person phonenumbertype BASE TABLE adventureworks production product BASE TABLE adventureworks production productcategory BASE TABLE adventureworks production productcosthistory BASE TABLE adventureworks production productdescription BASE TABLE adventureworks production productdocument BASE TABLE adventureworks production productinventory BASE TABLE adventureworks production productlistpricehistory BASE TABLE adventureworks production productmodel BASE TABLE adventureworks production productmodelillustration BASE TABLE adventureworks production productmodelproductdescriptionculture BASE TABLE adventureworks production productphoto BASE TABLE adventureworks production productproductphoto BASE TABLE adventureworks production productreview BASE TABLE adventureworks production productsubcategory BASE TABLE adventureworks purchasing productvendor BASE TABLE adventureworks purchasing purchaseorderdetail BASE TABLE adventureworks purchasing purchaseorderheader BASE TABLE adventureworks sales salesorderdetail BASE TABLE adventureworks sales salesorderheader BASE TABLE adventureworks sales salesorderheadersalesreason BASE TABLE adventureworks sales salesperson BASE TABLE adventureworks sales salespersonquotahistory BASE TABLE adventureworks sales salesreason BASE TABLE adventureworks sales salestaxrate BASE TABLE adventureworks sales salesterritory BASE TABLE adventureworks sales salesterritoryhistory BASE TABLE adventureworks production scrapreason BASE TABLE adventureworks humanresources shift BASE TABLE adventureworks purchasing shipmethod BASE TABLE adventureworks sales shoppingcartitem BASE TABLE adventureworks sales specialoffer BASE TABLE adventureworks sales specialofferproduct BASE TABLE adventureworks information_schema sql_features BASE TABLE adventureworks information_schema sql_implementation_info BASE TABLE adventureworks information_schema sql_languages BASE TABLE adventureworks information_schema sql_packages BASE TABLE adventureworks information_schema sql_parts BASE TABLE adventureworks information_schema sql_sizing BASE TABLE adventureworks information_schema sql_sizing_profiles BASE TABLE adventureworks person stateprovince BASE TABLE adventureworks sales store BASE TABLE adventureworks production transactionhistory BASE TABLE adventureworks production transactionhistoryarchive BASE TABLE adventureworks production unitmeasure BASE TABLE adventureworks purchasing vendor BASE TABLE adventureworks production workorder BASE TABLE adventureworks production workorderrouting BASE TABLE adventureworks pe a VIEW adventureworks information_schema administrable_role_authorizations VIEW adventureworks information_schema applicable_roles VIEW adventureworks pe at VIEW adventureworks information_schema attributes VIEW adventureworks pe be VIEW adventureworks pe bea VIEW adventureworks pe bec VIEW adventureworks pr bom VIEW adventureworks sa c VIEW adventureworks pr c VIEW adventureworks sa cc VIEW adventureworks information_schema character_sets VIEW adventureworks information_schema check_constraint_routine_usage VIEW adventureworks information_schema check_constraints VIEW adventureworks information_schema collation_character_set_applicability VIEW adventureworks information_schema collations VIEW adventureworks information_schema column_domain_usage VIEW adventureworks information_schema column_options VIEW adventureworks information_schema column_privileges VIEW adventureworks information_schema columns VIEW adventureworks information_schema column_udt_usage VIEW adventureworks information_schema constraint_column_usage VIEW adventureworks information_schema constraint_table_usage VIEW adventureworks pe cr VIEW adventureworks sa cr VIEW adventureworks sa crc VIEW adventureworks pe ct VIEW adventureworks sa cu VIEW adventureworks pr d VIEW adventureworks hr d VIEW adventureworks information_schema data_type_privileges VIEW adventureworks information_schema domain_constraints VIEW adventureworks information_schema domains VIEW adventureworks information_schema domain_udt_usage VIEW adventureworks hr e VIEW adventureworks pe e VIEW adventureworks hr edh VIEW adventureworks information_schema element_types VIEW adventureworks information_schema enabled_roles VIEW adventureworks hr eph VIEW adventureworks information_schema foreign_data_wrapper_options VIEW adventureworks information_schema foreign_data_wrappers VIEW adventureworks information_schema foreign_server_options VIEW adventureworks information_schema foreign_servers VIEW adventureworks information_schema foreign_table_options VIEW adventureworks information_schema foreign_tables VIEW adventureworks pr i VIEW adventureworks information_schema information_schema_catalog_name VIEW adventureworks hr jc VIEW adventureworks information_schema key_column_usage VIEW adventureworks pr l VIEW adventureworks pe p VIEW adventureworks pr p VIEW adventureworks pe pa VIEW adventureworks information_schema parameters VIEW adventureworks pr pc VIEW adventureworks sa pcc VIEW adventureworks pr pch VIEW adventureworks pr pd VIEW adventureworks pr pdoc VIEW adventureworks pg_catalog pg_available_extensions VIEW adventureworks pg_catalog pg_available_extension_versions VIEW adventureworks pg_catalog pg_config VIEW adventureworks pg_catalog pg_cursors VIEW adventureworks pg_catalog pg_file_settings VIEW adventureworks information_schema _pg_foreign_data_wrappers VIEW adventureworks information_schema _pg_foreign_servers VIEW adventureworks information_schema _pg_foreign_table_columns VIEW adventureworks information_schema _pg_foreign_tables VIEW adventureworks pg_catalog pg_group VIEW adventureworks pg_catalog pg_hba_file_rules VIEW adventureworks pg_catalog pg_indexes VIEW adventureworks pg_catalog pg_locks VIEW adventureworks pg_catalog pg_matviews VIEW adventureworks pg_catalog pg_policies VIEW adventureworks pg_catalog pg_prepared_statements VIEW adventureworks pg_catalog pg_prepared_xacts VIEW adventureworks pg_catalog pg_publication_tables VIEW adventureworks pg_catalog pg_replication_origin_status VIEW adventureworks pg_catalog pg_replication_slots VIEW adventureworks pg_catalog pg_roles VIEW adventureworks pg_catalog pg_rules VIEW adventureworks pg_catalog pg_seclabels VIEW adventureworks pg_catalog pg_sequences VIEW adventureworks pg_catalog pg_settings VIEW adventureworks pg_catalog pg_shadow VIEW adventureworks pg_catalog pg_stat_activity VIEW adventureworks pg_catalog pg_stat_all_indexes VIEW adventureworks pg_catalog pg_stat_all_tables VIEW adventureworks pg_catalog pg_stat_archiver VIEW adventureworks pg_catalog pg_stat_bgwriter VIEW adventureworks pg_catalog pg_stat_database VIEW adventureworks pg_catalog pg_stat_database_conflicts VIEW adventureworks pg_catalog pg_statio_all_indexes VIEW adventureworks pg_catalog pg_statio_all_sequences VIEW adventureworks pg_catalog pg_statio_all_tables VIEW adventureworks pg_catalog pg_statio_sys_indexes VIEW adventureworks pg_catalog pg_statio_sys_sequences VIEW adventureworks pg_catalog pg_statio_sys_tables VIEW adventureworks pg_catalog pg_statio_user_indexes VIEW adventureworks pg_catalog pg_statio_user_sequences VIEW adventureworks pg_catalog pg_statio_user_tables VIEW adventureworks pg_catalog pg_stat_progress_vacuum VIEW adventureworks pg_catalog pg_stat_replication VIEW adventureworks pg_catalog pg_stats VIEW adventureworks pg_catalog pg_stat_ssl VIEW adventureworks pg_catalog pg_stat_subscription VIEW adventureworks pg_catalog pg_stat_sys_indexes VIEW adventureworks pg_catalog pg_stat_sys_tables VIEW adventureworks pg_catalog pg_stat_user_functions VIEW adventureworks pg_catalog pg_stat_user_indexes VIEW adventureworks pg_catalog pg_stat_user_tables VIEW adventureworks pg_catalog pg_stat_wal_receiver VIEW adventureworks pg_catalog pg_stat_xact_all_tables VIEW adventureworks pg_catalog pg_stat_xact_sys_tables VIEW adventureworks pg_catalog pg_stat_xact_user_functions VIEW adventureworks pg_catalog pg_stat_xact_user_tables VIEW adventureworks pg_catalog pg_tables VIEW adventureworks pg_catalog pg_timezone_abbrevs VIEW adventureworks pg_catalog pg_timezone_names VIEW adventureworks pg_catalog pg_user VIEW adventureworks information_schema _pg_user_mappings VIEW adventureworks pg_catalog pg_user_mappings VIEW adventureworks pg_catalog pg_views VIEW adventureworks pr pi VIEW adventureworks pr plph VIEW adventureworks pr pm VIEW adventureworks pr pmi VIEW adventureworks pr pmpdc VIEW adventureworks pe pnt VIEW adventureworks pu pod VIEW adventureworks pu poh VIEW adventureworks pr pp VIEW adventureworks pe pp VIEW adventureworks pr ppp VIEW adventureworks pr pr VIEW adventureworks pr psc VIEW adventureworks pu pv VIEW adventureworks information_schema referential_constraints VIEW adventureworks information_schema role_column_grants VIEW adventureworks information_schema role_routine_grants VIEW adventureworks information_schema role_table_grants VIEW adventureworks information_schema role_udt_grants VIEW adventureworks information_schema role_usage_grants VIEW adventureworks information_schema routine_privileges VIEW adventureworks information_schema routines VIEW adventureworks hr s VIEW adventureworks sa s VIEW adventureworks information_schema schemata VIEW adventureworks sa sci VIEW adventureworks information_schema sequences VIEW adventureworks pu sm VIEW adventureworks sa so VIEW adventureworks sa sod VIEW adventureworks sa soh VIEW adventureworks sa sohsr VIEW adventureworks sa sop VIEW adventureworks pe sp VIEW adventureworks sa sp VIEW adventureworks sa spqh VIEW adventureworks sa sr VIEW adventureworks pr sr VIEW adventureworks sa st VIEW adventureworks sa sth VIEW adventureworks information_schema table_constraints VIEW adventureworks information_schema table_privileges VIEW adventureworks information_schema tables VIEW adventureworks pr th VIEW adventureworks pr tha VIEW adventureworks sa tr VIEW adventureworks information_schema transforms VIEW adventureworks information_schema triggered_update_columns VIEW adventureworks information_schema triggers VIEW adventureworks information_schema udt_privileges VIEW adventureworks pr um VIEW adventureworks information_schema usage_privileges VIEW adventureworks information_schema user_defined_types VIEW adventureworks information_schema user_mapping_options VIEW adventureworks information_schema user_mappings VIEW adventureworks pu v VIEW adventureworks person vadditionalcontactinfo VIEW adventureworks humanresources vemployee VIEW adventureworks humanresources vemployeedepartment VIEW adventureworks humanresources vemployeedepartmenthistory VIEW adventureworks information_schema view_column_usage VIEW adventureworks information_schema view_routine_usage VIEW adventureworks information_schema views VIEW adventureworks information_schema view_table_usage VIEW adventureworks sales vindividualcustomer VIEW adventureworks humanresources vjobcandidate VIEW adventureworks humanresources vjobcandidateeducation VIEW adventureworks humanresources vjobcandidateemployment VIEW adventureworks sales vpersondemographics VIEW adventureworks production vproductmodelcatalogdescription VIEW adventureworks production vproductmodelinstructions VIEW adventureworks sales vsalesperson VIEW adventureworks sales vsalespersonsalesbyfiscalyears VIEW adventureworks sales vsalespersonsalesbyfiscalyearsdata VIEW adventureworks sales vstorewithaddresses VIEW adventureworks sales vstorewithcontacts VIEW adventureworks sales vstorewithdemographics VIEW adventureworks purchasing vvendorwithaddresses VIEW adventureworks purchasing vvendorwithcontacts VIEW adventureworks pr w VIEW adventureworks pr wr VIEW In this context ` table_catalog` is syn onymous with database. Notice that VIEWS are composites made up of one or more BASE TABLES. The SQL world has its own terminology. For example rs is shorthand for result set. That’s equivalent to using df for a data frame. The following SQL query returns the same information as the previous one. rs &lt;- dbGetQuery( con, &quot;select table_catalog, table_schema, table_name, table_type from information_schema.tables where table_schema not in (&#39;pg_catalog&#39;,&#39;information_schema&#39;) order by table_type, table_name ;&quot; ) kable(rs) table_catalog table_schema table_name table_type adventureworks person address BASE TABLE adventureworks person addresstype BASE TABLE adventureworks production billofmaterials BASE TABLE adventureworks person businessentity BASE TABLE adventureworks person businessentityaddress BASE TABLE adventureworks person businessentitycontact BASE TABLE adventureworks person contacttype BASE TABLE adventureworks person countryregion BASE TABLE adventureworks sales countryregioncurrency BASE TABLE adventureworks sales creditcard BASE TABLE adventureworks production culture BASE TABLE adventureworks sales currency BASE TABLE adventureworks sales currencyrate BASE TABLE adventureworks sales customer BASE TABLE adventureworks humanresources department BASE TABLE adventureworks production document BASE TABLE adventureworks person emailaddress BASE TABLE adventureworks humanresources employee BASE TABLE adventureworks humanresources employeedepartmenthistory BASE TABLE adventureworks humanresources employeepayhistory BASE TABLE adventureworks production illustration BASE TABLE adventureworks humanresources jobcandidate BASE TABLE adventureworks production location BASE TABLE adventureworks person password BASE TABLE adventureworks person person BASE TABLE adventureworks sales personcreditcard BASE TABLE adventureworks person personphone BASE TABLE adventureworks person phonenumbertype BASE TABLE adventureworks production product BASE TABLE adventureworks production productcategory BASE TABLE adventureworks production productcosthistory BASE TABLE adventureworks production productdescription BASE TABLE adventureworks production productdocument BASE TABLE adventureworks production productinventory BASE TABLE adventureworks production productlistpricehistory BASE TABLE adventureworks production productmodel BASE TABLE adventureworks production productmodelillustration BASE TABLE adventureworks production productmodelproductdescriptionculture BASE TABLE adventureworks production productphoto BASE TABLE adventureworks production productproductphoto BASE TABLE adventureworks production productreview BASE TABLE adventureworks production productsubcategory BASE TABLE adventureworks purchasing productvendor BASE TABLE adventureworks purchasing purchaseorderdetail BASE TABLE adventureworks purchasing purchaseorderheader BASE TABLE adventureworks sales salesorderdetail BASE TABLE adventureworks sales salesorderheader BASE TABLE adventureworks sales salesorderheadersalesreason BASE TABLE adventureworks sales salesperson BASE TABLE adventureworks sales salespersonquotahistory BASE TABLE adventureworks sales salesreason BASE TABLE adventureworks sales salestaxrate BASE TABLE adventureworks sales salesterritory BASE TABLE adventureworks sales salesterritoryhistory BASE TABLE adventureworks production scrapreason BASE TABLE adventureworks humanresources shift BASE TABLE adventureworks purchasing shipmethod BASE TABLE adventureworks sales shoppingcartitem BASE TABLE adventureworks sales specialoffer BASE TABLE adventureworks sales specialofferproduct BASE TABLE adventureworks person stateprovince BASE TABLE adventureworks sales store BASE TABLE adventureworks production transactionhistory BASE TABLE adventureworks production transactionhistoryarchive BASE TABLE adventureworks production unitmeasure BASE TABLE adventureworks purchasing vendor BASE TABLE adventureworks production workorder BASE TABLE adventureworks production workorderrouting BASE TABLE adventureworks pe a VIEW adventureworks pe at VIEW adventureworks pe be VIEW adventureworks pe bea VIEW adventureworks pe bec VIEW adventureworks pr bom VIEW adventureworks pr c VIEW adventureworks sa c VIEW adventureworks sa cc VIEW adventureworks sa cr VIEW adventureworks pe cr VIEW adventureworks sa crc VIEW adventureworks pe ct VIEW adventureworks sa cu VIEW adventureworks hr d VIEW adventureworks pr d VIEW adventureworks pe e VIEW adventureworks hr e VIEW adventureworks hr edh VIEW adventureworks hr eph VIEW adventureworks pr i VIEW adventureworks hr jc VIEW adventureworks pr l VIEW adventureworks pr p VIEW adventureworks pe p VIEW adventureworks pe pa VIEW adventureworks pr pc VIEW adventureworks sa pcc VIEW adventureworks pr pch VIEW adventureworks pr pd VIEW adventureworks pr pdoc VIEW adventureworks pr pi VIEW adventureworks pr plph VIEW adventureworks pr pm VIEW adventureworks pr pmi VIEW adventureworks pr pmpdc VIEW adventureworks pe pnt VIEW adventureworks pu pod VIEW adventureworks pu poh VIEW adventureworks pr pp VIEW adventureworks pe pp VIEW adventureworks pr ppp VIEW adventureworks pr pr VIEW adventureworks pr psc VIEW adventureworks pu pv VIEW adventureworks hr s VIEW adventureworks sa s VIEW adventureworks sa sci VIEW adventureworks pu sm VIEW adventureworks sa so VIEW adventureworks sa sod VIEW adventureworks sa soh VIEW adventureworks sa sohsr VIEW adventureworks sa sop VIEW adventureworks pe sp VIEW adventureworks sa sp VIEW adventureworks sa spqh VIEW adventureworks pr sr VIEW adventureworks sa sr VIEW adventureworks sa st VIEW adventureworks sa sth VIEW adventureworks pr th VIEW adventureworks pr tha VIEW adventureworks sa tr VIEW adventureworks pr um VIEW adventureworks pu v VIEW adventureworks person vadditionalcontactinfo VIEW adventureworks humanresources vemployee VIEW adventureworks humanresources vemployeedepartment VIEW adventureworks humanresources vemployeedepartmenthistory VIEW adventureworks sales vindividualcustomer VIEW adventureworks humanresources vjobcandidate VIEW adventureworks humanresources vjobcandidateeducation VIEW adventureworks humanresources vjobcandidateemployment VIEW adventureworks sales vpersondemographics VIEW adventureworks production vproductmodelcatalogdescription VIEW adventureworks production vproductmodelinstructions VIEW adventureworks sales vsalesperson VIEW adventureworks sales vsalespersonsalesbyfiscalyears VIEW adventureworks sales vsalespersonsalesbyfiscalyearsdata VIEW adventureworks sales vstorewithaddresses VIEW adventureworks sales vstorewithcontacts VIEW adventureworks sales vstorewithdemographics VIEW adventureworks purchasing vvendorwithaddresses VIEW adventureworks purchasing vvendorwithcontacts VIEW adventureworks pr w VIEW adventureworks pr wr VIEW 13.2 What columns do those tables contain? Of course, the DBI package has a dbListFields function that provides the simplest way to get the minimum, a list of column names: # DBI::dbListFields(con, &quot;rental&quot;) But the information_schema has a lot more useful information that we can use. columns_info_schema_table &lt;- tbl(con, dbplyr::in_schema(&quot;information_schema&quot;, &quot;columns&quot;)) Since the information_schema contains 2961 columns, we are narrowing our focus to just one table. This query retrieves more information about the rental table: columns_info_schema_info &lt;- columns_info_schema_table %&gt;% # filter(table_schema == &quot;public&quot;) %&gt;% select( table_catalog, table_schema, table_name, column_name, data_type, ordinal_position, character_maximum_length, column_default, numeric_precision, numeric_precision_radix ) %&gt;% collect(n = Inf) %&gt;% mutate(data_type = case_when( data_type == &quot;character varying&quot; ~ paste0(data_type, &quot; (&quot;, character_maximum_length, &quot;)&quot;), data_type == &quot;real&quot; ~ paste0(data_type, &quot; (&quot;, numeric_precision, &quot;,&quot;, numeric_precision_radix, &quot;)&quot;), TRUE ~ data_type )) %&gt;% # filter(table_name == &quot;rental&quot;) %&gt;% select(-table_schema, -numeric_precision, -numeric_precision_radix) glimpse(columns_info_schema_info) ## Observations: 2,961 ## Variables: 7 ## $ table_catalog &lt;chr&gt; &quot;adventureworks&quot;, &quot;adventureworks&quot;, &quot;ad… ## $ table_name &lt;chr&gt; &quot;pg_proc&quot;, &quot;pg_proc&quot;, &quot;pg_proc&quot;, &quot;pg_pr… ## $ column_name &lt;chr&gt; &quot;proname&quot;, &quot;pronamespace&quot;, &quot;proowner&quot;, … ## $ data_type &lt;chr&gt; &quot;name&quot;, &quot;oid&quot;, &quot;oid&quot;, &quot;oid&quot;, &quot;real (24,… ## $ ordinal_position &lt;int&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, … ## $ character_maximum_length &lt;int&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,… ## $ column_default &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,… kable(columns_info_schema_info) table_catalog table_name column_name data_type ordinal_position character_maximum_length column_default adventureworks pg_proc proname name 1 NA NA adventureworks pg_proc pronamespace oid 2 NA NA adventureworks pg_proc proowner oid 3 NA NA adventureworks pg_proc prolang oid 4 NA NA adventureworks pg_proc procost real (24,2) 5 NA NA adventureworks pg_proc prorows real (24,2) 6 NA NA adventureworks pg_proc provariadic oid 7 NA NA adventureworks pg_proc protransform regproc 8 NA NA adventureworks pg_proc prokind “char” 9 NA NA adventureworks pg_proc prosecdef boolean 10 NA NA adventureworks pg_proc proleakproof boolean 11 NA NA adventureworks pg_proc proisstrict boolean 12 NA NA adventureworks pg_proc proretset boolean 13 NA NA adventureworks pg_proc provolatile “char” 14 NA NA adventureworks pg_proc proparallel “char” 15 NA NA adventureworks pg_proc pronargs smallint 16 NA NA adventureworks pg_proc pronargdefaults smallint 17 NA NA adventureworks pg_proc prorettype oid 18 NA NA adventureworks pg_proc proargtypes ARRAY 19 NA NA adventureworks pg_proc proallargtypes ARRAY 20 NA NA adventureworks pg_proc proargmodes ARRAY 21 NA NA adventureworks pg_proc proargnames ARRAY 22 NA NA adventureworks pg_proc proargdefaults pg_node_tree 23 NA NA adventureworks pg_proc protrftypes ARRAY 24 NA NA adventureworks pg_proc prosrc text 25 NA NA adventureworks pg_proc probin text 26 NA NA adventureworks pg_proc proconfig ARRAY 27 NA NA adventureworks pg_proc proacl ARRAY 28 NA NA adventureworks pg_type typname name 1 NA NA adventureworks pg_type typnamespace oid 2 NA NA adventureworks pg_type typowner oid 3 NA NA adventureworks pg_type typlen smallint 4 NA NA adventureworks pg_type typbyval boolean 5 NA NA adventureworks pg_type typtype “char” 6 NA NA adventureworks pg_type typcategory “char” 7 NA NA adventureworks pg_type typispreferred boolean 8 NA NA adventureworks pg_type typisdefined boolean 9 NA NA adventureworks pg_type typdelim “char” 10 NA NA adventureworks pg_type typrelid oid 11 NA NA adventureworks pg_type typelem oid 12 NA NA adventureworks pg_type typarray oid 13 NA NA adventureworks pg_type typinput regproc 14 NA NA adventureworks pg_type typoutput regproc 15 NA NA adventureworks pg_type typreceive regproc 16 NA NA adventureworks pg_type typsend regproc 17 NA NA adventureworks pg_type typmodin regproc 18 NA NA adventureworks pg_type typmodout regproc 19 NA NA adventureworks pg_type typanalyze regproc 20 NA NA adventureworks pg_type typalign “char” 21 NA NA adventureworks pg_type typstorage “char” 22 NA NA adventureworks pg_type typnotnull boolean 23 NA NA adventureworks pg_type typbasetype oid 24 NA NA adventureworks pg_type typtypmod integer 25 NA NA adventureworks pg_type typndims integer 26 NA NA adventureworks pg_type typcollation oid 27 NA NA adventureworks pg_type typdefaultbin pg_node_tree 28 NA NA adventureworks pg_type typdefault text 29 NA NA adventureworks pg_type typacl ARRAY 30 NA NA adventureworks pg_attribute attrelid oid 1 NA NA adventureworks pg_attribute attname name 2 NA NA adventureworks pg_attribute atttypid oid 3 NA NA adventureworks pg_attribute attstattarget integer 4 NA NA adventureworks pg_attribute attlen smallint 5 NA NA adventureworks pg_attribute attnum smallint 6 NA NA adventureworks pg_attribute attndims integer 7 NA NA adventureworks pg_attribute attcacheoff integer 8 NA NA adventureworks pg_attribute atttypmod integer 9 NA NA adventureworks pg_attribute attbyval boolean 10 NA NA adventureworks pg_attribute attstorage “char” 11 NA NA adventureworks pg_attribute attalign “char” 12 NA NA adventureworks pg_attribute attnotnull boolean 13 NA NA adventureworks pg_attribute atthasdef boolean 14 NA NA adventureworks pg_attribute atthasmissing boolean 15 NA NA adventureworks pg_attribute attidentity “char” 16 NA NA adventureworks pg_attribute attisdropped boolean 17 NA NA adventureworks pg_attribute attislocal boolean 18 NA NA adventureworks pg_attribute attinhcount integer 19 NA NA adventureworks pg_attribute attcollation oid 20 NA NA adventureworks pg_attribute attacl ARRAY 21 NA NA adventureworks pg_attribute attoptions ARRAY 22 NA NA adventureworks pg_attribute attfdwoptions ARRAY 23 NA NA adventureworks pg_attribute attmissingval anyarray 24 NA NA adventureworks pg_class relname name 1 NA NA adventureworks pg_class relnamespace oid 2 NA NA adventureworks pg_class reltype oid 3 NA NA adventureworks pg_class reloftype oid 4 NA NA adventureworks pg_class relowner oid 5 NA NA adventureworks pg_class relam oid 6 NA NA adventureworks pg_class relfilenode oid 7 NA NA adventureworks pg_class reltablespace oid 8 NA NA adventureworks pg_class relpages integer 9 NA NA adventureworks pg_class reltuples real (24,2) 10 NA NA adventureworks pg_class relallvisible integer 11 NA NA adventureworks pg_class reltoastrelid oid 12 NA NA adventureworks pg_class relhasindex boolean 13 NA NA adventureworks pg_class relisshared boolean 14 NA NA adventureworks pg_class relpersistence “char” 15 NA NA adventureworks pg_class relkind “char” 16 NA NA adventureworks pg_class relnatts smallint 17 NA NA adventureworks pg_class relchecks smallint 18 NA NA adventureworks pg_class relhasoids boolean 19 NA NA adventureworks pg_class relhasrules boolean 20 NA NA adventureworks pg_class relhastriggers boolean 21 NA NA adventureworks pg_class relhassubclass boolean 22 NA NA adventureworks pg_class relrowsecurity boolean 23 NA NA adventureworks pg_class relforcerowsecurity boolean 24 NA NA adventureworks pg_class relispopulated boolean 25 NA NA adventureworks pg_class relreplident “char” 26 NA NA adventureworks pg_class relispartition boolean 27 NA NA adventureworks pg_class relrewrite oid 28 NA NA adventureworks pg_class relfrozenxid xid 29 NA NA adventureworks pg_class relminmxid xid 30 NA NA adventureworks pg_class relacl ARRAY 31 NA NA adventureworks pg_class reloptions ARRAY 32 NA NA adventureworks pg_class relpartbound pg_node_tree 33 NA NA adventureworks pg_attrdef adrelid oid 1 NA NA adventureworks pg_attrdef adnum smallint 2 NA NA adventureworks pg_attrdef adbin pg_node_tree 3 NA NA adventureworks pg_attrdef adsrc text 4 NA NA adventureworks pg_constraint conname name 1 NA NA adventureworks pg_constraint connamespace oid 2 NA NA adventureworks pg_constraint contype “char” 3 NA NA adventureworks pg_constraint condeferrable boolean 4 NA NA adventureworks pg_constraint condeferred boolean 5 NA NA adventureworks pg_constraint convalidated boolean 6 NA NA adventureworks pg_constraint conrelid oid 7 NA NA adventureworks pg_constraint contypid oid 8 NA NA adventureworks pg_constraint conindid oid 9 NA NA adventureworks pg_constraint conparentid oid 10 NA NA adventureworks pg_constraint confrelid oid 11 NA NA adventureworks pg_constraint confupdtype “char” 12 NA NA adventureworks pg_constraint confdeltype “char” 13 NA NA adventureworks pg_constraint confmatchtype “char” 14 NA NA adventureworks pg_constraint conislocal boolean 15 NA NA adventureworks pg_constraint coninhcount integer 16 NA NA adventureworks pg_constraint connoinherit boolean 17 NA NA adventureworks pg_constraint conkey ARRAY 18 NA NA adventureworks pg_constraint confkey ARRAY 19 NA NA adventureworks pg_constraint conpfeqop ARRAY 20 NA NA adventureworks pg_constraint conppeqop ARRAY 21 NA NA adventureworks pg_constraint conffeqop ARRAY 22 NA NA adventureworks pg_constraint conexclop ARRAY 23 NA NA adventureworks pg_constraint conbin pg_node_tree 24 NA NA adventureworks pg_constraint consrc text 25 NA NA adventureworks pg_inherits inhrelid oid 1 NA NA adventureworks pg_inherits inhparent oid 2 NA NA adventureworks pg_inherits inhseqno integer 3 NA NA adventureworks pg_index indexrelid oid 1 NA NA adventureworks pg_index indrelid oid 2 NA NA adventureworks pg_index indnatts smallint 3 NA NA adventureworks pg_index indnkeyatts smallint 4 NA NA adventureworks pg_index indisunique boolean 5 NA NA adventureworks pg_index indisprimary boolean 6 NA NA adventureworks pg_index indisexclusion boolean 7 NA NA adventureworks pg_index indimmediate boolean 8 NA NA adventureworks pg_index indisclustered boolean 9 NA NA adventureworks pg_index indisvalid boolean 10 NA NA adventureworks pg_index indcheckxmin boolean 11 NA NA adventureworks pg_index indisready boolean 12 NA NA adventureworks pg_index indislive boolean 13 NA NA adventureworks pg_index indisreplident boolean 14 NA NA adventureworks pg_index indkey ARRAY 15 NA NA adventureworks pg_index indcollation ARRAY 16 NA NA adventureworks pg_index indclass ARRAY 17 NA NA adventureworks pg_index indoption ARRAY 18 NA NA adventureworks pg_index indexprs pg_node_tree 19 NA NA adventureworks pg_index indpred pg_node_tree 20 NA NA adventureworks pg_operator oprname name 1 NA NA adventureworks pg_operator oprnamespace oid 2 NA NA adventureworks pg_operator oprowner oid 3 NA NA adventureworks pg_operator oprkind “char” 4 NA NA adventureworks pg_operator oprcanmerge boolean 5 NA NA adventureworks pg_operator oprcanhash boolean 6 NA NA adventureworks pg_operator oprleft oid 7 NA NA adventureworks pg_operator oprright oid 8 NA NA adventureworks pg_operator oprresult oid 9 NA NA adventureworks pg_operator oprcom oid 10 NA NA adventureworks pg_operator oprnegate oid 11 NA NA adventureworks pg_operator oprcode regproc 12 NA NA adventureworks pg_operator oprrest regproc 13 NA NA adventureworks pg_operator oprjoin regproc 14 NA NA adventureworks pg_opfamily opfmethod oid 1 NA NA adventureworks pg_opfamily opfname name 2 NA NA adventureworks pg_opfamily opfnamespace oid 3 NA NA adventureworks pg_opfamily opfowner oid 4 NA NA adventureworks pg_opclass opcmethod oid 1 NA NA adventureworks pg_opclass opcname name 2 NA NA adventureworks pg_opclass opcnamespace oid 3 NA NA adventureworks pg_opclass opcowner oid 4 NA NA adventureworks pg_opclass opcfamily oid 5 NA NA adventureworks pg_opclass opcintype oid 6 NA NA adventureworks pg_opclass opcdefault boolean 7 NA NA adventureworks pg_opclass opckeytype oid 8 NA NA adventureworks pg_am amname name 1 NA NA adventureworks pg_am amhandler regproc 2 NA NA adventureworks pg_am amtype “char” 3 NA NA adventureworks pg_amop amopfamily oid 1 NA NA adventureworks pg_amop amoplefttype oid 2 NA NA adventureworks pg_amop amoprighttype oid 3 NA NA adventureworks pg_amop amopstrategy smallint 4 NA NA adventureworks pg_amop amoppurpose “char” 5 NA NA adventureworks pg_amop amopopr oid 6 NA NA adventureworks pg_amop amopmethod oid 7 NA NA adventureworks pg_amop amopsortfamily oid 8 NA NA adventureworks pg_amproc amprocfamily oid 1 NA NA adventureworks pg_amproc amproclefttype oid 2 NA NA adventureworks pg_amproc amprocrighttype oid 3 NA NA adventureworks pg_amproc amprocnum smallint 4 NA NA adventureworks pg_amproc amproc regproc 5 NA NA adventureworks pg_language lanname name 1 NA NA adventureworks pg_language lanowner oid 2 NA NA adventureworks pg_language lanispl boolean 3 NA NA adventureworks pg_language lanpltrusted boolean 4 NA NA adventureworks pg_language lanplcallfoid oid 5 NA NA adventureworks pg_language laninline oid 6 NA NA adventureworks pg_language lanvalidator oid 7 NA NA adventureworks pg_language lanacl ARRAY 8 NA NA adventureworks pg_largeobject_metadata lomowner oid 1 NA NA adventureworks pg_largeobject_metadata lomacl ARRAY 2 NA NA adventureworks pg_largeobject loid oid 1 NA NA adventureworks pg_largeobject pageno integer 2 NA NA adventureworks pg_largeobject data bytea 3 NA NA adventureworks pg_aggregate aggfnoid regproc 1 NA NA adventureworks pg_aggregate aggkind “char” 2 NA NA adventureworks pg_aggregate aggnumdirectargs smallint 3 NA NA adventureworks pg_aggregate aggtransfn regproc 4 NA NA adventureworks pg_aggregate aggfinalfn regproc 5 NA NA adventureworks pg_aggregate aggcombinefn regproc 6 NA NA adventureworks pg_aggregate aggserialfn regproc 7 NA NA adventureworks pg_aggregate aggdeserialfn regproc 8 NA NA adventureworks pg_aggregate aggmtransfn regproc 9 NA NA adventureworks pg_aggregate aggminvtransfn regproc 10 NA NA adventureworks pg_aggregate aggmfinalfn regproc 11 NA NA adventureworks pg_aggregate aggfinalextra boolean 12 NA NA adventureworks pg_aggregate aggmfinalextra boolean 13 NA NA adventureworks pg_aggregate aggfinalmodify “char” 14 NA NA adventureworks pg_aggregate aggmfinalmodify “char” 15 NA NA adventureworks pg_aggregate aggsortop oid 16 NA NA adventureworks pg_aggregate aggtranstype oid 17 NA NA adventureworks pg_aggregate aggtransspace integer 18 NA NA adventureworks pg_aggregate aggmtranstype oid 19 NA NA adventureworks pg_aggregate aggmtransspace integer 20 NA NA adventureworks pg_aggregate agginitval text 21 NA NA adventureworks pg_aggregate aggminitval text 22 NA NA adventureworks pg_statistic_ext stxrelid oid 1 NA NA adventureworks pg_statistic_ext stxname name 2 NA NA adventureworks pg_statistic_ext stxnamespace oid 3 NA NA adventureworks pg_statistic_ext stxowner oid 4 NA NA adventureworks pg_statistic_ext stxkeys ARRAY 5 NA NA adventureworks pg_statistic_ext stxkind ARRAY 6 NA NA adventureworks pg_statistic_ext stxndistinct pg_ndistinct 7 NA NA adventureworks pg_statistic_ext stxdependencies pg_dependencies 8 NA NA adventureworks pg_statistic starelid oid 1 NA NA adventureworks pg_statistic staattnum smallint 2 NA NA adventureworks pg_statistic stainherit boolean 3 NA NA adventureworks pg_statistic stanullfrac real (24,2) 4 NA NA adventureworks pg_statistic stawidth integer 5 NA NA adventureworks pg_statistic stadistinct real (24,2) 6 NA NA adventureworks pg_statistic stakind1 smallint 7 NA NA adventureworks pg_statistic stakind2 smallint 8 NA NA adventureworks pg_statistic stakind3 smallint 9 NA NA adventureworks pg_statistic stakind4 smallint 10 NA NA adventureworks pg_statistic stakind5 smallint 11 NA NA adventureworks pg_statistic staop1 oid 12 NA NA adventureworks pg_statistic staop2 oid 13 NA NA adventureworks pg_statistic staop3 oid 14 NA NA adventureworks pg_statistic staop4 oid 15 NA NA adventureworks pg_statistic staop5 oid 16 NA NA adventureworks pg_statistic stanumbers1 ARRAY 17 NA NA adventureworks pg_statistic stanumbers2 ARRAY 18 NA NA adventureworks pg_statistic stanumbers3 ARRAY 19 NA NA adventureworks pg_statistic stanumbers4 ARRAY 20 NA NA adventureworks pg_statistic stanumbers5 ARRAY 21 NA NA adventureworks pg_statistic stavalues1 anyarray 22 NA NA adventureworks pg_statistic stavalues2 anyarray 23 NA NA adventureworks pg_statistic stavalues3 anyarray 24 NA NA adventureworks pg_statistic stavalues4 anyarray 25 NA NA adventureworks pg_statistic stavalues5 anyarray 26 NA NA adventureworks pg_rewrite rulename name 1 NA NA adventureworks pg_rewrite ev_class oid 2 NA NA adventureworks pg_rewrite ev_type “char” 3 NA NA adventureworks pg_rewrite ev_enabled “char” 4 NA NA adventureworks pg_rewrite is_instead boolean 5 NA NA adventureworks pg_rewrite ev_qual pg_node_tree 6 NA NA adventureworks pg_rewrite ev_action pg_node_tree 7 NA NA adventureworks pg_trigger tgrelid oid 1 NA NA adventureworks pg_trigger tgname name 2 NA NA adventureworks pg_trigger tgfoid oid 3 NA NA adventureworks pg_trigger tgtype smallint 4 NA NA adventureworks pg_trigger tgenabled “char” 5 NA NA adventureworks pg_trigger tgisinternal boolean 6 NA NA adventureworks pg_trigger tgconstrrelid oid 7 NA NA adventureworks pg_trigger tgconstrindid oid 8 NA NA adventureworks pg_trigger tgconstraint oid 9 NA NA adventureworks pg_trigger tgdeferrable boolean 10 NA NA adventureworks pg_trigger tginitdeferred boolean 11 NA NA adventureworks pg_trigger tgnargs smallint 12 NA NA adventureworks pg_trigger tgattr ARRAY 13 NA NA adventureworks pg_trigger tgargs bytea 14 NA NA adventureworks pg_trigger tgqual pg_node_tree 15 NA NA adventureworks pg_trigger tgoldtable name 16 NA NA adventureworks pg_trigger tgnewtable name 17 NA NA adventureworks pg_event_trigger evtname name 1 NA NA adventureworks pg_event_trigger evtevent name 2 NA NA adventureworks pg_event_trigger evtowner oid 3 NA NA adventureworks pg_event_trigger evtfoid oid 4 NA NA adventureworks pg_event_trigger evtenabled “char” 5 NA NA adventureworks pg_event_trigger evttags ARRAY 6 NA NA adventureworks pg_description objoid oid 1 NA NA adventureworks pg_description classoid oid 2 NA NA adventureworks pg_description objsubid integer 3 NA NA adventureworks pg_description description text 4 NA NA adventureworks pg_cast castsource oid 1 NA NA adventureworks pg_cast casttarget oid 2 NA NA adventureworks pg_cast castfunc oid 3 NA NA adventureworks pg_cast castcontext “char” 4 NA NA adventureworks pg_cast castmethod “char” 5 NA NA adventureworks pg_enum enumtypid oid 1 NA NA adventureworks pg_enum enumsortorder real (24,2) 2 NA NA adventureworks pg_enum enumlabel name 3 NA NA adventureworks pg_namespace nspname name 1 NA NA adventureworks pg_namespace nspowner oid 2 NA NA adventureworks pg_namespace nspacl ARRAY 3 NA NA adventureworks pg_conversion conname name 1 NA NA adventureworks pg_conversion connamespace oid 2 NA NA adventureworks pg_conversion conowner oid 3 NA NA adventureworks pg_conversion conforencoding integer 4 NA NA adventureworks pg_conversion contoencoding integer 5 NA NA adventureworks pg_conversion conproc regproc 6 NA NA adventureworks pg_conversion condefault boolean 7 NA NA adventureworks pg_depend classid oid 1 NA NA adventureworks pg_depend objid oid 2 NA NA adventureworks pg_depend objsubid integer 3 NA NA adventureworks pg_depend refclassid oid 4 NA NA adventureworks pg_depend refobjid oid 5 NA NA adventureworks pg_depend refobjsubid integer 6 NA NA adventureworks pg_depend deptype “char” 7 NA NA adventureworks pg_database datname name 1 NA NA adventureworks pg_database datdba oid 2 NA NA adventureworks pg_database encoding integer 3 NA NA adventureworks pg_database datcollate name 4 NA NA adventureworks pg_database datctype name 5 NA NA adventureworks pg_database datistemplate boolean 6 NA NA adventureworks pg_database datallowconn boolean 7 NA NA adventureworks pg_database datconnlimit integer 8 NA NA adventureworks pg_database datlastsysoid oid 9 NA NA adventureworks pg_database datfrozenxid xid 10 NA NA adventureworks pg_database datminmxid xid 11 NA NA adventureworks pg_database dattablespace oid 12 NA NA adventureworks pg_database datacl ARRAY 13 NA NA adventureworks pg_db_role_setting setdatabase oid 1 NA NA adventureworks pg_db_role_setting setrole oid 2 NA NA adventureworks pg_db_role_setting setconfig ARRAY 3 NA NA adventureworks pg_tablespace spcname name 1 NA NA adventureworks pg_tablespace spcowner oid 2 NA NA adventureworks pg_tablespace spcacl ARRAY 3 NA NA adventureworks pg_tablespace spcoptions ARRAY 4 NA NA adventureworks pg_pltemplate tmplname name 1 NA NA adventureworks pg_pltemplate tmpltrusted boolean 2 NA NA adventureworks pg_pltemplate tmpldbacreate boolean 3 NA NA adventureworks pg_pltemplate tmplhandler text 4 NA NA adventureworks pg_pltemplate tmplinline text 5 NA NA adventureworks pg_pltemplate tmplvalidator text 6 NA NA adventureworks pg_pltemplate tmpllibrary text 7 NA NA adventureworks pg_pltemplate tmplacl ARRAY 8 NA NA adventureworks pg_authid rolname name 1 NA NA adventureworks pg_authid rolsuper boolean 2 NA NA adventureworks pg_authid rolinherit boolean 3 NA NA adventureworks pg_authid rolcreaterole boolean 4 NA NA adventureworks pg_authid rolcreatedb boolean 5 NA NA adventureworks pg_authid rolcanlogin boolean 6 NA NA adventureworks pg_authid rolreplication boolean 7 NA NA adventureworks pg_authid rolbypassrls boolean 8 NA NA adventureworks pg_authid rolconnlimit integer 9 NA NA adventureworks pg_authid rolpassword text 10 NA NA adventureworks pg_authid rolvaliduntil timestamp with time zone 11 NA NA adventureworks pg_auth_members roleid oid 1 NA NA adventureworks pg_auth_members member oid 2 NA NA adventureworks pg_auth_members grantor oid 3 NA NA adventureworks pg_auth_members admin_option boolean 4 NA NA adventureworks pg_shdepend dbid oid 1 NA NA adventureworks pg_shdepend classid oid 2 NA NA adventureworks pg_shdepend objid oid 3 NA NA adventureworks pg_shdepend objsubid integer 4 NA NA adventureworks pg_shdepend refclassid oid 5 NA NA adventureworks pg_shdepend refobjid oid 6 NA NA adventureworks pg_shdepend deptype “char” 7 NA NA adventureworks pg_shdescription objoid oid 1 NA NA adventureworks pg_shdescription classoid oid 2 NA NA adventureworks pg_shdescription description text 3 NA NA adventureworks pg_ts_config cfgname name 1 NA NA adventureworks pg_ts_config cfgnamespace oid 2 NA NA adventureworks pg_ts_config cfgowner oid 3 NA NA adventureworks pg_ts_config cfgparser oid 4 NA NA adventureworks pg_ts_config_map mapcfg oid 1 NA NA adventureworks pg_ts_config_map maptokentype integer 2 NA NA adventureworks pg_ts_config_map mapseqno integer 3 NA NA adventureworks pg_ts_config_map mapdict oid 4 NA NA adventureworks pg_ts_dict dictname name 1 NA NA adventureworks pg_ts_dict dictnamespace oid 2 NA NA adventureworks pg_ts_dict dictowner oid 3 NA NA adventureworks pg_ts_dict dicttemplate oid 4 NA NA adventureworks pg_ts_dict dictinitoption text 5 NA NA adventureworks pg_ts_parser prsname name 1 NA NA adventureworks pg_ts_parser prsnamespace oid 2 NA NA adventureworks pg_ts_parser prsstart regproc 3 NA NA adventureworks pg_ts_parser prstoken regproc 4 NA NA adventureworks pg_ts_parser prsend regproc 5 NA NA adventureworks pg_ts_parser prsheadline regproc 6 NA NA adventureworks pg_ts_parser prslextype regproc 7 NA NA adventureworks pg_ts_template tmplname name 1 NA NA adventureworks pg_ts_template tmplnamespace oid 2 NA NA adventureworks pg_ts_template tmplinit regproc 3 NA NA adventureworks pg_ts_template tmpllexize regproc 4 NA NA adventureworks pg_extension extname name 1 NA NA adventureworks pg_extension extowner oid 2 NA NA adventureworks pg_extension extnamespace oid 3 NA NA adventureworks pg_extension extrelocatable boolean 4 NA NA adventureworks pg_extension extversion text 5 NA NA adventureworks pg_extension extconfig ARRAY 6 NA NA adventureworks pg_extension extcondition ARRAY 7 NA NA adventureworks pg_foreign_data_wrapper fdwname name 1 NA NA adventureworks pg_foreign_data_wrapper fdwowner oid 2 NA NA adventureworks pg_foreign_data_wrapper fdwhandler oid 3 NA NA adventureworks pg_foreign_data_wrapper fdwvalidator oid 4 NA NA adventureworks pg_foreign_data_wrapper fdwacl ARRAY 5 NA NA adventureworks pg_foreign_data_wrapper fdwoptions ARRAY 6 NA NA adventureworks pg_foreign_server srvname name 1 NA NA adventureworks pg_foreign_server srvowner oid 2 NA NA adventureworks pg_foreign_server srvfdw oid 3 NA NA adventureworks pg_foreign_server srvtype text 4 NA NA adventureworks pg_foreign_server srvversion text 5 NA NA adventureworks pg_foreign_server srvacl ARRAY 6 NA NA adventureworks pg_foreign_server srvoptions ARRAY 7 NA NA adventureworks pg_user_mapping umuser oid 1 NA NA adventureworks pg_user_mapping umserver oid 2 NA NA adventureworks pg_user_mapping umoptions ARRAY 3 NA NA adventureworks pg_foreign_table ftrelid oid 1 NA NA adventureworks pg_foreign_table ftserver oid 2 NA NA adventureworks pg_foreign_table ftoptions ARRAY 3 NA NA adventureworks pg_policy polname name 1 NA NA adventureworks pg_policy polrelid oid 2 NA NA adventureworks pg_policy polcmd “char” 3 NA NA adventureworks pg_policy polpermissive boolean 4 NA NA adventureworks pg_policy polroles ARRAY 5 NA NA adventureworks pg_policy polqual pg_node_tree 6 NA NA adventureworks pg_policy polwithcheck pg_node_tree 7 NA NA adventureworks pg_replication_origin roident oid 1 NA NA adventureworks pg_replication_origin roname text 2 NA NA adventureworks pg_default_acl defaclrole oid 1 NA NA adventureworks pg_default_acl defaclnamespace oid 2 NA NA adventureworks pg_default_acl defaclobjtype “char” 3 NA NA adventureworks pg_default_acl defaclacl ARRAY 4 NA NA adventureworks pg_init_privs objoid oid 1 NA NA adventureworks pg_init_privs classoid oid 2 NA NA adventureworks pg_init_privs objsubid integer 3 NA NA adventureworks pg_init_privs privtype “char” 4 NA NA adventureworks pg_init_privs initprivs ARRAY 5 NA NA adventureworks pg_seclabel objoid oid 1 NA NA adventureworks pg_seclabel classoid oid 2 NA NA adventureworks pg_seclabel objsubid integer 3 NA NA adventureworks pg_seclabel provider text 4 NA NA adventureworks pg_seclabel label text 5 NA NA adventureworks pg_shseclabel objoid oid 1 NA NA adventureworks pg_shseclabel classoid oid 2 NA NA adventureworks pg_shseclabel provider text 3 NA NA adventureworks pg_shseclabel label text 4 NA NA adventureworks pg_collation collname name 1 NA NA adventureworks pg_collation collnamespace oid 2 NA NA adventureworks pg_collation collowner oid 3 NA NA adventureworks pg_collation collprovider “char” 4 NA NA adventureworks pg_collation collencoding integer 5 NA NA adventureworks pg_collation collcollate name 6 NA NA adventureworks pg_collation collctype name 7 NA NA adventureworks pg_collation collversion text 8 NA NA adventureworks pg_partitioned_table partrelid oid 1 NA NA adventureworks pg_partitioned_table partstrat “char” 2 NA NA adventureworks pg_partitioned_table partnatts smallint 3 NA NA adventureworks pg_partitioned_table partdefid oid 4 NA NA adventureworks pg_partitioned_table partattrs ARRAY 5 NA NA adventureworks pg_partitioned_table partclass ARRAY 6 NA NA adventureworks pg_partitioned_table partcollation ARRAY 7 NA NA adventureworks pg_partitioned_table partexprs pg_node_tree 8 NA NA adventureworks pg_range rngtypid oid 1 NA NA adventureworks pg_range rngsubtype oid 2 NA NA adventureworks pg_range rngcollation oid 3 NA NA adventureworks pg_range rngsubopc oid 4 NA NA adventureworks pg_range rngcanonical regproc 5 NA NA adventureworks pg_range rngsubdiff regproc 6 NA NA adventureworks pg_transform trftype oid 1 NA NA adventureworks pg_transform trflang oid 2 NA NA adventureworks pg_transform trffromsql regproc 3 NA NA adventureworks pg_transform trftosql regproc 4 NA NA adventureworks pg_sequence seqrelid oid 1 NA NA adventureworks pg_sequence seqtypid oid 2 NA NA adventureworks pg_sequence seqstart bigint 3 NA NA adventureworks pg_sequence seqincrement bigint 4 NA NA adventureworks pg_sequence seqmax bigint 5 NA NA adventureworks pg_sequence seqmin bigint 6 NA NA adventureworks pg_sequence seqcache bigint 7 NA NA adventureworks pg_sequence seqcycle boolean 8 NA NA adventureworks pg_publication pubname name 1 NA NA adventureworks pg_publication pubowner oid 2 NA NA adventureworks pg_publication puballtables boolean 3 NA NA adventureworks pg_publication pubinsert boolean 4 NA NA adventureworks pg_publication pubupdate boolean 5 NA NA adventureworks pg_publication pubdelete boolean 6 NA NA adventureworks pg_publication pubtruncate boolean 7 NA NA adventureworks pg_publication_rel prpubid oid 1 NA NA adventureworks pg_publication_rel prrelid oid 2 NA NA adventureworks pg_subscription subconninfo text 5 NA NA adventureworks pg_subscription subsynccommit text 7 NA NA adventureworks pg_subscription_rel srsubid oid 1 NA NA adventureworks pg_subscription_rel srrelid oid 2 NA NA adventureworks pg_subscription_rel srsubstate “char” 3 NA NA adventureworks pg_subscription_rel srsublsn pg_lsn 4 NA NA adventureworks pg_roles rolname name 1 NA NA adventureworks pg_roles rolsuper boolean 2 NA NA adventureworks pg_roles rolinherit boolean 3 NA NA adventureworks pg_roles rolcreaterole boolean 4 NA NA adventureworks pg_roles rolcreatedb boolean 5 NA NA adventureworks pg_roles rolcanlogin boolean 6 NA NA adventureworks pg_roles rolreplication boolean 7 NA NA adventureworks pg_roles rolconnlimit integer 8 NA NA adventureworks pg_roles rolpassword text 9 NA NA adventureworks pg_roles rolvaliduntil timestamp with time zone 10 NA NA adventureworks pg_roles rolbypassrls boolean 11 NA NA adventureworks pg_roles rolconfig ARRAY 12 NA NA adventureworks pg_roles oid oid 13 NA NA adventureworks pg_shadow usename name 1 NA NA adventureworks pg_shadow usesysid oid 2 NA NA adventureworks pg_shadow usecreatedb boolean 3 NA NA adventureworks pg_shadow usesuper boolean 4 NA NA adventureworks pg_shadow userepl boolean 5 NA NA adventureworks pg_shadow usebypassrls boolean 6 NA NA adventureworks pg_shadow passwd text 7 NA NA adventureworks pg_shadow valuntil abstime 8 NA NA adventureworks pg_shadow useconfig ARRAY 9 NA NA adventureworks pg_group groname name 1 NA NA adventureworks pg_group grosysid oid 2 NA NA adventureworks pg_group grolist ARRAY 3 NA NA adventureworks pg_user usename name 1 NA NA adventureworks pg_user usesysid oid 2 NA NA adventureworks pg_user usecreatedb boolean 3 NA NA adventureworks pg_user usesuper boolean 4 NA NA adventureworks pg_user userepl boolean 5 NA NA adventureworks pg_user usebypassrls boolean 6 NA NA adventureworks pg_user passwd text 7 NA NA adventureworks pg_user valuntil abstime 8 NA NA adventureworks pg_user useconfig ARRAY 9 NA NA adventureworks pg_policies schemaname name 1 NA NA adventureworks pg_policies tablename name 2 NA NA adventureworks pg_policies policyname name 3 NA NA adventureworks pg_policies permissive text 4 NA NA adventureworks pg_policies roles ARRAY 5 NA NA adventureworks pg_policies cmd text 6 NA NA adventureworks pg_policies qual text 7 NA NA adventureworks pg_policies with_check text 8 NA NA adventureworks pg_rules schemaname name 1 NA NA adventureworks pg_rules tablename name 2 NA NA adventureworks pg_rules rulename name 3 NA NA adventureworks pg_rules definition text 4 NA NA adventureworks pg_views schemaname name 1 NA NA adventureworks pg_views viewname name 2 NA NA adventureworks pg_views viewowner name 3 NA NA adventureworks pg_views definition text 4 NA NA adventureworks pg_tables schemaname name 1 NA NA adventureworks pg_tables tablename name 2 NA NA adventureworks pg_tables tableowner name 3 NA NA adventureworks pg_tables tablespace name 4 NA NA adventureworks pg_tables hasindexes boolean 5 NA NA adventureworks pg_tables hasrules boolean 6 NA NA adventureworks pg_tables hastriggers boolean 7 NA NA adventureworks pg_tables rowsecurity boolean 8 NA NA adventureworks pg_matviews schemaname name 1 NA NA adventureworks pg_matviews matviewname name 2 NA NA adventureworks pg_matviews matviewowner name 3 NA NA adventureworks pg_matviews tablespace name 4 NA NA adventureworks pg_matviews hasindexes boolean 5 NA NA adventureworks pg_matviews ispopulated boolean 6 NA NA adventureworks pg_matviews definition text 7 NA NA adventureworks pg_indexes schemaname name 1 NA NA adventureworks pg_indexes tablename name 2 NA NA adventureworks pg_indexes indexname name 3 NA NA adventureworks pg_indexes tablespace name 4 NA NA adventureworks pg_indexes indexdef text 5 NA NA adventureworks pg_sequences schemaname name 1 NA NA adventureworks pg_sequences sequencename name 2 NA NA adventureworks pg_sequences sequenceowner name 3 NA NA adventureworks pg_sequences data_type regtype 4 NA NA adventureworks pg_sequences start_value bigint 5 NA NA adventureworks pg_sequences min_value bigint 6 NA NA adventureworks pg_sequences max_value bigint 7 NA NA adventureworks pg_sequences increment_by bigint 8 NA NA adventureworks pg_sequences cycle boolean 9 NA NA adventureworks pg_sequences cache_size bigint 10 NA NA adventureworks pg_sequences last_value bigint 11 NA NA adventureworks pg_stats schemaname name 1 NA NA adventureworks pg_stats tablename name 2 NA NA adventureworks pg_stats attname name 3 NA NA adventureworks pg_stats inherited boolean 4 NA NA adventureworks pg_stats null_frac real (24,2) 5 NA NA adventureworks pg_stats avg_width integer 6 NA NA adventureworks pg_stats n_distinct real (24,2) 7 NA NA adventureworks pg_stats most_common_vals anyarray 8 NA NA adventureworks pg_stats most_common_freqs ARRAY 9 NA NA adventureworks pg_stats histogram_bounds anyarray 10 NA NA adventureworks pg_stats correlation real (24,2) 11 NA NA adventureworks pg_stats most_common_elems anyarray 12 NA NA adventureworks pg_stats most_common_elem_freqs ARRAY 13 NA NA adventureworks pg_stats elem_count_histogram ARRAY 14 NA NA adventureworks pg_publication_tables pubname name 1 NA NA adventureworks pg_publication_tables schemaname name 2 NA NA adventureworks pg_publication_tables tablename name 3 NA NA adventureworks pg_locks locktype text 1 NA NA adventureworks pg_locks database oid 2 NA NA adventureworks pg_locks relation oid 3 NA NA adventureworks pg_locks page integer 4 NA NA adventureworks pg_locks tuple smallint 5 NA NA adventureworks pg_locks virtualxid text 6 NA NA adventureworks pg_locks transactionid xid 7 NA NA adventureworks pg_locks classid oid 8 NA NA adventureworks pg_locks objid oid 9 NA NA adventureworks pg_locks objsubid smallint 10 NA NA adventureworks pg_locks virtualtransaction text 11 NA NA adventureworks pg_locks pid integer 12 NA NA adventureworks pg_locks mode text 13 NA NA adventureworks pg_locks granted boolean 14 NA NA adventureworks pg_locks fastpath boolean 15 NA NA adventureworks pg_cursors name text 1 NA NA adventureworks pg_cursors statement text 2 NA NA adventureworks pg_cursors is_holdable boolean 3 NA NA adventureworks pg_cursors is_binary boolean 4 NA NA adventureworks pg_cursors is_scrollable boolean 5 NA NA adventureworks pg_cursors creation_time timestamp with time zone 6 NA NA adventureworks pg_available_extensions name name 1 NA NA adventureworks pg_available_extensions default_version text 2 NA NA adventureworks pg_available_extensions installed_version text 3 NA NA adventureworks pg_available_extensions comment text 4 NA NA adventureworks pg_available_extension_versions name name 1 NA NA adventureworks pg_available_extension_versions version text 2 NA NA adventureworks pg_available_extension_versions installed boolean 3 NA NA adventureworks pg_available_extension_versions superuser boolean 4 NA NA adventureworks pg_available_extension_versions relocatable boolean 5 NA NA adventureworks pg_available_extension_versions schema name 6 NA NA adventureworks pg_available_extension_versions requires ARRAY 7 NA NA adventureworks pg_available_extension_versions comment text 8 NA NA adventureworks pg_prepared_xacts transaction xid 1 NA NA adventureworks pg_prepared_xacts gid text 2 NA NA adventureworks pg_prepared_xacts prepared timestamp with time zone 3 NA NA adventureworks pg_prepared_xacts owner name 4 NA NA adventureworks pg_prepared_xacts database name 5 NA NA adventureworks pg_prepared_statements name text 1 NA NA adventureworks pg_prepared_statements statement text 2 NA NA adventureworks pg_prepared_statements prepare_time timestamp with time zone 3 NA NA adventureworks pg_prepared_statements parameter_types ARRAY 4 NA NA adventureworks pg_prepared_statements from_sql boolean 5 NA NA adventureworks pg_seclabels objoid oid 1 NA NA adventureworks pg_seclabels classoid oid 2 NA NA adventureworks pg_seclabels objsubid integer 3 NA NA adventureworks pg_seclabels objtype text 4 NA NA adventureworks pg_seclabels objnamespace oid 5 NA NA adventureworks pg_seclabels objname text 6 NA NA adventureworks pg_seclabels provider text 7 NA NA adventureworks pg_seclabels label text 8 NA NA adventureworks pg_settings name text 1 NA NA adventureworks pg_settings setting text 2 NA NA adventureworks pg_settings unit text 3 NA NA adventureworks pg_settings category text 4 NA NA adventureworks pg_settings short_desc text 5 NA NA adventureworks pg_settings extra_desc text 6 NA NA adventureworks pg_settings context text 7 NA NA adventureworks pg_settings vartype text 8 NA NA adventureworks pg_settings source text 9 NA NA adventureworks pg_settings min_val text 10 NA NA adventureworks pg_settings max_val text 11 NA NA adventureworks pg_settings enumvals ARRAY 12 NA NA adventureworks pg_settings boot_val text 13 NA NA adventureworks pg_settings reset_val text 14 NA NA adventureworks pg_settings sourcefile text 15 NA NA adventureworks pg_settings sourceline integer 16 NA NA adventureworks pg_settings pending_restart boolean 17 NA NA adventureworks pg_file_settings sourcefile text 1 NA NA adventureworks pg_file_settings sourceline integer 2 NA NA adventureworks pg_file_settings seqno integer 3 NA NA adventureworks pg_file_settings name text 4 NA NA adventureworks pg_file_settings setting text 5 NA NA adventureworks pg_file_settings applied boolean 6 NA NA adventureworks pg_file_settings error text 7 NA NA adventureworks pg_hba_file_rules line_number integer 1 NA NA adventureworks pg_hba_file_rules type text 2 NA NA adventureworks pg_hba_file_rules database ARRAY 3 NA NA adventureworks pg_hba_file_rules user_name ARRAY 4 NA NA adventureworks pg_hba_file_rules address text 5 NA NA adventureworks pg_hba_file_rules netmask text 6 NA NA adventureworks pg_hba_file_rules auth_method text 7 NA NA adventureworks pg_hba_file_rules options ARRAY 8 NA NA adventureworks pg_hba_file_rules error text 9 NA NA adventureworks pg_timezone_abbrevs abbrev text 1 NA NA adventureworks pg_timezone_abbrevs utc_offset interval 2 NA NA adventureworks pg_timezone_abbrevs is_dst boolean 3 NA NA adventureworks pg_timezone_names name text 1 NA NA adventureworks pg_timezone_names abbrev text 2 NA NA adventureworks pg_timezone_names utc_offset interval 3 NA NA adventureworks pg_timezone_names is_dst boolean 4 NA NA adventureworks pg_config name text 1 NA NA adventureworks pg_config setting text 2 NA NA adventureworks pg_stat_all_tables relid oid 1 NA NA adventureworks pg_stat_all_tables schemaname name 2 NA NA adventureworks pg_stat_all_tables relname name 3 NA NA adventureworks pg_stat_all_tables seq_scan bigint 4 NA NA adventureworks pg_stat_all_tables seq_tup_read bigint 5 NA NA adventureworks pg_stat_all_tables idx_scan bigint 6 NA NA adventureworks pg_stat_all_tables idx_tup_fetch bigint 7 NA NA adventureworks pg_stat_all_tables n_tup_ins bigint 8 NA NA adventureworks pg_stat_all_tables n_tup_upd bigint 9 NA NA adventureworks pg_stat_all_tables n_tup_del bigint 10 NA NA adventureworks pg_stat_all_tables n_tup_hot_upd bigint 11 NA NA adventureworks pg_stat_all_tables n_live_tup bigint 12 NA NA adventureworks pg_stat_all_tables n_dead_tup bigint 13 NA NA adventureworks pg_stat_all_tables n_mod_since_analyze bigint 14 NA NA adventureworks pg_stat_all_tables last_vacuum timestamp with time zone 15 NA NA adventureworks pg_stat_all_tables last_autovacuum timestamp with time zone 16 NA NA adventureworks pg_stat_all_tables last_analyze timestamp with time zone 17 NA NA adventureworks pg_stat_all_tables last_autoanalyze timestamp with time zone 18 NA NA adventureworks pg_stat_all_tables vacuum_count bigint 19 NA NA adventureworks pg_stat_all_tables autovacuum_count bigint 20 NA NA adventureworks pg_stat_all_tables analyze_count bigint 21 NA NA adventureworks pg_stat_all_tables autoanalyze_count bigint 22 NA NA adventureworks pg_stat_xact_all_tables relid oid 1 NA NA adventureworks pg_stat_xact_all_tables schemaname name 2 NA NA adventureworks pg_stat_xact_all_tables relname name 3 NA NA adventureworks pg_stat_xact_all_tables seq_scan bigint 4 NA NA adventureworks pg_stat_xact_all_tables seq_tup_read bigint 5 NA NA adventureworks pg_stat_xact_all_tables idx_scan bigint 6 NA NA adventureworks pg_stat_xact_all_tables idx_tup_fetch bigint 7 NA NA adventureworks pg_stat_xact_all_tables n_tup_ins bigint 8 NA NA adventureworks pg_stat_xact_all_tables n_tup_upd bigint 9 NA NA adventureworks pg_stat_xact_all_tables n_tup_del bigint 10 NA NA adventureworks pg_stat_xact_all_tables n_tup_hot_upd bigint 11 NA NA adventureworks pg_stat_sys_tables relid oid 1 NA NA adventureworks pg_stat_sys_tables schemaname name 2 NA NA adventureworks pg_stat_sys_tables relname name 3 NA NA adventureworks pg_stat_sys_tables seq_scan bigint 4 NA NA adventureworks pg_stat_sys_tables seq_tup_read bigint 5 NA NA adventureworks pg_stat_sys_tables idx_scan bigint 6 NA NA adventureworks pg_stat_sys_tables idx_tup_fetch bigint 7 NA NA adventureworks pg_stat_sys_tables n_tup_ins bigint 8 NA NA adventureworks pg_stat_sys_tables n_tup_upd bigint 9 NA NA adventureworks pg_stat_sys_tables n_tup_del bigint 10 NA NA adventureworks pg_stat_sys_tables n_tup_hot_upd bigint 11 NA NA adventureworks pg_stat_sys_tables n_live_tup bigint 12 NA NA adventureworks pg_stat_sys_tables n_dead_tup bigint 13 NA NA adventureworks pg_stat_sys_tables n_mod_since_analyze bigint 14 NA NA adventureworks pg_stat_sys_tables last_vacuum timestamp with time zone 15 NA NA adventureworks pg_stat_sys_tables last_autovacuum timestamp with time zone 16 NA NA adventureworks pg_stat_sys_tables last_analyze timestamp with time zone 17 NA NA adventureworks pg_stat_sys_tables last_autoanalyze timestamp with time zone 18 NA NA adventureworks pg_stat_sys_tables vacuum_count bigint 19 NA NA adventureworks pg_stat_sys_tables autovacuum_count bigint 20 NA NA adventureworks pg_stat_sys_tables analyze_count bigint 21 NA NA adventureworks pg_stat_sys_tables autoanalyze_count bigint 22 NA NA adventureworks pg_stat_xact_sys_tables relid oid 1 NA NA adventureworks pg_stat_xact_sys_tables schemaname name 2 NA NA adventureworks pg_stat_xact_sys_tables relname name 3 NA NA adventureworks pg_stat_xact_sys_tables seq_scan bigint 4 NA NA adventureworks pg_stat_xact_sys_tables seq_tup_read bigint 5 NA NA adventureworks pg_stat_xact_sys_tables idx_scan bigint 6 NA NA adventureworks pg_stat_xact_sys_tables idx_tup_fetch bigint 7 NA NA adventureworks pg_stat_xact_sys_tables n_tup_ins bigint 8 NA NA adventureworks pg_stat_xact_sys_tables n_tup_upd bigint 9 NA NA adventureworks pg_stat_xact_sys_tables n_tup_del bigint 10 NA NA adventureworks pg_stat_xact_sys_tables n_tup_hot_upd bigint 11 NA NA adventureworks pg_stat_user_tables relid oid 1 NA NA adventureworks pg_stat_user_tables schemaname name 2 NA NA adventureworks pg_stat_user_tables relname name 3 NA NA adventureworks pg_stat_user_tables seq_scan bigint 4 NA NA adventureworks pg_stat_user_tables seq_tup_read bigint 5 NA NA adventureworks pg_stat_user_tables idx_scan bigint 6 NA NA adventureworks pg_stat_user_tables idx_tup_fetch bigint 7 NA NA adventureworks pg_stat_user_tables n_tup_ins bigint 8 NA NA adventureworks pg_stat_user_tables n_tup_upd bigint 9 NA NA adventureworks pg_stat_user_tables n_tup_del bigint 10 NA NA adventureworks pg_stat_user_tables n_tup_hot_upd bigint 11 NA NA adventureworks pg_stat_user_tables n_live_tup bigint 12 NA NA adventureworks pg_stat_user_tables n_dead_tup bigint 13 NA NA adventureworks pg_stat_user_tables n_mod_since_analyze bigint 14 NA NA adventureworks pg_stat_user_tables last_vacuum timestamp with time zone 15 NA NA adventureworks pg_stat_user_tables last_autovacuum timestamp with time zone 16 NA NA adventureworks pg_stat_user_tables last_analyze timestamp with time zone 17 NA NA adventureworks pg_stat_user_tables last_autoanalyze timestamp with time zone 18 NA NA adventureworks pg_stat_user_tables vacuum_count bigint 19 NA NA adventureworks pg_stat_user_tables autovacuum_count bigint 20 NA NA adventureworks pg_stat_user_tables analyze_count bigint 21 NA NA adventureworks pg_stat_user_tables autoanalyze_count bigint 22 NA NA adventureworks pg_stat_xact_user_tables relid oid 1 NA NA adventureworks pg_stat_xact_user_tables schemaname name 2 NA NA adventureworks pg_stat_xact_user_tables relname name 3 NA NA adventureworks pg_stat_xact_user_tables seq_scan bigint 4 NA NA adventureworks pg_stat_xact_user_tables seq_tup_read bigint 5 NA NA adventureworks pg_stat_xact_user_tables idx_scan bigint 6 NA NA adventureworks pg_stat_xact_user_tables idx_tup_fetch bigint 7 NA NA adventureworks pg_stat_xact_user_tables n_tup_ins bigint 8 NA NA adventureworks pg_stat_xact_user_tables n_tup_upd bigint 9 NA NA adventureworks pg_stat_xact_user_tables n_tup_del bigint 10 NA NA adventureworks pg_stat_xact_user_tables n_tup_hot_upd bigint 11 NA NA adventureworks pg_statio_all_tables relid oid 1 NA NA adventureworks pg_statio_all_tables schemaname name 2 NA NA adventureworks pg_statio_all_tables relname name 3 NA NA adventureworks pg_statio_all_tables heap_blks_read bigint 4 NA NA adventureworks pg_statio_all_tables heap_blks_hit bigint 5 NA NA adventureworks pg_statio_all_tables idx_blks_read bigint 6 NA NA adventureworks pg_statio_all_tables idx_blks_hit bigint 7 NA NA adventureworks pg_statio_all_tables toast_blks_read bigint 8 NA NA adventureworks pg_statio_all_tables toast_blks_hit bigint 9 NA NA adventureworks pg_statio_all_tables tidx_blks_read bigint 10 NA NA adventureworks pg_statio_all_tables tidx_blks_hit bigint 11 NA NA adventureworks pg_statio_sys_tables relid oid 1 NA NA adventureworks pg_statio_sys_tables schemaname name 2 NA NA adventureworks pg_statio_sys_tables relname name 3 NA NA adventureworks pg_statio_sys_tables heap_blks_read bigint 4 NA NA adventureworks pg_statio_sys_tables heap_blks_hit bigint 5 NA NA adventureworks pg_statio_sys_tables idx_blks_read bigint 6 NA NA adventureworks pg_statio_sys_tables idx_blks_hit bigint 7 NA NA adventureworks pg_statio_sys_tables toast_blks_read bigint 8 NA NA adventureworks pg_statio_sys_tables toast_blks_hit bigint 9 NA NA adventureworks pg_statio_sys_tables tidx_blks_read bigint 10 NA NA adventureworks pg_statio_sys_tables tidx_blks_hit bigint 11 NA NA adventureworks pg_statio_user_tables relid oid 1 NA NA adventureworks pg_statio_user_tables schemaname name 2 NA NA adventureworks pg_statio_user_tables relname name 3 NA NA adventureworks pg_statio_user_tables heap_blks_read bigint 4 NA NA adventureworks pg_statio_user_tables heap_blks_hit bigint 5 NA NA adventureworks pg_statio_user_tables idx_blks_read bigint 6 NA NA adventureworks pg_statio_user_tables idx_blks_hit bigint 7 NA NA adventureworks pg_statio_user_tables toast_blks_read bigint 8 NA NA adventureworks pg_statio_user_tables toast_blks_hit bigint 9 NA NA adventureworks pg_statio_user_tables tidx_blks_read bigint 10 NA NA adventureworks pg_statio_user_tables tidx_blks_hit bigint 11 NA NA adventureworks pg_stat_all_indexes relid oid 1 NA NA adventureworks pg_stat_all_indexes indexrelid oid 2 NA NA adventureworks pg_stat_all_indexes schemaname name 3 NA NA adventureworks pg_stat_all_indexes relname name 4 NA NA adventureworks pg_stat_all_indexes indexrelname name 5 NA NA adventureworks pg_stat_all_indexes idx_scan bigint 6 NA NA adventureworks pg_stat_all_indexes idx_tup_read bigint 7 NA NA adventureworks pg_stat_all_indexes idx_tup_fetch bigint 8 NA NA adventureworks pg_stat_sys_indexes relid oid 1 NA NA adventureworks pg_stat_sys_indexes indexrelid oid 2 NA NA adventureworks pg_stat_sys_indexes schemaname name 3 NA NA adventureworks pg_stat_sys_indexes relname name 4 NA NA adventureworks pg_stat_sys_indexes indexrelname name 5 NA NA adventureworks pg_stat_sys_indexes idx_scan bigint 6 NA NA adventureworks pg_stat_sys_indexes idx_tup_read bigint 7 NA NA adventureworks pg_stat_sys_indexes idx_tup_fetch bigint 8 NA NA adventureworks pg_stat_user_indexes relid oid 1 NA NA adventureworks pg_stat_user_indexes indexrelid oid 2 NA NA adventureworks pg_stat_user_indexes schemaname name 3 NA NA adventureworks pg_stat_user_indexes relname name 4 NA NA adventureworks pg_stat_user_indexes indexrelname name 5 NA NA adventureworks pg_stat_user_indexes idx_scan bigint 6 NA NA adventureworks pg_stat_user_indexes idx_tup_read bigint 7 NA NA adventureworks pg_stat_user_indexes idx_tup_fetch bigint 8 NA NA adventureworks pg_statio_all_indexes relid oid 1 NA NA adventureworks pg_statio_all_indexes indexrelid oid 2 NA NA adventureworks pg_statio_all_indexes schemaname name 3 NA NA adventureworks pg_statio_all_indexes relname name 4 NA NA adventureworks pg_statio_all_indexes indexrelname name 5 NA NA adventureworks pg_statio_all_indexes idx_blks_read bigint 6 NA NA adventureworks pg_statio_all_indexes idx_blks_hit bigint 7 NA NA adventureworks pg_statio_sys_indexes relid oid 1 NA NA adventureworks pg_statio_sys_indexes indexrelid oid 2 NA NA adventureworks pg_statio_sys_indexes schemaname name 3 NA NA adventureworks pg_statio_sys_indexes relname name 4 NA NA adventureworks pg_statio_sys_indexes indexrelname name 5 NA NA adventureworks pg_statio_sys_indexes idx_blks_read bigint 6 NA NA adventureworks pg_statio_sys_indexes idx_blks_hit bigint 7 NA NA adventureworks pg_statio_user_indexes relid oid 1 NA NA adventureworks pg_statio_user_indexes indexrelid oid 2 NA NA adventureworks pg_statio_user_indexes schemaname name 3 NA NA adventureworks pg_statio_user_indexes relname name 4 NA NA adventureworks pg_statio_user_indexes indexrelname name 5 NA NA adventureworks pg_statio_user_indexes idx_blks_read bigint 6 NA NA adventureworks pg_statio_user_indexes idx_blks_hit bigint 7 NA NA adventureworks pg_statio_all_sequences relid oid 1 NA NA adventureworks pg_statio_all_sequences schemaname name 2 NA NA adventureworks pg_statio_all_sequences relname name 3 NA NA adventureworks pg_statio_all_sequences blks_read bigint 4 NA NA adventureworks pg_statio_all_sequences blks_hit bigint 5 NA NA adventureworks pg_statio_sys_sequences relid oid 1 NA NA adventureworks pg_statio_sys_sequences schemaname name 2 NA NA adventureworks pg_statio_sys_sequences relname name 3 NA NA adventureworks pg_statio_sys_sequences blks_read bigint 4 NA NA adventureworks pg_statio_sys_sequences blks_hit bigint 5 NA NA adventureworks pg_statio_user_sequences relid oid 1 NA NA adventureworks pg_statio_user_sequences schemaname name 2 NA NA adventureworks pg_statio_user_sequences relname name 3 NA NA adventureworks pg_statio_user_sequences blks_read bigint 4 NA NA adventureworks pg_statio_user_sequences blks_hit bigint 5 NA NA adventureworks pg_stat_activity datid oid 1 NA NA adventureworks pg_stat_activity datname name 2 NA NA adventureworks pg_stat_activity pid integer 3 NA NA adventureworks pg_stat_activity usesysid oid 4 NA NA adventureworks pg_stat_activity usename name 5 NA NA adventureworks pg_stat_activity application_name text 6 NA NA adventureworks pg_stat_activity client_addr inet 7 NA NA adventureworks pg_stat_activity client_hostname text 8 NA NA adventureworks pg_stat_activity client_port integer 9 NA NA adventureworks pg_stat_activity backend_start timestamp with time zone 10 NA NA adventureworks pg_stat_activity xact_start timestamp with time zone 11 NA NA adventureworks pg_stat_activity query_start timestamp with time zone 12 NA NA adventureworks pg_stat_activity state_change timestamp with time zone 13 NA NA adventureworks pg_stat_activity wait_event_type text 14 NA NA adventureworks pg_stat_activity wait_event text 15 NA NA adventureworks pg_stat_activity state text 16 NA NA adventureworks pg_stat_activity backend_xid xid 17 NA NA adventureworks pg_stat_activity backend_xmin xid 18 NA NA adventureworks pg_stat_activity query text 19 NA NA adventureworks pg_stat_activity backend_type text 20 NA NA adventureworks pg_stat_replication pid integer 1 NA NA adventureworks pg_stat_replication usesysid oid 2 NA NA adventureworks pg_stat_replication usename name 3 NA NA adventureworks pg_stat_replication application_name text 4 NA NA adventureworks pg_stat_replication client_addr inet 5 NA NA adventureworks pg_stat_replication client_hostname text 6 NA NA adventureworks pg_stat_replication client_port integer 7 NA NA adventureworks pg_stat_replication backend_start timestamp with time zone 8 NA NA adventureworks pg_stat_replication backend_xmin xid 9 NA NA adventureworks pg_stat_replication state text 10 NA NA adventureworks pg_stat_replication sent_lsn pg_lsn 11 NA NA adventureworks pg_stat_replication write_lsn pg_lsn 12 NA NA adventureworks pg_stat_replication flush_lsn pg_lsn 13 NA NA adventureworks pg_stat_replication replay_lsn pg_lsn 14 NA NA adventureworks pg_stat_replication write_lag interval 15 NA NA adventureworks pg_stat_replication flush_lag interval 16 NA NA adventureworks pg_stat_replication replay_lag interval 17 NA NA adventureworks pg_stat_replication sync_priority integer 18 NA NA adventureworks pg_stat_replication sync_state text 19 NA NA adventureworks pg_stat_wal_receiver pid integer 1 NA NA adventureworks pg_stat_wal_receiver status text 2 NA NA adventureworks pg_stat_wal_receiver receive_start_lsn pg_lsn 3 NA NA adventureworks pg_stat_wal_receiver receive_start_tli integer 4 NA NA adventureworks pg_stat_wal_receiver received_lsn pg_lsn 5 NA NA adventureworks pg_stat_wal_receiver received_tli integer 6 NA NA adventureworks pg_stat_wal_receiver last_msg_send_time timestamp with time zone 7 NA NA adventureworks pg_stat_wal_receiver last_msg_receipt_time timestamp with time zone 8 NA NA adventureworks pg_stat_wal_receiver latest_end_lsn pg_lsn 9 NA NA adventureworks pg_stat_wal_receiver latest_end_time timestamp with time zone 10 NA NA adventureworks pg_stat_wal_receiver slot_name text 11 NA NA adventureworks pg_stat_wal_receiver sender_host text 12 NA NA adventureworks pg_stat_wal_receiver sender_port integer 13 NA NA adventureworks pg_stat_wal_receiver conninfo text 14 NA NA adventureworks pg_stat_subscription subid oid 1 NA NA adventureworks pg_stat_subscription subname name 2 NA NA adventureworks pg_stat_subscription pid integer 3 NA NA adventureworks pg_stat_subscription relid oid 4 NA NA adventureworks pg_stat_subscription received_lsn pg_lsn 5 NA NA adventureworks pg_stat_subscription last_msg_send_time timestamp with time zone 6 NA NA adventureworks pg_stat_subscription last_msg_receipt_time timestamp with time zone 7 NA NA adventureworks pg_stat_subscription latest_end_lsn pg_lsn 8 NA NA adventureworks pg_stat_subscription latest_end_time timestamp with time zone 9 NA NA adventureworks pg_stat_ssl pid integer 1 NA NA adventureworks pg_stat_ssl ssl boolean 2 NA NA adventureworks pg_stat_ssl version text 3 NA NA adventureworks pg_stat_ssl cipher text 4 NA NA adventureworks pg_stat_ssl bits integer 5 NA NA adventureworks pg_stat_ssl compression boolean 6 NA NA adventureworks pg_stat_ssl clientdn text 7 NA NA adventureworks pg_replication_slots slot_name name 1 NA NA adventureworks pg_replication_slots plugin name 2 NA NA adventureworks pg_replication_slots slot_type text 3 NA NA adventureworks pg_replication_slots datoid oid 4 NA NA adventureworks pg_replication_slots database name 5 NA NA adventureworks pg_replication_slots temporary boolean 6 NA NA adventureworks pg_replication_slots active boolean 7 NA NA adventureworks pg_replication_slots active_pid integer 8 NA NA adventureworks pg_replication_slots xmin xid 9 NA NA adventureworks pg_replication_slots catalog_xmin xid 10 NA NA adventureworks pg_replication_slots restart_lsn pg_lsn 11 NA NA adventureworks pg_replication_slots confirmed_flush_lsn pg_lsn 12 NA NA adventureworks pg_stat_database datid oid 1 NA NA adventureworks pg_stat_database datname name 2 NA NA adventureworks pg_stat_database numbackends integer 3 NA NA adventureworks pg_stat_database xact_commit bigint 4 NA NA adventureworks pg_stat_database xact_rollback bigint 5 NA NA adventureworks pg_stat_database blks_read bigint 6 NA NA adventureworks pg_stat_database blks_hit bigint 7 NA NA adventureworks pg_stat_database tup_returned bigint 8 NA NA adventureworks pg_stat_database tup_fetched bigint 9 NA NA adventureworks pg_stat_database tup_inserted bigint 10 NA NA adventureworks pg_stat_database tup_updated bigint 11 NA NA adventureworks pg_stat_database tup_deleted bigint 12 NA NA adventureworks pg_stat_database conflicts bigint 13 NA NA adventureworks pg_stat_database temp_files bigint 14 NA NA adventureworks pg_stat_database temp_bytes bigint 15 NA NA adventureworks pg_stat_database deadlocks bigint 16 NA NA adventureworks pg_stat_database blk_read_time double precision 17 NA NA adventureworks pg_stat_database blk_write_time double precision 18 NA NA adventureworks pg_stat_database stats_reset timestamp with time zone 19 NA NA adventureworks pg_stat_database_conflicts datid oid 1 NA NA adventureworks pg_stat_database_conflicts datname name 2 NA NA adventureworks pg_stat_database_conflicts confl_tablespace bigint 3 NA NA adventureworks pg_stat_database_conflicts confl_lock bigint 4 NA NA adventureworks pg_stat_database_conflicts confl_snapshot bigint 5 NA NA adventureworks pg_stat_database_conflicts confl_bufferpin bigint 6 NA NA adventureworks pg_stat_database_conflicts confl_deadlock bigint 7 NA NA adventureworks pg_stat_user_functions funcid oid 1 NA NA adventureworks pg_stat_user_functions schemaname name 2 NA NA adventureworks pg_stat_user_functions funcname name 3 NA NA adventureworks pg_stat_user_functions calls bigint 4 NA NA adventureworks pg_stat_user_functions total_time double precision 5 NA NA adventureworks pg_stat_user_functions self_time double precision 6 NA NA adventureworks pg_stat_xact_user_functions funcid oid 1 NA NA adventureworks pg_stat_xact_user_functions schemaname name 2 NA NA adventureworks pg_stat_xact_user_functions funcname name 3 NA NA adventureworks pg_stat_xact_user_functions calls bigint 4 NA NA adventureworks pg_stat_xact_user_functions total_time double precision 5 NA NA adventureworks pg_stat_xact_user_functions self_time double precision 6 NA NA adventureworks pg_stat_archiver archived_count bigint 1 NA NA adventureworks pg_stat_archiver last_archived_wal text 2 NA NA adventureworks pg_stat_archiver last_archived_time timestamp with time zone 3 NA NA adventureworks pg_stat_archiver failed_count bigint 4 NA NA adventureworks pg_stat_archiver last_failed_wal text 5 NA NA adventureworks pg_stat_archiver last_failed_time timestamp with time zone 6 NA NA adventureworks pg_stat_archiver stats_reset timestamp with time zone 7 NA NA adventureworks pg_stat_bgwriter checkpoints_timed bigint 1 NA NA adventureworks pg_stat_bgwriter checkpoints_req bigint 2 NA NA adventureworks pg_stat_bgwriter checkpoint_write_time double precision 3 NA NA adventureworks pg_stat_bgwriter checkpoint_sync_time double precision 4 NA NA adventureworks pg_stat_bgwriter buffers_checkpoint bigint 5 NA NA adventureworks pg_stat_bgwriter buffers_clean bigint 6 NA NA adventureworks pg_stat_bgwriter maxwritten_clean bigint 7 NA NA adventureworks pg_stat_bgwriter buffers_backend bigint 8 NA NA adventureworks pg_stat_bgwriter buffers_backend_fsync bigint 9 NA NA adventureworks pg_stat_bgwriter buffers_alloc bigint 10 NA NA adventureworks pg_stat_bgwriter stats_reset timestamp with time zone 11 NA NA adventureworks pg_stat_progress_vacuum pid integer 1 NA NA adventureworks pg_stat_progress_vacuum datid oid 2 NA NA adventureworks pg_stat_progress_vacuum datname name 3 NA NA adventureworks pg_stat_progress_vacuum relid oid 4 NA NA adventureworks pg_stat_progress_vacuum phase text 5 NA NA adventureworks pg_stat_progress_vacuum heap_blks_total bigint 6 NA NA adventureworks pg_stat_progress_vacuum heap_blks_scanned bigint 7 NA NA adventureworks pg_stat_progress_vacuum heap_blks_vacuumed bigint 8 NA NA adventureworks pg_stat_progress_vacuum index_vacuum_count bigint 9 NA NA adventureworks pg_stat_progress_vacuum max_dead_tuples bigint 10 NA NA adventureworks pg_stat_progress_vacuum num_dead_tuples bigint 11 NA NA adventureworks pg_user_mappings umid oid 1 NA NA adventureworks pg_user_mappings srvid oid 2 NA NA adventureworks pg_user_mappings srvname name 3 NA NA adventureworks pg_user_mappings umuser oid 4 NA NA adventureworks pg_user_mappings usename name 5 NA NA adventureworks pg_user_mappings umoptions ARRAY 6 NA NA adventureworks pg_replication_origin_status local_id oid 1 NA NA adventureworks pg_replication_origin_status external_id text 2 NA NA adventureworks pg_replication_origin_status remote_lsn pg_lsn 3 NA NA adventureworks pg_replication_origin_status local_lsn pg_lsn 4 NA NA adventureworks pg_subscription subdbid oid 1 NA NA adventureworks pg_subscription subname name 2 NA NA adventureworks pg_subscription subowner oid 3 NA NA adventureworks pg_subscription subenabled boolean 4 NA NA adventureworks pg_subscription subslotname name 6 NA NA adventureworks pg_subscription subpublications ARRAY 8 NA NA adventureworks department name character varying (50) 2 50 NA adventureworks department groupname character varying (50) 3 50 NA adventureworks department modifieddate timestamp without time zone 4 NA now() adventureworks d id integer 1 NA NA adventureworks d departmentid integer 2 NA NA adventureworks d name character varying (50) 3 50 NA adventureworks d groupname character varying (50) 4 50 NA adventureworks d modifieddate timestamp without time zone 5 NA NA adventureworks employee businessentityid integer 1 NA NA adventureworks employee nationalidnumber character varying (15) 2 15 NA adventureworks employee loginid character varying (256) 3 256 NA adventureworks employee jobtitle character varying (50) 4 50 NA adventureworks employee birthdate date 5 NA NA adventureworks employee maritalstatus character 6 1 NA adventureworks employee gender character 7 1 NA adventureworks employee hiredate date 8 NA NA adventureworks information_schema_catalog_name catalog_name character varying (NA) 1 NA NA adventureworks applicable_roles grantee character varying (NA) 1 NA NA adventureworks applicable_roles role_name character varying (NA) 2 NA NA adventureworks applicable_roles is_grantable character varying (3) 3 3 NA adventureworks administrable_role_authorizations grantee character varying (NA) 1 NA NA adventureworks administrable_role_authorizations role_name character varying (NA) 2 NA NA adventureworks administrable_role_authorizations is_grantable character varying (3) 3 3 NA adventureworks attributes udt_catalog character varying (NA) 1 NA NA adventureworks attributes udt_schema character varying (NA) 2 NA NA adventureworks attributes udt_name character varying (NA) 3 NA NA adventureworks attributes attribute_name character varying (NA) 4 NA NA adventureworks attributes ordinal_position integer 5 NA NA adventureworks attributes attribute_default character varying (NA) 6 NA NA adventureworks attributes is_nullable character varying (3) 7 3 NA adventureworks attributes data_type character varying (NA) 8 NA NA adventureworks attributes character_maximum_length integer 9 NA NA adventureworks attributes character_octet_length integer 10 NA NA adventureworks attributes character_set_catalog character varying (NA) 11 NA NA adventureworks attributes character_set_schema character varying (NA) 12 NA NA adventureworks attributes character_set_name character varying (NA) 13 NA NA adventureworks attributes collation_catalog character varying (NA) 14 NA NA adventureworks attributes collation_schema character varying (NA) 15 NA NA adventureworks attributes collation_name character varying (NA) 16 NA NA adventureworks attributes numeric_precision integer 17 NA NA adventureworks attributes numeric_precision_radix integer 18 NA NA adventureworks attributes numeric_scale integer 19 NA NA adventureworks attributes datetime_precision integer 20 NA NA adventureworks attributes interval_type character varying (NA) 21 NA NA adventureworks attributes interval_precision integer 22 NA NA adventureworks attributes attribute_udt_catalog character varying (NA) 23 NA NA adventureworks attributes attribute_udt_schema character varying (NA) 24 NA NA adventureworks attributes attribute_udt_name character varying (NA) 25 NA NA adventureworks attributes scope_catalog character varying (NA) 26 NA NA adventureworks attributes scope_schema character varying (NA) 27 NA NA adventureworks attributes scope_name character varying (NA) 28 NA NA adventureworks attributes maximum_cardinality integer 29 NA NA adventureworks attributes dtd_identifier character varying (NA) 30 NA NA adventureworks attributes is_derived_reference_attribute character varying (3) 31 3 NA adventureworks character_sets character_set_catalog character varying (NA) 1 NA NA adventureworks character_sets character_set_schema character varying (NA) 2 NA NA adventureworks character_sets character_set_name character varying (NA) 3 NA NA adventureworks character_sets character_repertoire character varying (NA) 4 NA NA adventureworks character_sets form_of_use character varying (NA) 5 NA NA adventureworks character_sets default_collate_catalog character varying (NA) 6 NA NA adventureworks character_sets default_collate_schema character varying (NA) 7 NA NA adventureworks character_sets default_collate_name character varying (NA) 8 NA NA adventureworks check_constraint_routine_usage constraint_catalog character varying (NA) 1 NA NA adventureworks check_constraint_routine_usage constraint_schema character varying (NA) 2 NA NA adventureworks check_constraint_routine_usage constraint_name character varying (NA) 3 NA NA adventureworks check_constraint_routine_usage specific_catalog character varying (NA) 4 NA NA adventureworks check_constraint_routine_usage specific_schema character varying (NA) 5 NA NA adventureworks check_constraint_routine_usage specific_name character varying (NA) 6 NA NA adventureworks check_constraints constraint_catalog character varying (NA) 1 NA NA adventureworks check_constraints constraint_schema character varying (NA) 2 NA NA adventureworks check_constraints constraint_name character varying (NA) 3 NA NA adventureworks check_constraints check_clause character varying (NA) 4 NA NA adventureworks collations collation_catalog character varying (NA) 1 NA NA adventureworks collations collation_schema character varying (NA) 2 NA NA adventureworks collations collation_name character varying (NA) 3 NA NA adventureworks collations pad_attribute character varying (NA) 4 NA NA adventureworks collation_character_set_applicability collation_catalog character varying (NA) 1 NA NA adventureworks collation_character_set_applicability collation_schema character varying (NA) 2 NA NA adventureworks collation_character_set_applicability collation_name character varying (NA) 3 NA NA adventureworks collation_character_set_applicability character_set_catalog character varying (NA) 4 NA NA adventureworks collation_character_set_applicability character_set_schema character varying (NA) 5 NA NA adventureworks collation_character_set_applicability character_set_name character varying (NA) 6 NA NA adventureworks column_domain_usage domain_catalog character varying (NA) 1 NA NA adventureworks column_domain_usage domain_schema character varying (NA) 2 NA NA adventureworks column_domain_usage domain_name character varying (NA) 3 NA NA adventureworks column_domain_usage table_catalog character varying (NA) 4 NA NA adventureworks column_domain_usage table_schema character varying (NA) 5 NA NA adventureworks column_domain_usage table_name character varying (NA) 6 NA NA adventureworks column_domain_usage column_name character varying (NA) 7 NA NA adventureworks column_privileges grantor character varying (NA) 1 NA NA adventureworks column_privileges grantee character varying (NA) 2 NA NA adventureworks column_privileges table_catalog character varying (NA) 3 NA NA adventureworks column_privileges table_schema character varying (NA) 4 NA NA adventureworks column_privileges table_name character varying (NA) 5 NA NA adventureworks column_privileges column_name character varying (NA) 6 NA NA adventureworks column_privileges privilege_type character varying (NA) 7 NA NA adventureworks column_privileges is_grantable character varying (3) 8 3 NA adventureworks column_udt_usage udt_catalog character varying (NA) 1 NA NA adventureworks column_udt_usage udt_schema character varying (NA) 2 NA NA adventureworks column_udt_usage udt_name character varying (NA) 3 NA NA adventureworks column_udt_usage table_catalog character varying (NA) 4 NA NA adventureworks column_udt_usage table_schema character varying (NA) 5 NA NA adventureworks column_udt_usage table_name character varying (NA) 6 NA NA adventureworks column_udt_usage column_name character varying (NA) 7 NA NA adventureworks columns table_catalog character varying (NA) 1 NA NA adventureworks columns table_schema character varying (NA) 2 NA NA adventureworks columns table_name character varying (NA) 3 NA NA adventureworks columns column_name character varying (NA) 4 NA NA adventureworks columns ordinal_position integer 5 NA NA adventureworks columns column_default character varying (NA) 6 NA NA adventureworks columns is_nullable character varying (3) 7 3 NA adventureworks columns data_type character varying (NA) 8 NA NA adventureworks columns character_maximum_length integer 9 NA NA adventureworks columns character_octet_length integer 10 NA NA adventureworks columns numeric_precision integer 11 NA NA adventureworks columns numeric_precision_radix integer 12 NA NA adventureworks columns numeric_scale integer 13 NA NA adventureworks columns datetime_precision integer 14 NA NA adventureworks columns interval_type character varying (NA) 15 NA NA adventureworks columns interval_precision integer 16 NA NA adventureworks columns character_set_catalog character varying (NA) 17 NA NA adventureworks columns character_set_schema character varying (NA) 18 NA NA adventureworks columns character_set_name character varying (NA) 19 NA NA adventureworks columns collation_catalog character varying (NA) 20 NA NA adventureworks columns collation_schema character varying (NA) 21 NA NA adventureworks columns collation_name character varying (NA) 22 NA NA adventureworks columns domain_catalog character varying (NA) 23 NA NA adventureworks columns domain_schema character varying (NA) 24 NA NA adventureworks columns domain_name character varying (NA) 25 NA NA adventureworks columns udt_catalog character varying (NA) 26 NA NA adventureworks columns udt_schema character varying (NA) 27 NA NA adventureworks columns udt_name character varying (NA) 28 NA NA adventureworks columns scope_catalog character varying (NA) 29 NA NA adventureworks columns scope_schema character varying (NA) 30 NA NA adventureworks columns scope_name character varying (NA) 31 NA NA adventureworks columns maximum_cardinality integer 32 NA NA adventureworks columns dtd_identifier character varying (NA) 33 NA NA adventureworks columns is_self_referencing character varying (3) 34 3 NA adventureworks columns is_identity character varying (3) 35 3 NA adventureworks columns identity_generation character varying (NA) 36 NA NA adventureworks columns identity_start character varying (NA) 37 NA NA adventureworks columns identity_increment character varying (NA) 38 NA NA adventureworks columns identity_maximum character varying (NA) 39 NA NA adventureworks columns identity_minimum character varying (NA) 40 NA NA adventureworks columns identity_cycle character varying (3) 41 3 NA adventureworks columns is_generated character varying (NA) 42 NA NA adventureworks columns generation_expression character varying (NA) 43 NA NA adventureworks columns is_updatable character varying (3) 44 3 NA adventureworks constraint_column_usage table_catalog character varying (NA) 1 NA NA adventureworks constraint_column_usage table_schema character varying (NA) 2 NA NA adventureworks constraint_column_usage table_name character varying (NA) 3 NA NA adventureworks constraint_column_usage column_name character varying (NA) 4 NA NA adventureworks constraint_column_usage constraint_catalog character varying (NA) 5 NA NA adventureworks constraint_column_usage constraint_schema character varying (NA) 6 NA NA adventureworks constraint_column_usage constraint_name character varying (NA) 7 NA NA adventureworks constraint_table_usage table_catalog character varying (NA) 1 NA NA adventureworks constraint_table_usage table_schema character varying (NA) 2 NA NA adventureworks constraint_table_usage table_name character varying (NA) 3 NA NA adventureworks constraint_table_usage constraint_catalog character varying (NA) 4 NA NA adventureworks constraint_table_usage constraint_schema character varying (NA) 5 NA NA adventureworks constraint_table_usage constraint_name character varying (NA) 6 NA NA adventureworks domain_constraints constraint_catalog character varying (NA) 1 NA NA adventureworks domain_constraints constraint_schema character varying (NA) 2 NA NA adventureworks domain_constraints constraint_name character varying (NA) 3 NA NA adventureworks domain_constraints domain_catalog character varying (NA) 4 NA NA adventureworks domain_constraints domain_schema character varying (NA) 5 NA NA adventureworks domain_constraints domain_name character varying (NA) 6 NA NA adventureworks domain_constraints is_deferrable character varying (3) 7 3 NA adventureworks domain_constraints initially_deferred character varying (3) 8 3 NA adventureworks domain_udt_usage udt_catalog character varying (NA) 1 NA NA adventureworks domain_udt_usage udt_schema character varying (NA) 2 NA NA adventureworks domain_udt_usage udt_name character varying (NA) 3 NA NA adventureworks domain_udt_usage domain_catalog character varying (NA) 4 NA NA adventureworks domain_udt_usage domain_schema character varying (NA) 5 NA NA adventureworks domain_udt_usage domain_name character varying (NA) 6 NA NA adventureworks domains domain_catalog character varying (NA) 1 NA NA adventureworks domains domain_schema character varying (NA) 2 NA NA adventureworks domains domain_name character varying (NA) 3 NA NA adventureworks domains data_type character varying (NA) 4 NA NA adventureworks domains character_maximum_length integer 5 NA NA adventureworks domains character_octet_length integer 6 NA NA adventureworks domains character_set_catalog character varying (NA) 7 NA NA adventureworks domains character_set_schema character varying (NA) 8 NA NA adventureworks domains character_set_name character varying (NA) 9 NA NA adventureworks domains collation_catalog character varying (NA) 10 NA NA adventureworks domains collation_schema character varying (NA) 11 NA NA adventureworks domains collation_name character varying (NA) 12 NA NA adventureworks domains numeric_precision integer 13 NA NA adventureworks domains numeric_precision_radix integer 14 NA NA adventureworks domains numeric_scale integer 15 NA NA adventureworks domains datetime_precision integer 16 NA NA adventureworks domains interval_type character varying (NA) 17 NA NA adventureworks domains interval_precision integer 18 NA NA adventureworks domains domain_default character varying (NA) 19 NA NA adventureworks domains udt_catalog character varying (NA) 20 NA NA adventureworks domains udt_schema character varying (NA) 21 NA NA adventureworks domains udt_name character varying (NA) 22 NA NA adventureworks domains scope_catalog character varying (NA) 23 NA NA adventureworks domains scope_schema character varying (NA) 24 NA NA adventureworks domains scope_name character varying (NA) 25 NA NA adventureworks domains maximum_cardinality integer 26 NA NA adventureworks domains dtd_identifier character varying (NA) 27 NA NA adventureworks enabled_roles role_name character varying (NA) 1 NA NA adventureworks key_column_usage constraint_catalog character varying (NA) 1 NA NA adventureworks key_column_usage constraint_schema character varying (NA) 2 NA NA adventureworks key_column_usage constraint_name character varying (NA) 3 NA NA adventureworks key_column_usage table_catalog character varying (NA) 4 NA NA adventureworks key_column_usage table_schema character varying (NA) 5 NA NA adventureworks key_column_usage table_name character varying (NA) 6 NA NA adventureworks key_column_usage column_name character varying (NA) 7 NA NA adventureworks key_column_usage ordinal_position integer 8 NA NA adventureworks key_column_usage position_in_unique_constraint integer 9 NA NA adventureworks parameters specific_catalog character varying (NA) 1 NA NA adventureworks parameters specific_schema character varying (NA) 2 NA NA adventureworks parameters specific_name character varying (NA) 3 NA NA adventureworks parameters ordinal_position integer 4 NA NA adventureworks parameters parameter_mode character varying (NA) 5 NA NA adventureworks parameters is_result character varying (3) 6 3 NA adventureworks parameters as_locator character varying (3) 7 3 NA adventureworks parameters parameter_name character varying (NA) 8 NA NA adventureworks parameters data_type character varying (NA) 9 NA NA adventureworks parameters character_maximum_length integer 10 NA NA adventureworks parameters character_octet_length integer 11 NA NA adventureworks parameters character_set_catalog character varying (NA) 12 NA NA adventureworks parameters character_set_schema character varying (NA) 13 NA NA adventureworks parameters character_set_name character varying (NA) 14 NA NA adventureworks parameters collation_catalog character varying (NA) 15 NA NA adventureworks parameters collation_schema character varying (NA) 16 NA NA adventureworks parameters collation_name character varying (NA) 17 NA NA adventureworks parameters numeric_precision integer 18 NA NA adventureworks parameters numeric_precision_radix integer 19 NA NA adventureworks parameters numeric_scale integer 20 NA NA adventureworks parameters datetime_precision integer 21 NA NA adventureworks parameters interval_type character varying (NA) 22 NA NA adventureworks parameters interval_precision integer 23 NA NA adventureworks parameters udt_catalog character varying (NA) 24 NA NA adventureworks parameters udt_schema character varying (NA) 25 NA NA adventureworks parameters udt_name character varying (NA) 26 NA NA adventureworks parameters scope_catalog character varying (NA) 27 NA NA adventureworks parameters scope_schema character varying (NA) 28 NA NA adventureworks parameters scope_name character varying (NA) 29 NA NA adventureworks parameters maximum_cardinality integer 30 NA NA adventureworks parameters dtd_identifier character varying (NA) 31 NA NA adventureworks parameters parameter_default character varying (NA) 32 NA NA adventureworks referential_constraints constraint_catalog character varying (NA) 1 NA NA adventureworks referential_constraints constraint_schema character varying (NA) 2 NA NA adventureworks referential_constraints constraint_name character varying (NA) 3 NA NA adventureworks referential_constraints unique_constraint_catalog character varying (NA) 4 NA NA adventureworks referential_constraints unique_constraint_schema character varying (NA) 5 NA NA adventureworks referential_constraints unique_constraint_name character varying (NA) 6 NA NA adventureworks referential_constraints match_option character varying (NA) 7 NA NA adventureworks referential_constraints update_rule character varying (NA) 8 NA NA adventureworks referential_constraints delete_rule character varying (NA) 9 NA NA adventureworks role_column_grants grantor character varying (NA) 1 NA NA adventureworks role_column_grants grantee character varying (NA) 2 NA NA adventureworks role_column_grants table_catalog character varying (NA) 3 NA NA adventureworks role_column_grants table_schema character varying (NA) 4 NA NA adventureworks role_column_grants table_name character varying (NA) 5 NA NA adventureworks role_column_grants column_name character varying (NA) 6 NA NA adventureworks role_column_grants privilege_type character varying (NA) 7 NA NA adventureworks role_column_grants is_grantable character varying (3) 8 3 NA adventureworks routine_privileges grantor character varying (NA) 1 NA NA adventureworks routine_privileges grantee character varying (NA) 2 NA NA adventureworks routine_privileges specific_catalog character varying (NA) 3 NA NA adventureworks routine_privileges specific_schema character varying (NA) 4 NA NA adventureworks routine_privileges specific_name character varying (NA) 5 NA NA adventureworks routine_privileges routine_catalog character varying (NA) 6 NA NA adventureworks routine_privileges routine_schema character varying (NA) 7 NA NA adventureworks routine_privileges routine_name character varying (NA) 8 NA NA adventureworks routine_privileges privilege_type character varying (NA) 9 NA NA adventureworks routine_privileges is_grantable character varying (3) 10 3 NA adventureworks role_routine_grants grantor character varying (NA) 1 NA NA adventureworks role_routine_grants grantee character varying (NA) 2 NA NA adventureworks role_routine_grants specific_catalog character varying (NA) 3 NA NA adventureworks role_routine_grants specific_schema character varying (NA) 4 NA NA adventureworks role_routine_grants specific_name character varying (NA) 5 NA NA adventureworks role_routine_grants routine_catalog character varying (NA) 6 NA NA adventureworks role_routine_grants routine_schema character varying (NA) 7 NA NA adventureworks role_routine_grants routine_name character varying (NA) 8 NA NA adventureworks role_routine_grants privilege_type character varying (NA) 9 NA NA adventureworks role_routine_grants is_grantable character varying (3) 10 3 NA adventureworks routines specific_catalog character varying (NA) 1 NA NA adventureworks routines specific_schema character varying (NA) 2 NA NA adventureworks routines specific_name character varying (NA) 3 NA NA adventureworks routines routine_catalog character varying (NA) 4 NA NA adventureworks routines routine_schema character varying (NA) 5 NA NA adventureworks routines routine_name character varying (NA) 6 NA NA adventureworks routines routine_type character varying (NA) 7 NA NA adventureworks routines module_catalog character varying (NA) 8 NA NA adventureworks routines module_schema character varying (NA) 9 NA NA adventureworks routines module_name character varying (NA) 10 NA NA adventureworks routines udt_catalog character varying (NA) 11 NA NA adventureworks routines udt_schema character varying (NA) 12 NA NA adventureworks routines udt_name character varying (NA) 13 NA NA adventureworks routines data_type character varying (NA) 14 NA NA adventureworks routines character_maximum_length integer 15 NA NA adventureworks routines character_octet_length integer 16 NA NA adventureworks routines character_set_catalog character varying (NA) 17 NA NA adventureworks routines character_set_schema character varying (NA) 18 NA NA adventureworks routines character_set_name character varying (NA) 19 NA NA adventureworks routines collation_catalog character varying (NA) 20 NA NA adventureworks routines collation_schema character varying (NA) 21 NA NA adventureworks routines collation_name character varying (NA) 22 NA NA adventureworks routines numeric_precision integer 23 NA NA adventureworks routines numeric_precision_radix integer 24 NA NA adventureworks routines numeric_scale integer 25 NA NA adventureworks routines datetime_precision integer 26 NA NA adventureworks routines interval_type character varying (NA) 27 NA NA adventureworks routines interval_precision integer 28 NA NA adventureworks routines type_udt_catalog character varying (NA) 29 NA NA adventureworks routines type_udt_schema character varying (NA) 30 NA NA adventureworks routines type_udt_name character varying (NA) 31 NA NA adventureworks routines scope_catalog character varying (NA) 32 NA NA adventureworks routines scope_schema character varying (NA) 33 NA NA adventureworks routines scope_name character varying (NA) 34 NA NA adventureworks routines maximum_cardinality integer 35 NA NA adventureworks routines dtd_identifier character varying (NA) 36 NA NA adventureworks routines routine_body character varying (NA) 37 NA NA adventureworks routines routine_definition character varying (NA) 38 NA NA adventureworks routines external_name character varying (NA) 39 NA NA adventureworks routines external_language character varying (NA) 40 NA NA adventureworks routines parameter_style character varying (NA) 41 NA NA adventureworks routines is_deterministic character varying (3) 42 3 NA adventureworks routines sql_data_access character varying (NA) 43 NA NA adventureworks routines is_null_call character varying (3) 44 3 NA adventureworks routines sql_path character varying (NA) 45 NA NA adventureworks routines schema_level_routine character varying (3) 46 3 NA adventureworks routines max_dynamic_result_sets integer 47 NA NA adventureworks routines is_user_defined_cast character varying (3) 48 3 NA adventureworks routines is_implicitly_invocable character varying (3) 49 3 NA adventureworks routines security_type character varying (NA) 50 NA NA adventureworks routines to_sql_specific_catalog character varying (NA) 51 NA NA adventureworks routines to_sql_specific_schema character varying (NA) 52 NA NA adventureworks routines to_sql_specific_name character varying (NA) 53 NA NA adventureworks routines as_locator character varying (3) 54 3 NA adventureworks routines created timestamp with time zone 55 NA NA adventureworks routines last_altered timestamp with time zone 56 NA NA adventureworks routines new_savepoint_level character varying (3) 57 3 NA adventureworks routines is_udt_dependent character varying (3) 58 3 NA adventureworks routines result_cast_from_data_type character varying (NA) 59 NA NA adventureworks routines result_cast_as_locator character varying (3) 60 3 NA adventureworks routines result_cast_char_max_length integer 61 NA NA adventureworks routines result_cast_char_octet_length integer 62 NA NA adventureworks routines result_cast_char_set_catalog character varying (NA) 63 NA NA adventureworks routines result_cast_char_set_schema character varying (NA) 64 NA NA adventureworks routines result_cast_char_set_name character varying (NA) 65 NA NA adventureworks routines result_cast_collation_catalog character varying (NA) 66 NA NA adventureworks routines result_cast_collation_schema character varying (NA) 67 NA NA adventureworks routines result_cast_collation_name character varying (NA) 68 NA NA adventureworks routines result_cast_numeric_precision integer 69 NA NA adventureworks routines result_cast_numeric_precision_radix integer 70 NA NA adventureworks routines result_cast_numeric_scale integer 71 NA NA adventureworks routines result_cast_datetime_precision integer 72 NA NA adventureworks routines result_cast_interval_type character varying (NA) 73 NA NA adventureworks routines result_cast_interval_precision integer 74 NA NA adventureworks routines result_cast_type_udt_catalog character varying (NA) 75 NA NA adventureworks routines result_cast_type_udt_schema character varying (NA) 76 NA NA adventureworks routines result_cast_type_udt_name character varying (NA) 77 NA NA adventureworks routines result_cast_scope_catalog character varying (NA) 78 NA NA adventureworks routines result_cast_scope_schema character varying (NA) 79 NA NA adventureworks routines result_cast_scope_name character varying (NA) 80 NA NA adventureworks routines result_cast_maximum_cardinality integer 81 NA NA adventureworks routines result_cast_dtd_identifier character varying (NA) 82 NA NA adventureworks schemata catalog_name character varying (NA) 1 NA NA adventureworks schemata schema_name character varying (NA) 2 NA NA adventureworks schemata schema_owner character varying (NA) 3 NA NA adventureworks schemata default_character_set_catalog character varying (NA) 4 NA NA adventureworks schemata default_character_set_schema character varying (NA) 5 NA NA adventureworks schemata default_character_set_name character varying (NA) 6 NA NA adventureworks schemata sql_path character varying (NA) 7 NA NA adventureworks sequences sequence_catalog character varying (NA) 1 NA NA adventureworks sequences sequence_schema character varying (NA) 2 NA NA adventureworks sequences sequence_name character varying (NA) 3 NA NA adventureworks sequences data_type character varying (NA) 4 NA NA adventureworks sequences numeric_precision integer 5 NA NA adventureworks sequences numeric_precision_radix integer 6 NA NA adventureworks sequences numeric_scale integer 7 NA NA adventureworks sequences start_value character varying (NA) 8 NA NA adventureworks sequences minimum_value character varying (NA) 9 NA NA adventureworks sequences maximum_value character varying (NA) 10 NA NA adventureworks sequences increment character varying (NA) 11 NA NA adventureworks sequences cycle_option character varying (3) 12 3 NA adventureworks sql_features feature_id character varying (NA) 1 NA NA adventureworks sql_features feature_name character varying (NA) 2 NA NA adventureworks sql_features sub_feature_id character varying (NA) 3 NA NA adventureworks sql_features sub_feature_name character varying (NA) 4 NA NA adventureworks sql_features is_supported character varying (3) 5 3 NA adventureworks sql_features is_verified_by character varying (NA) 6 NA NA adventureworks sql_features comments character varying (NA) 7 NA NA adventureworks sql_implementation_info implementation_info_id character varying (NA) 1 NA NA adventureworks sql_implementation_info implementation_info_name character varying (NA) 2 NA NA adventureworks sql_implementation_info integer_value integer 3 NA NA adventureworks sql_implementation_info character_value character varying (NA) 4 NA NA adventureworks sql_implementation_info comments character varying (NA) 5 NA NA adventureworks sql_languages sql_language_source character varying (NA) 1 NA NA adventureworks sql_languages sql_language_year character varying (NA) 2 NA NA adventureworks sql_languages sql_language_conformance character varying (NA) 3 NA NA adventureworks sql_languages sql_language_integrity character varying (NA) 4 NA NA adventureworks sql_languages sql_language_implementation character varying (NA) 5 NA NA adventureworks sql_languages sql_language_binding_style character varying (NA) 6 NA NA adventureworks sql_languages sql_language_programming_language character varying (NA) 7 NA NA adventureworks sql_packages feature_id character varying (NA) 1 NA NA adventureworks sql_packages feature_name character varying (NA) 2 NA NA adventureworks sql_packages is_supported character varying (3) 3 3 NA adventureworks sql_packages is_verified_by character varying (NA) 4 NA NA adventureworks sql_packages comments character varying (NA) 5 NA NA adventureworks sql_parts feature_id character varying (NA) 1 NA NA adventureworks sql_parts feature_name character varying (NA) 2 NA NA adventureworks sql_parts is_supported character varying (3) 3 3 NA adventureworks sql_parts is_verified_by character varying (NA) 4 NA NA adventureworks sql_parts comments character varying (NA) 5 NA NA adventureworks sql_sizing sizing_id integer 1 NA NA adventureworks sql_sizing sizing_name character varying (NA) 2 NA NA adventureworks sql_sizing supported_value integer 3 NA NA adventureworks sql_sizing comments character varying (NA) 4 NA NA adventureworks sql_sizing_profiles sizing_id integer 1 NA NA adventureworks sql_sizing_profiles sizing_name character varying (NA) 2 NA NA adventureworks sql_sizing_profiles profile_id character varying (NA) 3 NA NA adventureworks sql_sizing_profiles required_value integer 4 NA NA adventureworks sql_sizing_profiles comments character varying (NA) 5 NA NA adventureworks table_constraints constraint_catalog character varying (NA) 1 NA NA adventureworks table_constraints constraint_schema character varying (NA) 2 NA NA adventureworks table_constraints constraint_name character varying (NA) 3 NA NA adventureworks table_constraints table_catalog character varying (NA) 4 NA NA adventureworks table_constraints table_schema character varying (NA) 5 NA NA adventureworks table_constraints table_name character varying (NA) 6 NA NA adventureworks table_constraints constraint_type character varying (NA) 7 NA NA adventureworks table_constraints is_deferrable character varying (3) 8 3 NA adventureworks table_constraints initially_deferred character varying (3) 9 3 NA adventureworks table_constraints enforced character varying (3) 10 3 NA adventureworks table_privileges grantor character varying (NA) 1 NA NA adventureworks table_privileges grantee character varying (NA) 2 NA NA adventureworks table_privileges table_catalog character varying (NA) 3 NA NA adventureworks table_privileges table_schema character varying (NA) 4 NA NA adventureworks table_privileges table_name character varying (NA) 5 NA NA adventureworks table_privileges privilege_type character varying (NA) 6 NA NA adventureworks table_privileges is_grantable character varying (3) 7 3 NA adventureworks table_privileges with_hierarchy character varying (3) 8 3 NA adventureworks role_table_grants grantor character varying (NA) 1 NA NA adventureworks role_table_grants grantee character varying (NA) 2 NA NA adventureworks role_table_grants table_catalog character varying (NA) 3 NA NA adventureworks role_table_grants table_schema character varying (NA) 4 NA NA adventureworks role_table_grants table_name character varying (NA) 5 NA NA adventureworks role_table_grants privilege_type character varying (NA) 6 NA NA adventureworks role_table_grants is_grantable character varying (3) 7 3 NA adventureworks role_table_grants with_hierarchy character varying (3) 8 3 NA adventureworks tables table_catalog character varying (NA) 1 NA NA adventureworks tables table_schema character varying (NA) 2 NA NA adventureworks tables table_name character varying (NA) 3 NA NA adventureworks tables table_type character varying (NA) 4 NA NA adventureworks tables self_referencing_column_name character varying (NA) 5 NA NA adventureworks tables reference_generation character varying (NA) 6 NA NA adventureworks tables user_defined_type_catalog character varying (NA) 7 NA NA adventureworks tables user_defined_type_schema character varying (NA) 8 NA NA adventureworks tables user_defined_type_name character varying (NA) 9 NA NA adventureworks tables is_insertable_into character varying (3) 10 3 NA adventureworks tables is_typed character varying (3) 11 3 NA adventureworks tables commit_action character varying (NA) 12 NA NA adventureworks transforms udt_catalog character varying (NA) 1 NA NA adventureworks transforms udt_schema character varying (NA) 2 NA NA adventureworks transforms udt_name character varying (NA) 3 NA NA adventureworks transforms specific_catalog character varying (NA) 4 NA NA adventureworks transforms specific_schema character varying (NA) 5 NA NA adventureworks transforms specific_name character varying (NA) 6 NA NA adventureworks transforms group_name character varying (NA) 7 NA NA adventureworks transforms transform_type character varying (NA) 8 NA NA adventureworks triggered_update_columns trigger_catalog character varying (NA) 1 NA NA adventureworks triggered_update_columns trigger_schema character varying (NA) 2 NA NA adventureworks triggered_update_columns trigger_name character varying (NA) 3 NA NA adventureworks triggered_update_columns event_object_catalog character varying (NA) 4 NA NA adventureworks triggered_update_columns event_object_schema character varying (NA) 5 NA NA adventureworks triggered_update_columns event_object_table character varying (NA) 6 NA NA adventureworks triggered_update_columns event_object_column character varying (NA) 7 NA NA adventureworks triggers trigger_catalog character varying (NA) 1 NA NA adventureworks triggers trigger_schema character varying (NA) 2 NA NA adventureworks triggers trigger_name character varying (NA) 3 NA NA adventureworks triggers event_manipulation character varying (NA) 4 NA NA adventureworks triggers event_object_catalog character varying (NA) 5 NA NA adventureworks triggers event_object_schema character varying (NA) 6 NA NA adventureworks triggers event_object_table character varying (NA) 7 NA NA adventureworks triggers action_order integer 8 NA NA adventureworks triggers action_condition character varying (NA) 9 NA NA adventureworks triggers action_statement character varying (NA) 10 NA NA adventureworks triggers action_orientation character varying (NA) 11 NA NA adventureworks triggers action_timing character varying (NA) 12 NA NA adventureworks triggers action_reference_old_table character varying (NA) 13 NA NA adventureworks triggers action_reference_new_table character varying (NA) 14 NA NA adventureworks triggers action_reference_old_row character varying (NA) 15 NA NA adventureworks triggers action_reference_new_row character varying (NA) 16 NA NA adventureworks triggers created timestamp with time zone 17 NA NA adventureworks udt_privileges grantor character varying (NA) 1 NA NA adventureworks udt_privileges grantee character varying (NA) 2 NA NA adventureworks udt_privileges udt_catalog character varying (NA) 3 NA NA adventureworks udt_privileges udt_schema character varying (NA) 4 NA NA adventureworks udt_privileges udt_name character varying (NA) 5 NA NA adventureworks udt_privileges privilege_type character varying (NA) 6 NA NA adventureworks udt_privileges is_grantable character varying (3) 7 3 NA adventureworks role_udt_grants grantor character varying (NA) 1 NA NA adventureworks role_udt_grants grantee character varying (NA) 2 NA NA adventureworks role_udt_grants udt_catalog character varying (NA) 3 NA NA adventureworks role_udt_grants udt_schema character varying (NA) 4 NA NA adventureworks role_udt_grants udt_name character varying (NA) 5 NA NA adventureworks role_udt_grants privilege_type character varying (NA) 6 NA NA adventureworks role_udt_grants is_grantable character varying (3) 7 3 NA adventureworks usage_privileges grantor character varying (NA) 1 NA NA adventureworks usage_privileges grantee character varying (NA) 2 NA NA adventureworks usage_privileges object_catalog character varying (NA) 3 NA NA adventureworks usage_privileges object_schema character varying (NA) 4 NA NA adventureworks usage_privileges object_name character varying (NA) 5 NA NA adventureworks usage_privileges object_type character varying (NA) 6 NA NA adventureworks usage_privileges privilege_type character varying (NA) 7 NA NA adventureworks usage_privileges is_grantable character varying (3) 8 3 NA adventureworks role_usage_grants grantor character varying (NA) 1 NA NA adventureworks role_usage_grants grantee character varying (NA) 2 NA NA adventureworks role_usage_grants object_catalog character varying (NA) 3 NA NA adventureworks role_usage_grants object_schema character varying (NA) 4 NA NA adventureworks role_usage_grants object_name character varying (NA) 5 NA NA adventureworks role_usage_grants object_type character varying (NA) 6 NA NA adventureworks role_usage_grants privilege_type character varying (NA) 7 NA NA adventureworks role_usage_grants is_grantable character varying (3) 8 3 NA adventureworks user_defined_types user_defined_type_catalog character varying (NA) 1 NA NA adventureworks user_defined_types user_defined_type_schema character varying (NA) 2 NA NA adventureworks user_defined_types user_defined_type_name character varying (NA) 3 NA NA adventureworks user_defined_types user_defined_type_category character varying (NA) 4 NA NA adventureworks user_defined_types is_instantiable character varying (3) 5 3 NA adventureworks user_defined_types is_final character varying (3) 6 3 NA adventureworks user_defined_types ordering_form character varying (NA) 7 NA NA adventureworks user_defined_types ordering_category character varying (NA) 8 NA NA adventureworks user_defined_types ordering_routine_catalog character varying (NA) 9 NA NA adventureworks user_defined_types ordering_routine_schema character varying (NA) 10 NA NA adventureworks user_defined_types ordering_routine_name character varying (NA) 11 NA NA adventureworks user_defined_types reference_type character varying (NA) 12 NA NA adventureworks user_defined_types data_type character varying (NA) 13 NA NA adventureworks user_defined_types character_maximum_length integer 14 NA NA adventureworks user_defined_types character_octet_length integer 15 NA NA adventureworks user_defined_types character_set_catalog character varying (NA) 16 NA NA adventureworks user_defined_types character_set_schema character varying (NA) 17 NA NA adventureworks user_defined_types character_set_name character varying (NA) 18 NA NA adventureworks user_defined_types collation_catalog character varying (NA) 19 NA NA adventureworks user_defined_types collation_schema character varying (NA) 20 NA NA adventureworks user_defined_types collation_name character varying (NA) 21 NA NA adventureworks user_defined_types numeric_precision integer 22 NA NA adventureworks user_defined_types numeric_precision_radix integer 23 NA NA adventureworks user_defined_types numeric_scale integer 24 NA NA adventureworks user_defined_types datetime_precision integer 25 NA NA adventureworks user_defined_types interval_type character varying (NA) 26 NA NA adventureworks user_defined_types interval_precision integer 27 NA NA adventureworks user_defined_types source_dtd_identifier character varying (NA) 28 NA NA adventureworks user_defined_types ref_dtd_identifier character varying (NA) 29 NA NA adventureworks view_column_usage view_catalog character varying (NA) 1 NA NA adventureworks view_column_usage view_schema character varying (NA) 2 NA NA adventureworks view_column_usage view_name character varying (NA) 3 NA NA adventureworks view_column_usage table_catalog character varying (NA) 4 NA NA adventureworks view_column_usage table_schema character varying (NA) 5 NA NA adventureworks view_column_usage table_name character varying (NA) 6 NA NA adventureworks view_column_usage column_name character varying (NA) 7 NA NA adventureworks view_routine_usage table_catalog character varying (NA) 1 NA NA adventureworks view_routine_usage table_schema character varying (NA) 2 NA NA adventureworks view_routine_usage table_name character varying (NA) 3 NA NA adventureworks view_routine_usage specific_catalog character varying (NA) 4 NA NA adventureworks view_routine_usage specific_schema character varying (NA) 5 NA NA adventureworks view_routine_usage specific_name character varying (NA) 6 NA NA adventureworks view_table_usage view_catalog character varying (NA) 1 NA NA adventureworks view_table_usage view_schema character varying (NA) 2 NA NA adventureworks view_table_usage view_name character varying (NA) 3 NA NA adventureworks view_table_usage table_catalog character varying (NA) 4 NA NA adventureworks view_table_usage table_schema character varying (NA) 5 NA NA adventureworks view_table_usage table_name character varying (NA) 6 NA NA adventureworks views table_catalog character varying (NA) 1 NA NA adventureworks views table_schema character varying (NA) 2 NA NA adventureworks views table_name character varying (NA) 3 NA NA adventureworks views view_definition character varying (NA) 4 NA NA adventureworks views check_option character varying (NA) 5 NA NA adventureworks views is_updatable character varying (3) 6 3 NA adventureworks views is_insertable_into character varying (3) 7 3 NA adventureworks views is_trigger_updatable character varying (3) 8 3 NA adventureworks views is_trigger_deletable character varying (3) 9 3 NA adventureworks views is_trigger_insertable_into character varying (3) 10 3 NA adventureworks data_type_privileges object_catalog character varying (NA) 1 NA NA adventureworks data_type_privileges object_schema character varying (NA) 2 NA NA adventureworks data_type_privileges object_name character varying (NA) 3 NA NA adventureworks data_type_privileges object_type character varying (NA) 4 NA NA adventureworks data_type_privileges dtd_identifier character varying (NA) 5 NA NA adventureworks element_types object_catalog character varying (NA) 1 NA NA adventureworks element_types object_schema character varying (NA) 2 NA NA adventureworks element_types object_name character varying (NA) 3 NA NA adventureworks element_types object_type character varying (NA) 4 NA NA adventureworks element_types collection_type_identifier character varying (NA) 5 NA NA adventureworks element_types data_type character varying (NA) 6 NA NA adventureworks element_types character_maximum_length integer 7 NA NA adventureworks element_types character_octet_length integer 8 NA NA adventureworks element_types character_set_catalog character varying (NA) 9 NA NA adventureworks element_types character_set_schema character varying (NA) 10 NA NA adventureworks element_types character_set_name character varying (NA) 11 NA NA adventureworks element_types collation_catalog character varying (NA) 12 NA NA adventureworks element_types collation_schema character varying (NA) 13 NA NA adventureworks element_types collation_name character varying (NA) 14 NA NA adventureworks element_types numeric_precision integer 15 NA NA adventureworks element_types numeric_precision_radix integer 16 NA NA adventureworks element_types numeric_scale integer 17 NA NA adventureworks element_types datetime_precision integer 18 NA NA adventureworks element_types interval_type character varying (NA) 19 NA NA adventureworks element_types interval_precision integer 20 NA NA adventureworks element_types domain_default character varying (NA) 21 NA NA adventureworks element_types udt_catalog character varying (NA) 22 NA NA adventureworks element_types udt_schema character varying (NA) 23 NA NA adventureworks element_types udt_name character varying (NA) 24 NA NA adventureworks element_types scope_catalog character varying (NA) 25 NA NA adventureworks element_types scope_schema character varying (NA) 26 NA NA adventureworks element_types scope_name character varying (NA) 27 NA NA adventureworks element_types maximum_cardinality integer 28 NA NA adventureworks element_types dtd_identifier character varying (NA) 29 NA NA adventureworks _pg_foreign_table_columns nspname name 1 NA NA adventureworks _pg_foreign_table_columns relname name 2 NA NA adventureworks _pg_foreign_table_columns attname name 3 NA NA adventureworks _pg_foreign_table_columns attfdwoptions ARRAY 4 NA NA adventureworks column_options table_catalog character varying (NA) 1 NA NA adventureworks column_options table_schema character varying (NA) 2 NA NA adventureworks column_options table_name character varying (NA) 3 NA NA adventureworks column_options column_name character varying (NA) 4 NA NA adventureworks column_options option_name character varying (NA) 5 NA NA adventureworks column_options option_value character varying (NA) 6 NA NA adventureworks _pg_foreign_data_wrappers oid oid 1 NA NA adventureworks _pg_foreign_data_wrappers fdwowner oid 2 NA NA adventureworks _pg_foreign_data_wrappers fdwoptions ARRAY 3 NA NA adventureworks _pg_foreign_data_wrappers foreign_data_wrapper_catalog character varying (NA) 4 NA NA adventureworks _pg_foreign_data_wrappers foreign_data_wrapper_name character varying (NA) 5 NA NA adventureworks _pg_foreign_data_wrappers authorization_identifier character varying (NA) 6 NA NA adventureworks _pg_foreign_data_wrappers foreign_data_wrapper_language character varying (NA) 7 NA NA adventureworks foreign_data_wrapper_options foreign_data_wrapper_catalog character varying (NA) 1 NA NA adventureworks foreign_data_wrapper_options foreign_data_wrapper_name character varying (NA) 2 NA NA adventureworks foreign_data_wrapper_options option_name character varying (NA) 3 NA NA adventureworks foreign_data_wrapper_options option_value character varying (NA) 4 NA NA adventureworks foreign_data_wrappers foreign_data_wrapper_catalog character varying (NA) 1 NA NA adventureworks foreign_data_wrappers foreign_data_wrapper_name character varying (NA) 2 NA NA adventureworks foreign_data_wrappers authorization_identifier character varying (NA) 3 NA NA adventureworks foreign_data_wrappers library_name character varying (NA) 4 NA NA adventureworks foreign_data_wrappers foreign_data_wrapper_language character varying (NA) 5 NA NA adventureworks _pg_foreign_servers oid oid 1 NA NA adventureworks _pg_foreign_servers srvoptions ARRAY 2 NA NA adventureworks _pg_foreign_servers foreign_server_catalog character varying (NA) 3 NA NA adventureworks _pg_foreign_servers foreign_server_name character varying (NA) 4 NA NA adventureworks _pg_foreign_servers foreign_data_wrapper_catalog character varying (NA) 5 NA NA adventureworks _pg_foreign_servers foreign_data_wrapper_name character varying (NA) 6 NA NA adventureworks _pg_foreign_servers foreign_server_type character varying (NA) 7 NA NA adventureworks _pg_foreign_servers foreign_server_version character varying (NA) 8 NA NA adventureworks _pg_foreign_servers authorization_identifier character varying (NA) 9 NA NA adventureworks foreign_server_options foreign_server_catalog character varying (NA) 1 NA NA adventureworks foreign_server_options foreign_server_name character varying (NA) 2 NA NA adventureworks foreign_server_options option_name character varying (NA) 3 NA NA adventureworks foreign_server_options option_value character varying (NA) 4 NA NA adventureworks foreign_servers foreign_server_catalog character varying (NA) 1 NA NA adventureworks foreign_servers foreign_server_name character varying (NA) 2 NA NA adventureworks foreign_servers foreign_data_wrapper_catalog character varying (NA) 3 NA NA adventureworks foreign_servers foreign_data_wrapper_name character varying (NA) 4 NA NA adventureworks foreign_servers foreign_server_type character varying (NA) 5 NA NA adventureworks foreign_servers foreign_server_version character varying (NA) 6 NA NA adventureworks foreign_servers authorization_identifier character varying (NA) 7 NA NA adventureworks _pg_foreign_tables foreign_table_catalog character varying (NA) 1 NA NA adventureworks _pg_foreign_tables foreign_table_schema character varying (NA) 2 NA NA adventureworks _pg_foreign_tables foreign_table_name character varying (NA) 3 NA NA adventureworks _pg_foreign_tables ftoptions ARRAY 4 NA NA adventureworks _pg_foreign_tables foreign_server_catalog character varying (NA) 5 NA NA adventureworks _pg_foreign_tables foreign_server_name character varying (NA) 6 NA NA adventureworks _pg_foreign_tables authorization_identifier character varying (NA) 7 NA NA adventureworks foreign_table_options foreign_table_catalog character varying (NA) 1 NA NA adventureworks foreign_table_options foreign_table_schema character varying (NA) 2 NA NA adventureworks foreign_table_options foreign_table_name character varying (NA) 3 NA NA adventureworks foreign_table_options option_name character varying (NA) 4 NA NA adventureworks foreign_table_options option_value character varying (NA) 5 NA NA adventureworks foreign_tables foreign_table_catalog character varying (NA) 1 NA NA adventureworks foreign_tables foreign_table_schema character varying (NA) 2 NA NA adventureworks foreign_tables foreign_table_name character varying (NA) 3 NA NA adventureworks foreign_tables foreign_server_catalog character varying (NA) 4 NA NA adventureworks foreign_tables foreign_server_name character varying (NA) 5 NA NA adventureworks _pg_user_mappings oid oid 1 NA NA adventureworks _pg_user_mappings umoptions ARRAY 2 NA NA adventureworks _pg_user_mappings umuser oid 3 NA NA adventureworks _pg_user_mappings authorization_identifier character varying (NA) 4 NA NA adventureworks _pg_user_mappings foreign_server_catalog character varying (NA) 5 NA NA adventureworks _pg_user_mappings foreign_server_name character varying (NA) 6 NA NA adventureworks _pg_user_mappings srvowner character varying (NA) 7 NA NA adventureworks user_mapping_options authorization_identifier character varying (NA) 1 NA NA adventureworks user_mapping_options foreign_server_catalog character varying (NA) 2 NA NA adventureworks user_mapping_options foreign_server_name character varying (NA) 3 NA NA adventureworks user_mapping_options option_name character varying (NA) 4 NA NA adventureworks user_mapping_options option_value character varying (NA) 5 NA NA adventureworks user_mappings authorization_identifier character varying (NA) 1 NA NA adventureworks user_mappings foreign_server_catalog character varying (NA) 2 NA NA adventureworks user_mappings foreign_server_name character varying (NA) 3 NA NA adventureworks employee salariedflag boolean 9 NA true adventureworks employee vacationhours smallint 10 NA 0 adventureworks employee sickleavehours smallint 11 NA 0 adventureworks employee currentflag boolean 12 NA true adventureworks employee rowguid uuid 13 NA uuid_generate_v1() adventureworks employee modifieddate timestamp without time zone 14 NA now() adventureworks employee organizationnode character varying (NA) 15 NA ‘/’::character varying adventureworks e id integer 1 NA NA adventureworks e businessentityid integer 2 NA NA adventureworks e nationalidnumber character varying (15) 3 15 NA adventureworks e loginid character varying (256) 4 256 NA adventureworks e jobtitle character varying (50) 5 50 NA adventureworks e birthdate date 6 NA NA adventureworks e maritalstatus character 7 1 NA adventureworks e gender character 8 1 NA adventureworks e hiredate date 9 NA NA adventureworks e salariedflag boolean 10 NA NA adventureworks e vacationhours smallint 11 NA NA adventureworks e sickleavehours smallint 12 NA NA adventureworks e currentflag boolean 13 NA NA adventureworks e rowguid uuid 14 NA NA adventureworks e modifieddate timestamp without time zone 15 NA NA adventureworks e organizationnode character varying (NA) 16 NA NA adventureworks employeedepartmenthistory businessentityid integer 1 NA NA adventureworks employeedepartmenthistory departmentid smallint 2 NA NA adventureworks employeedepartmenthistory shiftid smallint 3 NA NA adventureworks employeedepartmenthistory startdate date 4 NA NA adventureworks employeedepartmenthistory enddate date 5 NA NA adventureworks employeedepartmenthistory modifieddate timestamp without time zone 6 NA now() adventureworks edh id integer 1 NA NA adventureworks edh businessentityid integer 2 NA NA adventureworks edh departmentid smallint 3 NA NA adventureworks edh shiftid smallint 4 NA NA adventureworks edh startdate date 5 NA NA adventureworks edh enddate date 6 NA NA adventureworks edh modifieddate timestamp without time zone 7 NA NA adventureworks employeepayhistory businessentityid integer 1 NA NA adventureworks employeepayhistory ratechangedate timestamp without time zone 2 NA NA adventureworks employeepayhistory rate numeric 3 NA NA adventureworks employeepayhistory payfrequency smallint 4 NA NA adventureworks employeepayhistory modifieddate timestamp without time zone 5 NA now() adventureworks eph id integer 1 NA NA adventureworks eph businessentityid integer 2 NA NA adventureworks eph ratechangedate timestamp without time zone 3 NA NA adventureworks eph rate numeric 4 NA NA adventureworks eph payfrequency smallint 5 NA NA adventureworks eph modifieddate timestamp without time zone 6 NA NA adventureworks jobcandidate businessentityid integer 2 NA NA adventureworks jobcandidate resume xml 3 NA NA adventureworks jobcandidate modifieddate timestamp without time zone 4 NA now() adventureworks jobcandidate jobcandidateid integer 1 NA nextval(‘humanresources.jobcandidate_jobcandidateid_seq’::regclass) adventureworks jc id integer 1 NA NA adventureworks jc jobcandidateid integer 2 NA NA adventureworks jc businessentityid integer 3 NA NA adventureworks jc resume xml 4 NA NA adventureworks jc modifieddate timestamp without time zone 5 NA NA adventureworks shift name character varying (50) 2 50 NA adventureworks shift starttime time without time zone 3 NA NA adventureworks shift endtime time without time zone 4 NA NA adventureworks shift modifieddate timestamp without time zone 5 NA now() adventureworks s id integer 1 NA NA adventureworks s shiftid integer 2 NA NA adventureworks s name character varying (50) 3 50 NA adventureworks s starttime time without time zone 4 NA NA adventureworks s endtime time without time zone 5 NA NA adventureworks s modifieddate timestamp without time zone 6 NA NA adventureworks address addressline1 character varying (60) 2 60 NA adventureworks address addressline2 character varying (60) 3 60 NA adventureworks address city character varying (30) 4 30 NA adventureworks address stateprovinceid integer 5 NA NA adventureworks address postalcode character varying (15) 6 15 NA adventureworks address spatiallocation character varying (44) 7 44 NA adventureworks address rowguid uuid 8 NA uuid_generate_v1() adventureworks address modifieddate timestamp without time zone 9 NA now() adventureworks businessentityaddress businessentityid integer 1 NA NA adventureworks businessentityaddress addressid integer 2 NA NA adventureworks businessentityaddress addresstypeid integer 3 NA NA adventureworks businessentityaddress rowguid uuid 4 NA uuid_generate_v1() adventureworks businessentityaddress modifieddate timestamp without time zone 5 NA now() adventureworks countryregion countryregioncode character varying (3) 1 3 NA adventureworks countryregion name character varying (50) 2 50 NA adventureworks countryregion modifieddate timestamp without time zone 3 NA now() adventureworks address addressid integer 1 NA nextval(‘person.address_addressid_seq’::regclass) adventureworks emailaddress businessentityid integer 1 NA NA adventureworks emailaddress emailaddress character varying (50) 3 50 NA adventureworks emailaddress rowguid uuid 4 NA uuid_generate_v1() adventureworks emailaddress modifieddate timestamp without time zone 5 NA now() adventureworks person businessentityid integer 1 NA NA adventureworks person persontype character 2 2 NA adventureworks person title character varying (8) 4 8 NA adventureworks person firstname character varying (50) 5 50 NA adventureworks person middlename character varying (50) 6 50 NA adventureworks person lastname character varying (50) 7 50 NA adventureworks person suffix character varying (10) 8 10 NA adventureworks person additionalcontactinfo xml 10 NA NA adventureworks person demographics xml 11 NA NA adventureworks person namestyle boolean 3 NA false adventureworks person emailpromotion integer 9 NA 0 adventureworks person rowguid uuid 12 NA uuid_generate_v1() adventureworks person modifieddate timestamp without time zone 13 NA now() adventureworks personphone businessentityid integer 1 NA NA adventureworks personphone phonenumber character varying (25) 2 25 NA adventureworks personphone phonenumbertypeid integer 3 NA NA adventureworks personphone modifieddate timestamp without time zone 4 NA now() adventureworks emailaddress emailaddressid integer 2 NA nextval(‘person.emailaddress_emailaddressid_seq’::regclass) adventureworks phonenumbertype name character varying (50) 2 50 NA adventureworks phonenumbertype modifieddate timestamp without time zone 3 NA now() adventureworks stateprovince stateprovincecode character 2 3 NA adventureworks stateprovince countryregioncode character varying (3) 3 3 NA adventureworks stateprovince name character varying (50) 5 50 NA adventureworks stateprovince territoryid integer 6 NA NA adventureworks stateprovince isonlystateprovinceflag boolean 4 NA true adventureworks stateprovince rowguid uuid 7 NA uuid_generate_v1() adventureworks stateprovince modifieddate timestamp without time zone 8 NA now() adventureworks phonenumbertype phonenumbertypeid integer 1 NA nextval(‘person.phonenumbertype_phonenumbertypeid_seq’::regclass) adventureworks stateprovince stateprovinceid integer 1 NA nextval(‘person.stateprovince_stateprovinceid_seq’::regclass) adventureworks vemployee businessentityid integer 1 NA NA adventureworks vemployee title character varying (8) 2 8 NA adventureworks vemployee firstname character varying (50) 3 50 NA adventureworks vemployee middlename character varying (50) 4 50 NA adventureworks vemployee lastname character varying (50) 5 50 NA adventureworks vemployee suffix character varying (10) 6 10 NA adventureworks vemployee jobtitle character varying (50) 7 50 NA adventureworks vemployee phonenumber character varying (25) 8 25 NA adventureworks vemployee phonenumbertype character varying (50) 9 50 NA adventureworks vemployee emailaddress character varying (50) 10 50 NA adventureworks vemployee emailpromotion integer 11 NA NA adventureworks vemployee addressline1 character varying (60) 12 60 NA adventureworks vemployee addressline2 character varying (60) 13 60 NA adventureworks vemployee city character varying (30) 14 30 NA adventureworks vemployee stateprovincename character varying (50) 15 50 NA adventureworks vemployee postalcode character varying (15) 16 15 NA adventureworks vemployee countryregionname character varying (50) 17 50 NA adventureworks vemployee additionalcontactinfo xml 18 NA NA adventureworks vemployeedepartment businessentityid integer 1 NA NA adventureworks vemployeedepartment title character varying (8) 2 8 NA adventureworks vemployeedepartment firstname character varying (50) 3 50 NA adventureworks vemployeedepartment middlename character varying (50) 4 50 NA adventureworks vemployeedepartment lastname character varying (50) 5 50 NA adventureworks vemployeedepartment suffix character varying (10) 6 10 NA adventureworks vemployeedepartment jobtitle character varying (50) 7 50 NA adventureworks vemployeedepartment department character varying (50) 8 50 NA adventureworks vemployeedepartment groupname character varying (50) 9 50 NA adventureworks vemployeedepartment startdate date 10 NA NA adventureworks vemployeedepartmenthistory businessentityid integer 1 NA NA adventureworks vemployeedepartmenthistory title character varying (8) 2 8 NA adventureworks vemployeedepartmenthistory firstname character varying (50) 3 50 NA adventureworks vemployeedepartmenthistory middlename character varying (50) 4 50 NA adventureworks vemployeedepartmenthistory lastname character varying (50) 5 50 NA adventureworks vemployeedepartmenthistory suffix character varying (10) 6 10 NA adventureworks vemployeedepartmenthistory shift character varying (50) 7 50 NA adventureworks vemployeedepartmenthistory department character varying (50) 8 50 NA adventureworks vemployeedepartmenthistory groupname character varying (50) 9 50 NA adventureworks vemployeedepartmenthistory startdate date 10 NA NA adventureworks vemployeedepartmenthistory enddate date 11 NA NA adventureworks vjobcandidate jobcandidateid integer 1 NA NA adventureworks vjobcandidate businessentityid integer 2 NA NA adventureworks vjobcandidate Name.Prefix character varying (30) 3 30 NA adventureworks vjobcandidate Name.First character varying (30) 4 30 NA adventureworks vjobcandidate Name.Middle character varying (30) 5 30 NA adventureworks vjobcandidate Name.Last character varying (30) 6 30 NA adventureworks vjobcandidate Name.Suffix character varying (30) 7 30 NA adventureworks vjobcandidate Skills character varying (NA) 8 NA NA adventureworks vjobcandidate Addr.Type character varying (30) 9 30 NA adventureworks vjobcandidate Addr.Loc.CountryRegion character varying (100) 10 100 NA adventureworks vjobcandidate Addr.Loc.State character varying (100) 11 100 NA adventureworks vjobcandidate Addr.Loc.City character varying (100) 12 100 NA adventureworks vjobcandidate Addr.PostalCode character varying (20) 13 20 NA adventureworks vjobcandidate EMail character varying (NA) 14 NA NA adventureworks vjobcandidate WebSite character varying (NA) 15 NA NA adventureworks vjobcandidate modifieddate timestamp without time zone 16 NA NA adventureworks vjobcandidateeducation jobcandidateid integer 1 NA NA adventureworks vjobcandidateeducation Edu.Level character varying (50) 2 50 NA adventureworks vjobcandidateeducation Edu.StartDate date 3 NA NA adventureworks vjobcandidateeducation Edu.EndDate date 4 NA NA adventureworks vjobcandidateeducation Edu.Degree character varying (50) 5 50 NA adventureworks vjobcandidateeducation Edu.Major character varying (50) 6 50 NA adventureworks vjobcandidateeducation Edu.Minor character varying (50) 7 50 NA adventureworks vjobcandidateeducation Edu.GPA character varying (5) 8 5 NA adventureworks vjobcandidateeducation Edu.GPAScale character varying (5) 9 5 NA adventureworks vjobcandidateeducation Edu.School character varying (100) 10 100 NA adventureworks vjobcandidateeducation Edu.Loc.CountryRegion character varying (100) 11 100 NA adventureworks vjobcandidateeducation Edu.Loc.State character varying (100) 12 100 NA adventureworks vjobcandidateeducation Edu.Loc.City character varying (100) 13 100 NA adventureworks vjobcandidateemployment jobcandidateid integer 1 NA NA adventureworks vjobcandidateemployment Emp.StartDate date 2 NA NA adventureworks vjobcandidateemployment Emp.EndDate date 3 NA NA adventureworks vjobcandidateemployment Emp.OrgName character varying (100) 4 100 NA adventureworks vjobcandidateemployment Emp.JobTitle character varying (100) 5 100 NA adventureworks vjobcandidateemployment Emp.Responsibility character varying (NA) 6 NA NA adventureworks vjobcandidateemployment Emp.FunctionCategory character varying (NA) 7 NA NA adventureworks vjobcandidateemployment Emp.IndustryCategory character varying (NA) 8 NA NA adventureworks vjobcandidateemployment Emp.Loc.CountryRegion character varying (NA) 9 NA NA adventureworks vjobcandidateemployment Emp.Loc.State character varying (NA) 10 NA NA adventureworks vjobcandidateemployment Emp.Loc.City character varying (NA) 11 NA NA adventureworks a id integer 1 NA NA adventureworks a addressid integer 2 NA NA adventureworks a addressline1 character varying (60) 3 60 NA adventureworks a addressline2 character varying (60) 4 60 NA adventureworks a city character varying (30) 5 30 NA adventureworks a stateprovinceid integer 6 NA NA adventureworks a postalcode character varying (15) 7 15 NA adventureworks a spatiallocation character varying (44) 8 44 NA adventureworks a rowguid uuid 9 NA NA adventureworks a modifieddate timestamp without time zone 10 NA NA adventureworks addresstype name character varying (50) 2 50 NA adventureworks addresstype rowguid uuid 3 NA uuid_generate_v1() adventureworks addresstype modifieddate timestamp without time zone 4 NA now() adventureworks addresstype addresstypeid integer 1 NA nextval(‘person.addresstype_addresstypeid_seq’::regclass) adventureworks at id integer 1 NA NA adventureworks at addresstypeid integer 2 NA NA adventureworks at name character varying (50) 3 50 NA adventureworks at rowguid uuid 4 NA NA adventureworks at modifieddate timestamp without time zone 5 NA NA adventureworks businessentity rowguid uuid 2 NA uuid_generate_v1() adventureworks businessentity modifieddate timestamp without time zone 3 NA now() adventureworks be id integer 1 NA NA adventureworks be businessentityid integer 2 NA NA adventureworks be rowguid uuid 3 NA NA adventureworks be modifieddate timestamp without time zone 4 NA NA adventureworks bea id integer 1 NA NA adventureworks bea businessentityid integer 2 NA NA adventureworks bea addressid integer 3 NA NA adventureworks bea addresstypeid integer 4 NA NA adventureworks bea rowguid uuid 5 NA NA adventureworks bea modifieddate timestamp without time zone 6 NA NA adventureworks businessentitycontact businessentityid integer 1 NA NA adventureworks businessentitycontact personid integer 2 NA NA adventureworks businessentitycontact contacttypeid integer 3 NA NA adventureworks businessentitycontact rowguid uuid 4 NA uuid_generate_v1() adventureworks businessentitycontact modifieddate timestamp without time zone 5 NA now() adventureworks bec id integer 1 NA NA adventureworks bec businessentityid integer 2 NA NA adventureworks bec personid integer 3 NA NA adventureworks bec contacttypeid integer 4 NA NA adventureworks bec rowguid uuid 5 NA NA adventureworks bec modifieddate timestamp without time zone 6 NA NA adventureworks cr countryregioncode character varying (3) 1 3 NA adventureworks cr name character varying (50) 2 50 NA adventureworks cr modifieddate timestamp without time zone 3 NA NA adventureworks contacttype name character varying (50) 2 50 NA adventureworks contacttype modifieddate timestamp without time zone 3 NA now() adventureworks ct id integer 1 NA NA adventureworks ct contacttypeid integer 2 NA NA adventureworks ct name character varying (50) 3 50 NA adventureworks ct modifieddate timestamp without time zone 4 NA NA adventureworks e id integer 1 NA NA adventureworks e businessentityid integer 2 NA NA adventureworks e emailaddressid integer 3 NA NA adventureworks e emailaddress character varying (50) 4 50 NA adventureworks e rowguid uuid 5 NA NA adventureworks e modifieddate timestamp without time zone 6 NA NA adventureworks p id integer 1 NA NA adventureworks p businessentityid integer 2 NA NA adventureworks p persontype character 3 2 NA adventureworks p namestyle boolean 4 NA NA adventureworks p title character varying (8) 5 8 NA adventureworks p firstname character varying (50) 6 50 NA adventureworks p middlename character varying (50) 7 50 NA adventureworks p lastname character varying (50) 8 50 NA adventureworks p suffix character varying (10) 9 10 NA adventureworks p emailpromotion integer 10 NA NA adventureworks p additionalcontactinfo xml 11 NA NA adventureworks p demographics xml 12 NA NA adventureworks p rowguid uuid 13 NA NA adventureworks p modifieddate timestamp without time zone 14 NA NA adventureworks password businessentityid integer 1 NA NA adventureworks password passwordhash character varying (128) 2 128 NA adventureworks password passwordsalt character varying (10) 3 10 NA adventureworks password rowguid uuid 4 NA uuid_generate_v1() adventureworks password modifieddate timestamp without time zone 5 NA now() adventureworks pa id integer 1 NA NA adventureworks pa businessentityid integer 2 NA NA adventureworks pa passwordhash character varying (128) 3 128 NA adventureworks pa passwordsalt character varying (10) 4 10 NA adventureworks pa rowguid uuid 5 NA NA adventureworks pa modifieddate timestamp without time zone 6 NA NA adventureworks pnt id integer 1 NA NA adventureworks pnt phonenumbertypeid integer 2 NA NA adventureworks pnt name character varying (50) 3 50 NA adventureworks pnt modifieddate timestamp without time zone 4 NA NA adventureworks pp id integer 1 NA NA adventureworks pp businessentityid integer 2 NA NA adventureworks pp phonenumber character varying (25) 3 25 NA adventureworks pp phonenumbertypeid integer 4 NA NA adventureworks pp modifieddate timestamp without time zone 5 NA NA adventureworks sp id integer 1 NA NA adventureworks sp stateprovinceid integer 2 NA NA adventureworks sp stateprovincecode character 3 3 NA adventureworks sp countryregioncode character varying (3) 4 3 NA adventureworks sp isonlystateprovinceflag boolean 5 NA NA adventureworks sp name character varying (50) 6 50 NA adventureworks sp territoryid integer 7 NA NA adventureworks sp rowguid uuid 8 NA NA adventureworks sp modifieddate timestamp without time zone 9 NA NA adventureworks vadditionalcontactinfo businessentityid integer 1 NA NA adventureworks vadditionalcontactinfo firstname character varying (50) 2 50 NA adventureworks vadditionalcontactinfo middlename character varying (50) 3 50 NA adventureworks vadditionalcontactinfo lastname character varying (50) 4 50 NA adventureworks vadditionalcontactinfo telephonenumber xml 5 NA NA adventureworks vadditionalcontactinfo telephonespecialinstructions text 6 NA NA adventureworks vadditionalcontactinfo street xml 7 NA NA adventureworks vadditionalcontactinfo city xml 8 NA NA adventureworks vadditionalcontactinfo stateprovince xml 9 NA NA adventureworks vadditionalcontactinfo postalcode xml 10 NA NA adventureworks vadditionalcontactinfo countryregion xml 11 NA NA adventureworks vadditionalcontactinfo homeaddressspecialinstructions xml 12 NA NA adventureworks vadditionalcontactinfo emailaddress xml 13 NA NA adventureworks vadditionalcontactinfo emailspecialinstructions text 14 NA NA adventureworks vadditionalcontactinfo emailtelephonenumber xml 15 NA NA adventureworks vadditionalcontactinfo rowguid uuid 16 NA NA adventureworks vadditionalcontactinfo modifieddate timestamp without time zone 17 NA NA adventureworks billofmaterials productassemblyid integer 2 NA NA adventureworks billofmaterials componentid integer 3 NA NA adventureworks billofmaterials enddate timestamp without time zone 5 NA NA adventureworks billofmaterials unitmeasurecode character 6 3 NA adventureworks billofmaterials bomlevel smallint 7 NA NA adventureworks billofmaterials startdate timestamp without time zone 4 NA now() adventureworks billofmaterials perassemblyqty numeric 8 NA 1.00 adventureworks billofmaterials modifieddate timestamp without time zone 9 NA now() adventureworks bom id integer 1 NA NA adventureworks bom billofmaterialsid integer 2 NA NA adventureworks bom productassemblyid integer 3 NA NA adventureworks bom componentid integer 4 NA NA adventureworks bom startdate timestamp without time zone 5 NA NA adventureworks bom enddate timestamp without time zone 6 NA NA adventureworks bom unitmeasurecode character 7 3 NA adventureworks bom bomlevel smallint 8 NA NA adventureworks bom perassemblyqty numeric 9 NA NA adventureworks bom modifieddate timestamp without time zone 10 NA NA adventureworks culture cultureid character 1 6 NA adventureworks culture name character varying (50) 2 50 NA adventureworks culture modifieddate timestamp without time zone 3 NA now() adventureworks billofmaterials billofmaterialsid integer 1 NA nextval(‘production.billofmaterials_billofmaterialsid_seq’::regclass) adventureworks c id character 1 6 NA adventureworks c cultureid character 2 6 NA adventureworks c name character varying (50) 3 50 NA adventureworks c modifieddate timestamp without time zone 4 NA NA adventureworks document title character varying (50) 1 50 NA adventureworks document owner integer 2 NA NA adventureworks document filename character varying (400) 4 400 NA adventureworks document fileextension character varying (8) 5 8 NA adventureworks document revision character 6 5 NA adventureworks document status smallint 8 NA NA adventureworks document documentsummary text 9 NA NA adventureworks document document bytea 10 NA NA adventureworks document folderflag boolean 3 NA false adventureworks document changenumber integer 7 NA 0 adventureworks document rowguid uuid 11 NA uuid_generate_v1() adventureworks document modifieddate timestamp without time zone 12 NA now() adventureworks document documentnode character varying (NA) 13 NA ‘/’::character varying adventureworks d title character varying (50) 1 50 NA adventureworks d owner integer 2 NA NA adventureworks d folderflag boolean 3 NA NA adventureworks d filename character varying (400) 4 400 NA adventureworks d fileextension character varying (8) 5 8 NA adventureworks d revision character 6 5 NA adventureworks d changenumber integer 7 NA NA adventureworks d status smallint 8 NA NA adventureworks d documentsummary text 9 NA NA adventureworks d document bytea 10 NA NA adventureworks d rowguid uuid 11 NA NA adventureworks d modifieddate timestamp without time zone 12 NA NA adventureworks d documentnode character varying (NA) 13 NA NA adventureworks illustration diagram xml 2 NA NA adventureworks illustration modifieddate timestamp without time zone 3 NA now() adventureworks i id integer 1 NA NA adventureworks i illustrationid integer 2 NA NA adventureworks i diagram xml 3 NA NA adventureworks i modifieddate timestamp without time zone 4 NA NA adventureworks location name character varying (50) 2 50 NA adventureworks location costrate numeric 3 NA 0.00 adventureworks location availability numeric 4 NA 0.00 adventureworks location modifieddate timestamp without time zone 5 NA now() adventureworks l id integer 1 NA NA adventureworks l locationid integer 2 NA NA adventureworks l name character varying (50) 3 50 NA adventureworks l costrate numeric 4 NA NA adventureworks l availability numeric 5 NA NA adventureworks l modifieddate timestamp without time zone 6 NA NA adventureworks product name character varying (50) 2 50 NA adventureworks product productnumber character varying (25) 3 25 NA adventureworks product color character varying (15) 6 15 NA adventureworks product safetystocklevel smallint 7 NA NA adventureworks product reorderpoint smallint 8 NA NA adventureworks product standardcost numeric 9 NA NA adventureworks product listprice numeric 10 NA NA adventureworks product size character varying (5) 11 5 NA adventureworks product sizeunitmeasurecode character 12 3 NA adventureworks product weightunitmeasurecode character 13 3 NA adventureworks product weight numeric 14 NA NA adventureworks product daystomanufacture integer 15 NA NA adventureworks product productline character 16 2 NA adventureworks product class character 17 2 NA adventureworks product style character 18 2 NA adventureworks product productsubcategoryid integer 19 NA NA adventureworks product productmodelid integer 20 NA NA adventureworks product sellstartdate timestamp without time zone 21 NA NA adventureworks product sellenddate timestamp without time zone 22 NA NA adventureworks product discontinueddate timestamp without time zone 23 NA NA adventureworks product makeflag boolean 4 NA true adventureworks product finishedgoodsflag boolean 5 NA true adventureworks product rowguid uuid 24 NA uuid_generate_v1() adventureworks product modifieddate timestamp without time zone 25 NA now() adventureworks p id integer 1 NA NA adventureworks p productid integer 2 NA NA adventureworks p name character varying (50) 3 50 NA adventureworks p productnumber character varying (25) 4 25 NA adventureworks p makeflag boolean 5 NA NA adventureworks p finishedgoodsflag boolean 6 NA NA adventureworks p color character varying (15) 7 15 NA adventureworks p safetystocklevel smallint 8 NA NA adventureworks product productid integer 1 NA nextval(‘production.product_productid_seq’::regclass) adventureworks p reorderpoint smallint 9 NA NA adventureworks p standardcost numeric 10 NA NA adventureworks p listprice numeric 11 NA NA adventureworks p size character varying (5) 12 5 NA adventureworks p sizeunitmeasurecode character 13 3 NA adventureworks p weightunitmeasurecode character 14 3 NA adventureworks p weight numeric 15 NA NA adventureworks p daystomanufacture integer 16 NA NA adventureworks p productline character 17 2 NA adventureworks p class character 18 2 NA adventureworks p style character 19 2 NA adventureworks p productsubcategoryid integer 20 NA NA adventureworks p productmodelid integer 21 NA NA adventureworks p sellstartdate timestamp without time zone 22 NA NA adventureworks p sellenddate timestamp without time zone 23 NA NA adventureworks p discontinueddate timestamp without time zone 24 NA NA adventureworks p rowguid uuid 25 NA NA adventureworks p modifieddate timestamp without time zone 26 NA NA adventureworks productcategory name character varying (50) 2 50 NA adventureworks productcategory rowguid uuid 3 NA uuid_generate_v1() adventureworks productcategory modifieddate timestamp without time zone 4 NA now() adventureworks pc id integer 1 NA NA adventureworks pc productcategoryid integer 2 NA NA adventureworks pc name character varying (50) 3 50 NA adventureworks pc rowguid uuid 4 NA NA adventureworks pc modifieddate timestamp without time zone 5 NA NA adventureworks productcosthistory productid integer 1 NA NA adventureworks productcosthistory startdate timestamp without time zone 2 NA NA adventureworks productcosthistory enddate timestamp without time zone 3 NA NA adventureworks productcosthistory standardcost numeric 4 NA NA adventureworks productcosthistory modifieddate timestamp without time zone 5 NA now() adventureworks productcategory productcategoryid integer 1 NA nextval(‘production.productcategory_productcategoryid_seq’::regclass) adventureworks pch id integer 1 NA NA adventureworks pch productid integer 2 NA NA adventureworks pch startdate timestamp without time zone 3 NA NA adventureworks pch enddate timestamp without time zone 4 NA NA adventureworks pch standardcost numeric 5 NA NA adventureworks pch modifieddate timestamp without time zone 6 NA NA adventureworks productdescription description character varying (400) 2 400 NA adventureworks productdescription rowguid uuid 3 NA uuid_generate_v1() adventureworks productdescription modifieddate timestamp without time zone 4 NA now() adventureworks pd id integer 1 NA NA adventureworks pd productdescriptionid integer 2 NA NA adventureworks pd description character varying (400) 3 400 NA adventureworks pd rowguid uuid 4 NA NA adventureworks pd modifieddate timestamp without time zone 5 NA NA adventureworks productdocument productid integer 1 NA NA adventureworks productdocument modifieddate timestamp without time zone 2 NA now() adventureworks productdocument documentnode character varying (NA) 3 NA ‘/’::character varying adventureworks productdescription productdescriptionid integer 1 NA nextval(‘production.productdescription_productdescriptionid_seq’::regclass) adventureworks pdoc id integer 1 NA NA adventureworks pdoc productid integer 2 NA NA adventureworks pdoc modifieddate timestamp without time zone 3 NA NA adventureworks pdoc documentnode character varying (NA) 4 NA NA adventureworks productinventory productid integer 1 NA NA adventureworks productinventory locationid smallint 2 NA NA adventureworks productinventory shelf character varying (10) 3 10 NA adventureworks productinventory bin smallint 4 NA NA adventureworks productinventory quantity smallint 5 NA 0 adventureworks productinventory rowguid uuid 6 NA uuid_generate_v1() adventureworks productinventory modifieddate timestamp without time zone 7 NA now() adventureworks pi id integer 1 NA NA adventureworks pi productid integer 2 NA NA adventureworks pi locationid smallint 3 NA NA adventureworks pi shelf character varying (10) 4 10 NA adventureworks pi bin smallint 5 NA NA adventureworks pi quantity smallint 6 NA NA adventureworks pi rowguid uuid 7 NA NA adventureworks pi modifieddate timestamp without time zone 8 NA NA adventureworks productlistpricehistory productid integer 1 NA NA adventureworks productlistpricehistory startdate timestamp without time zone 2 NA NA adventureworks productlistpricehistory enddate timestamp without time zone 3 NA NA adventureworks productlistpricehistory listprice numeric 4 NA NA adventureworks productlistpricehistory modifieddate timestamp without time zone 5 NA now() adventureworks plph id integer 1 NA NA adventureworks plph productid integer 2 NA NA adventureworks plph startdate timestamp without time zone 3 NA NA adventureworks plph enddate timestamp without time zone 4 NA NA adventureworks plph listprice numeric 5 NA NA adventureworks plph modifieddate timestamp without time zone 6 NA NA adventureworks productmodel name character varying (50) 2 50 NA adventureworks productmodel catalogdescription xml 3 NA NA adventureworks productmodel instructions xml 4 NA NA adventureworks productmodel rowguid uuid 5 NA uuid_generate_v1() adventureworks productmodel modifieddate timestamp without time zone 6 NA now() adventureworks pm id integer 1 NA NA adventureworks pm productmodelid integer 2 NA NA adventureworks pm name character varying (50) 3 50 NA adventureworks pm catalogdescription xml 4 NA NA adventureworks pm instructions xml 5 NA NA adventureworks pm rowguid uuid 6 NA NA adventureworks pm modifieddate timestamp without time zone 7 NA NA adventureworks productmodelillustration productmodelid integer 1 NA NA adventureworks productmodelillustration illustrationid integer 2 NA NA adventureworks productmodelillustration modifieddate timestamp without time zone 3 NA now() adventureworks pmi productmodelid integer 1 NA NA adventureworks pmi illustrationid integer 2 NA NA adventureworks pmi modifieddate timestamp without time zone 3 NA NA adventureworks productmodelproductdescriptionculture productmodelid integer 1 NA NA adventureworks productmodelproductdescriptionculture productdescriptionid integer 2 NA NA adventureworks productmodelproductdescriptionculture cultureid character 3 6 NA adventureworks productmodelproductdescriptionculture modifieddate timestamp without time zone 4 NA now() adventureworks productmodel productmodelid integer 1 NA nextval(‘production.productmodel_productmodelid_seq’::regclass) adventureworks pmpdc productmodelid integer 1 NA NA adventureworks pmpdc productdescriptionid integer 2 NA NA adventureworks pmpdc cultureid character 3 6 NA adventureworks pmpdc modifieddate timestamp without time zone 4 NA NA adventureworks productphoto thumbnailphoto bytea 2 NA NA adventureworks productphoto thumbnailphotofilename character varying (50) 3 50 NA adventureworks productphoto largephoto bytea 4 NA NA adventureworks productphoto largephotofilename character varying (50) 5 50 NA adventureworks productphoto modifieddate timestamp without time zone 6 NA now() adventureworks pp id integer 1 NA NA adventureworks pp productphotoid integer 2 NA NA adventureworks pp thumbnailphoto bytea 3 NA NA adventureworks pp thumbnailphotofilename character varying (50) 4 50 NA adventureworks pp largephoto bytea 5 NA NA adventureworks pp largephotofilename character varying (50) 6 50 NA adventureworks pp modifieddate timestamp without time zone 7 NA NA adventureworks productproductphoto productid integer 1 NA NA adventureworks productproductphoto productphotoid integer 2 NA NA adventureworks productproductphoto primary boolean 3 NA false adventureworks productproductphoto modifieddate timestamp without time zone 4 NA now() adventureworks ppp productid integer 1 NA NA adventureworks ppp productphotoid integer 2 NA NA adventureworks ppp primary boolean 3 NA NA adventureworks ppp modifieddate timestamp without time zone 4 NA NA adventureworks productreview productid integer 2 NA NA adventureworks productreview reviewername character varying (50) 3 50 NA adventureworks productreview emailaddress character varying (50) 5 50 NA adventureworks productreview rating integer 6 NA NA adventureworks productphoto productphotoid integer 1 NA nextval(‘production.productphoto_productphotoid_seq’::regclass) adventureworks productreview comments character varying (3850) 7 3850 NA adventureworks productreview reviewdate timestamp without time zone 4 NA now() adventureworks productreview modifieddate timestamp without time zone 8 NA now() adventureworks pr id integer 1 NA NA adventureworks pr productreviewid integer 2 NA NA adventureworks pr productid integer 3 NA NA adventureworks pr reviewername character varying (50) 4 50 NA adventureworks pr reviewdate timestamp without time zone 5 NA NA adventureworks pr emailaddress character varying (50) 6 50 NA adventureworks pr rating integer 7 NA NA adventureworks pr comments character varying (3850) 8 3850 NA adventureworks pr modifieddate timestamp without time zone 9 NA NA adventureworks productsubcategory productcategoryid integer 2 NA NA adventureworks productsubcategory name character varying (50) 3 50 NA adventureworks productsubcategory rowguid uuid 4 NA uuid_generate_v1() adventureworks productsubcategory modifieddate timestamp without time zone 5 NA now() adventureworks psc id integer 1 NA NA adventureworks psc productsubcategoryid integer 2 NA NA adventureworks psc productcategoryid integer 3 NA NA adventureworks psc name character varying (50) 4 50 NA adventureworks psc rowguid uuid 5 NA NA adventureworks psc modifieddate timestamp without time zone 6 NA NA adventureworks scrapreason name character varying (50) 2 50 NA adventureworks scrapreason modifieddate timestamp without time zone 3 NA now() adventureworks sr id integer 1 NA NA adventureworks sr scrapreasonid integer 2 NA NA adventureworks sr name character varying (50) 3 50 NA adventureworks sr modifieddate timestamp without time zone 4 NA NA adventureworks transactionhistory productid integer 2 NA NA adventureworks transactionhistory referenceorderid integer 3 NA NA adventureworks transactionhistory transactiontype character 6 1 NA adventureworks transactionhistory quantity integer 7 NA NA adventureworks transactionhistory actualcost numeric 8 NA NA adventureworks transactionhistory referenceorderlineid integer 4 NA 0 adventureworks transactionhistory transactiondate timestamp without time zone 5 NA now() adventureworks transactionhistory modifieddate timestamp without time zone 9 NA now() adventureworks th id integer 1 NA NA adventureworks th transactionid integer 2 NA NA adventureworks th productid integer 3 NA NA adventureworks th referenceorderid integer 4 NA NA adventureworks th referenceorderlineid integer 5 NA NA adventureworks th transactiondate timestamp without time zone 6 NA NA adventureworks th transactiontype character 7 1 NA adventureworks th quantity integer 8 NA NA adventureworks th actualcost numeric 9 NA NA adventureworks th modifieddate timestamp without time zone 10 NA NA adventureworks transactionhistoryarchive transactionid integer 1 NA NA adventureworks transactionhistoryarchive productid integer 2 NA NA adventureworks transactionhistoryarchive referenceorderid integer 3 NA NA adventureworks transactionhistoryarchive transactiontype character 6 1 NA adventureworks transactionhistoryarchive quantity integer 7 NA NA adventureworks transactionhistoryarchive actualcost numeric 8 NA NA adventureworks transactionhistoryarchive referenceorderlineid integer 4 NA 0 adventureworks transactionhistoryarchive transactiondate timestamp without time zone 5 NA now() adventureworks transactionhistoryarchive modifieddate timestamp without time zone 9 NA now() adventureworks tha id integer 1 NA NA adventureworks tha transactionid integer 2 NA NA adventureworks tha productid integer 3 NA NA adventureworks tha referenceorderid integer 4 NA NA adventureworks tha referenceorderlineid integer 5 NA NA adventureworks tha transactiondate timestamp without time zone 6 NA NA adventureworks tha transactiontype character 7 1 NA adventureworks tha quantity integer 8 NA NA adventureworks tha actualcost numeric 9 NA NA adventureworks tha modifieddate timestamp without time zone 10 NA NA adventureworks unitmeasure unitmeasurecode character 1 3 NA adventureworks unitmeasure name character varying (50) 2 50 NA adventureworks unitmeasure modifieddate timestamp without time zone 3 NA now() adventureworks um id character 1 3 NA adventureworks um unitmeasurecode character 2 3 NA adventureworks um name character varying (50) 3 50 NA adventureworks um modifieddate timestamp without time zone 4 NA NA adventureworks workorder productid integer 2 NA NA adventureworks workorder orderqty integer 3 NA NA adventureworks workorder scrappedqty smallint 4 NA NA adventureworks workorder startdate timestamp without time zone 5 NA NA adventureworks workorder enddate timestamp without time zone 6 NA NA adventureworks workorder duedate timestamp without time zone 7 NA NA adventureworks workorder scrapreasonid smallint 8 NA NA adventureworks workorder modifieddate timestamp without time zone 9 NA now() adventureworks w id integer 1 NA NA adventureworks w workorderid integer 2 NA NA adventureworks w productid integer 3 NA NA adventureworks w orderqty integer 4 NA NA adventureworks w scrappedqty smallint 5 NA NA adventureworks w startdate timestamp without time zone 6 NA NA adventureworks w enddate timestamp without time zone 7 NA NA adventureworks w duedate timestamp without time zone 8 NA NA adventureworks w scrapreasonid smallint 9 NA NA adventureworks w modifieddate timestamp without time zone 10 NA NA adventureworks workorderrouting workorderid integer 1 NA NA adventureworks workorderrouting productid integer 2 NA NA adventureworks workorderrouting operationsequence smallint 3 NA NA adventureworks workorderrouting locationid smallint 4 NA NA adventureworks workorderrouting scheduledstartdate timestamp without time zone 5 NA NA adventureworks workorderrouting scheduledenddate timestamp without time zone 6 NA NA adventureworks workorderrouting actualstartdate timestamp without time zone 7 NA NA adventureworks workorderrouting actualenddate timestamp without time zone 8 NA NA adventureworks workorderrouting actualresourcehrs numeric 9 NA NA adventureworks workorderrouting plannedcost numeric 10 NA NA adventureworks workorderrouting actualcost numeric 11 NA NA adventureworks workorderrouting modifieddate timestamp without time zone 12 NA now() adventureworks workorder workorderid integer 1 NA nextval(‘production.workorder_workorderid_seq’::regclass) adventureworks wr id integer 1 NA NA adventureworks wr workorderid integer 2 NA NA adventureworks wr productid integer 3 NA NA adventureworks wr operationsequence smallint 4 NA NA adventureworks wr locationid smallint 5 NA NA adventureworks wr scheduledstartdate timestamp without time zone 6 NA NA adventureworks wr scheduledenddate timestamp without time zone 7 NA NA adventureworks wr actualstartdate timestamp without time zone 8 NA NA adventureworks wr actualenddate timestamp without time zone 9 NA NA adventureworks wr actualresourcehrs numeric 10 NA NA adventureworks wr plannedcost numeric 11 NA NA adventureworks wr actualcost numeric 12 NA NA adventureworks wr modifieddate timestamp without time zone 13 NA NA adventureworks vproductmodelcatalogdescription productmodelid integer 1 NA NA adventureworks vproductmodelcatalogdescription name character varying (50) 2 50 NA adventureworks vproductmodelcatalogdescription Summary character varying (NA) 3 NA NA adventureworks vproductmodelcatalogdescription manufacturer character varying (NA) 4 NA NA adventureworks vproductmodelcatalogdescription copyright character varying (30) 5 30 NA adventureworks vproductmodelcatalogdescription producturl character varying (256) 6 256 NA adventureworks vproductmodelcatalogdescription warrantyperiod character varying (256) 7 256 NA adventureworks vproductmodelcatalogdescription warrantydescription character varying (256) 8 256 NA adventureworks vproductmodelcatalogdescription noofyears character varying (256) 9 256 NA adventureworks vproductmodelcatalogdescription maintenancedescription character varying (256) 10 256 NA adventureworks vproductmodelcatalogdescription wheel character varying (256) 11 256 NA adventureworks vproductmodelcatalogdescription saddle character varying (256) 12 256 NA adventureworks vproductmodelcatalogdescription pedal character varying (256) 13 256 NA adventureworks vproductmodelcatalogdescription bikeframe character varying (NA) 14 NA NA adventureworks vproductmodelcatalogdescription crankset character varying (256) 15 256 NA adventureworks vproductmodelcatalogdescription pictureangle character varying (256) 16 256 NA adventureworks vproductmodelcatalogdescription picturesize character varying (256) 17 256 NA adventureworks vproductmodelcatalogdescription productphotoid character varying (256) 18 256 NA adventureworks vproductmodelcatalogdescription material character varying (256) 19 256 NA adventureworks vproductmodelcatalogdescription color character varying (256) 20 256 NA adventureworks vproductmodelcatalogdescription productline character varying (256) 21 256 NA adventureworks vproductmodelcatalogdescription style character varying (256) 22 256 NA adventureworks vproductmodelcatalogdescription riderexperience character varying (1024) 23 1024 NA adventureworks vproductmodelcatalogdescription rowguid uuid 24 NA NA adventureworks vproductmodelcatalogdescription modifieddate timestamp without time zone 25 NA NA adventureworks vproductmodelinstructions productmodelid integer 1 NA NA adventureworks vproductmodelinstructions name character varying (50) 2 50 NA adventureworks vproductmodelinstructions instructions character varying (NA) 3 NA NA adventureworks vproductmodelinstructions LocationID integer 4 NA NA adventureworks vproductmodelinstructions SetupHours numeric 5 NA NA adventureworks vproductmodelinstructions MachineHours numeric 6 NA NA adventureworks vproductmodelinstructions LaborHours numeric 7 NA NA adventureworks vproductmodelinstructions LotSize integer 8 NA NA adventureworks vproductmodelinstructions Step character varying (1024) 9 1024 NA adventureworks vproductmodelinstructions rowguid uuid 10 NA NA adventureworks vproductmodelinstructions modifieddate timestamp without time zone 11 NA NA adventureworks purchaseorderdetail purchaseorderid integer 1 NA NA adventureworks purchaseorderdetail duedate timestamp without time zone 3 NA NA adventureworks purchaseorderdetail orderqty smallint 4 NA NA adventureworks purchaseorderdetail productid integer 5 NA NA adventureworks purchaseorderdetail unitprice numeric 6 NA NA adventureworks purchaseorderdetail receivedqty numeric 7 NA NA adventureworks purchaseorderdetail rejectedqty numeric 8 NA NA adventureworks purchaseorderdetail modifieddate timestamp without time zone 9 NA now() adventureworks purchaseorderdetail purchaseorderdetailid integer 2 NA nextval(‘purchasing.purchaseorderdetail_purchaseorderdetailid_seq’::regclass) adventureworks pod id integer 1 NA NA adventureworks pod purchaseorderid integer 2 NA NA adventureworks pod purchaseorderdetailid integer 3 NA NA adventureworks pod duedate timestamp without time zone 4 NA NA adventureworks pod orderqty smallint 5 NA NA adventureworks pod productid integer 6 NA NA adventureworks pod unitprice numeric 7 NA NA adventureworks pod receivedqty numeric 8 NA NA adventureworks pod rejectedqty numeric 9 NA NA adventureworks pod modifieddate timestamp without time zone 10 NA NA adventureworks purchaseorderheader employeeid integer 4 NA NA adventureworks purchaseorderheader vendorid integer 5 NA NA adventureworks purchaseorderheader shipmethodid integer 6 NA NA adventureworks purchaseorderheader shipdate timestamp without time zone 8 NA NA adventureworks purchaseorderheader revisionnumber smallint 2 NA 0 adventureworks purchaseorderheader status smallint 3 NA 1 adventureworks purchaseorderheader orderdate timestamp without time zone 7 NA now() adventureworks purchaseorderheader subtotal numeric 9 NA 0.00 adventureworks purchaseorderheader taxamt numeric 10 NA 0.00 adventureworks purchaseorderheader freight numeric 11 NA 0.00 adventureworks purchaseorderheader modifieddate timestamp without time zone 12 NA now() adventureworks poh id integer 1 NA NA adventureworks poh purchaseorderid integer 2 NA NA adventureworks poh revisionnumber smallint 3 NA NA adventureworks poh status smallint 4 NA NA adventureworks poh employeeid integer 5 NA NA adventureworks poh vendorid integer 6 NA NA adventureworks poh shipmethodid integer 7 NA NA adventureworks poh orderdate timestamp without time zone 8 NA NA adventureworks poh shipdate timestamp without time zone 9 NA NA adventureworks poh subtotal numeric 10 NA NA adventureworks poh taxamt numeric 11 NA NA adventureworks poh freight numeric 12 NA NA adventureworks poh modifieddate timestamp without time zone 13 NA NA adventureworks productvendor productid integer 1 NA NA adventureworks productvendor businessentityid integer 2 NA NA adventureworks productvendor averageleadtime integer 3 NA NA adventureworks productvendor standardprice numeric 4 NA NA adventureworks productvendor lastreceiptcost numeric 5 NA NA adventureworks productvendor lastreceiptdate timestamp without time zone 6 NA NA adventureworks productvendor minorderqty integer 7 NA NA adventureworks productvendor maxorderqty integer 8 NA NA adventureworks productvendor onorderqty integer 9 NA NA adventureworks productvendor unitmeasurecode character 10 3 NA adventureworks productvendor modifieddate timestamp without time zone 11 NA now() adventureworks pv id integer 1 NA NA adventureworks pv productid integer 2 NA NA adventureworks pv businessentityid integer 3 NA NA adventureworks pv averageleadtime integer 4 NA NA adventureworks pv standardprice numeric 5 NA NA adventureworks pv lastreceiptcost numeric 6 NA NA adventureworks pv lastreceiptdate timestamp without time zone 7 NA NA adventureworks pv minorderqty integer 8 NA NA adventureworks pv maxorderqty integer 9 NA NA adventureworks pv onorderqty integer 10 NA NA adventureworks pv unitmeasurecode character 11 3 NA adventureworks pv modifieddate timestamp without time zone 12 NA NA adventureworks shipmethod name character varying (50) 2 50 NA adventureworks shipmethod shipbase numeric 3 NA 0.00 adventureworks shipmethod shipmethodid integer 1 NA nextval(‘purchasing.shipmethod_shipmethodid_seq’::regclass) adventureworks shipmethod shiprate numeric 4 NA 0.00 adventureworks shipmethod rowguid uuid 5 NA uuid_generate_v1() adventureworks shipmethod modifieddate timestamp without time zone 6 NA now() adventureworks sm id integer 1 NA NA adventureworks sm shipmethodid integer 2 NA NA adventureworks sm name character varying (50) 3 50 NA adventureworks sm shipbase numeric 4 NA NA adventureworks sm shiprate numeric 5 NA NA adventureworks sm rowguid uuid 6 NA NA adventureworks sm modifieddate timestamp without time zone 7 NA NA adventureworks vendor businessentityid integer 1 NA NA adventureworks vendor accountnumber character varying (15) 2 15 NA adventureworks vendor name character varying (50) 3 50 NA adventureworks vendor creditrating smallint 4 NA NA adventureworks vendor purchasingwebserviceurl character varying (1024) 7 1024 NA adventureworks vendor preferredvendorstatus boolean 5 NA true adventureworks vendor activeflag boolean 6 NA true adventureworks vendor modifieddate timestamp without time zone 8 NA now() adventureworks v id integer 1 NA NA adventureworks v businessentityid integer 2 NA NA adventureworks v accountnumber character varying (15) 3 15 NA adventureworks v name character varying (50) 4 50 NA adventureworks v creditrating smallint 5 NA NA adventureworks v preferredvendorstatus boolean 6 NA NA adventureworks v activeflag boolean 7 NA NA adventureworks v purchasingwebserviceurl character varying (1024) 8 1024 NA adventureworks v modifieddate timestamp without time zone 9 NA NA adventureworks vvendorwithaddresses businessentityid integer 1 NA NA adventureworks vvendorwithaddresses name character varying (50) 2 50 NA adventureworks vvendorwithaddresses addresstype character varying (50) 3 50 NA adventureworks vvendorwithaddresses addressline1 character varying (60) 4 60 NA adventureworks vvendorwithaddresses addressline2 character varying (60) 5 60 NA adventureworks vvendorwithaddresses city character varying (30) 6 30 NA adventureworks vvendorwithaddresses stateprovincename character varying (50) 7 50 NA adventureworks vvendorwithaddresses postalcode character varying (15) 8 15 NA adventureworks vvendorwithaddresses countryregionname character varying (50) 9 50 NA adventureworks vvendorwithcontacts businessentityid integer 1 NA NA adventureworks vvendorwithcontacts name character varying (50) 2 50 NA adventureworks vvendorwithcontacts contacttype character varying (50) 3 50 NA adventureworks vvendorwithcontacts title character varying (8) 4 8 NA adventureworks vvendorwithcontacts firstname character varying (50) 5 50 NA adventureworks vvendorwithcontacts middlename character varying (50) 6 50 NA adventureworks vvendorwithcontacts lastname character varying (50) 7 50 NA adventureworks vvendorwithcontacts suffix character varying (10) 8 10 NA adventureworks vvendorwithcontacts phonenumber character varying (25) 9 25 NA adventureworks vvendorwithcontacts phonenumbertype character varying (50) 10 50 NA adventureworks vvendorwithcontacts emailaddress character varying (50) 11 50 NA adventureworks vvendorwithcontacts emailpromotion integer 12 NA NA adventureworks customer personid integer 2 NA NA adventureworks customer storeid integer 3 NA NA adventureworks customer territoryid integer 4 NA NA adventureworks customer rowguid uuid 5 NA uuid_generate_v1() adventureworks customer modifieddate timestamp without time zone 6 NA now() adventureworks c id integer 1 NA NA adventureworks c customerid integer 2 NA NA adventureworks c personid integer 3 NA NA adventureworks c storeid integer 4 NA NA adventureworks c territoryid integer 5 NA NA adventureworks c rowguid uuid 6 NA NA adventureworks c modifieddate timestamp without time zone 7 NA NA adventureworks creditcard cardtype character varying (50) 2 50 NA adventureworks creditcard cardnumber character varying (25) 3 25 NA adventureworks creditcard expmonth smallint 4 NA NA adventureworks creditcard expyear smallint 5 NA NA adventureworks creditcard modifieddate timestamp without time zone 6 NA now() adventureworks cc id integer 1 NA NA adventureworks cc creditcardid integer 2 NA NA adventureworks cc cardtype character varying (50) 3 50 NA adventureworks cc cardnumber character varying (25) 4 25 NA adventureworks cc expmonth smallint 5 NA NA adventureworks cc expyear smallint 6 NA NA adventureworks cc modifieddate timestamp without time zone 7 NA NA adventureworks currencyrate currencyratedate timestamp without time zone 2 NA NA adventureworks currencyrate fromcurrencycode character 3 3 NA adventureworks currencyrate tocurrencycode character 4 3 NA adventureworks currencyrate averagerate numeric 5 NA NA adventureworks currencyrate endofdayrate numeric 6 NA NA adventureworks currencyrate modifieddate timestamp without time zone 7 NA now() adventureworks creditcard creditcardid integer 1 NA nextval(‘sales.creditcard_creditcardid_seq’::regclass) adventureworks cr currencyrateid integer 1 NA NA adventureworks cr currencyratedate timestamp without time zone 2 NA NA adventureworks cr fromcurrencycode character 3 3 NA adventureworks cr tocurrencycode character 4 3 NA adventureworks cr averagerate numeric 5 NA NA adventureworks cr endofdayrate numeric 6 NA NA adventureworks cr modifieddate timestamp without time zone 7 NA NA adventureworks countryregioncurrency countryregioncode character varying (3) 1 3 NA adventureworks countryregioncurrency currencycode character 2 3 NA adventureworks countryregioncurrency modifieddate timestamp without time zone 3 NA now() adventureworks crc countryregioncode character varying (3) 1 3 NA adventureworks crc currencycode character 2 3 NA adventureworks crc modifieddate timestamp without time zone 3 NA NA adventureworks currency currencycode character 1 3 NA adventureworks currency name character varying (50) 2 50 NA adventureworks currency modifieddate timestamp without time zone 3 NA now() adventureworks cu id character 1 3 NA adventureworks cu currencycode character 2 3 NA adventureworks cu name character varying (50) 3 50 NA adventureworks cu modifieddate timestamp without time zone 4 NA NA adventureworks personcreditcard businessentityid integer 1 NA NA adventureworks personcreditcard creditcardid integer 2 NA NA adventureworks personcreditcard modifieddate timestamp without time zone 3 NA now() adventureworks pcc id integer 1 NA NA adventureworks pcc businessentityid integer 2 NA NA adventureworks pcc creditcardid integer 3 NA NA adventureworks pcc modifieddate timestamp without time zone 4 NA NA adventureworks store businessentityid integer 1 NA NA adventureworks store name character varying (50) 2 50 NA adventureworks store salespersonid integer 3 NA NA adventureworks store demographics xml 4 NA NA adventureworks store rowguid uuid 5 NA uuid_generate_v1() adventureworks store modifieddate timestamp without time zone 6 NA now() adventureworks s id integer 1 NA NA adventureworks s businessentityid integer 2 NA NA adventureworks s name character varying (50) 3 50 NA adventureworks s salespersonid integer 4 NA NA adventureworks s demographics xml 5 NA NA adventureworks s rowguid uuid 6 NA NA adventureworks s modifieddate timestamp without time zone 7 NA NA adventureworks shoppingcartitem shoppingcartid character varying (50) 2 50 NA adventureworks shoppingcartitem productid integer 4 NA NA adventureworks shoppingcartitem quantity integer 3 NA 1 adventureworks shoppingcartitem datecreated timestamp without time zone 5 NA now() adventureworks shoppingcartitem modifieddate timestamp without time zone 6 NA now() adventureworks sci id integer 1 NA NA adventureworks sci shoppingcartitemid integer 2 NA NA adventureworks sci shoppingcartid character varying (50) 3 50 NA adventureworks sci quantity integer 4 NA NA adventureworks sci productid integer 5 NA NA adventureworks sci datecreated timestamp without time zone 6 NA NA adventureworks sci modifieddate timestamp without time zone 7 NA NA adventureworks specialoffer description character varying (255) 2 255 NA adventureworks specialoffer type character varying (50) 4 50 NA adventureworks specialoffer category character varying (50) 5 50 NA adventureworks specialoffer startdate timestamp without time zone 6 NA NA adventureworks specialoffer enddate timestamp without time zone 7 NA NA adventureworks specialoffer maxqty integer 9 NA NA adventureworks specialoffer discountpct numeric 3 NA 0.00 adventureworks specialoffer minqty integer 8 NA 0 adventureworks specialoffer rowguid uuid 10 NA uuid_generate_v1() adventureworks specialoffer modifieddate timestamp without time zone 11 NA now() adventureworks so id integer 1 NA NA adventureworks so specialofferid integer 2 NA NA adventureworks so description character varying (255) 3 255 NA adventureworks so discountpct numeric 4 NA NA adventureworks so type character varying (50) 5 50 NA adventureworks so category character varying (50) 6 50 NA adventureworks so startdate timestamp without time zone 7 NA NA adventureworks so enddate timestamp without time zone 8 NA NA adventureworks so minqty integer 9 NA NA adventureworks so maxqty integer 10 NA NA adventureworks so rowguid uuid 11 NA NA adventureworks so modifieddate timestamp without time zone 12 NA NA adventureworks salesorderdetail salesorderid integer 1 NA NA adventureworks salesorderdetail carriertrackingnumber character varying (25) 3 25 NA adventureworks salesorderdetail orderqty smallint 4 NA NA adventureworks salesorderdetail productid integer 5 NA NA adventureworks salesorderdetail specialofferid integer 6 NA NA adventureworks salesorderdetail unitprice numeric 7 NA NA adventureworks salesorderdetail unitpricediscount numeric 8 NA 0.0 adventureworks salesorderdetail rowguid uuid 9 NA uuid_generate_v1() adventureworks salesorderdetail modifieddate timestamp without time zone 10 NA now() adventureworks salesorderdetail salesorderdetailid integer 2 NA nextval(‘sales.salesorderdetail_salesorderdetailid_seq’::regclass) adventureworks specialoffer specialofferid integer 1 NA nextval(‘sales.specialoffer_specialofferid_seq’::regclass) adventureworks sod id integer 1 NA NA adventureworks sod salesorderid integer 2 NA NA adventureworks sod salesorderdetailid integer 3 NA NA adventureworks sod carriertrackingnumber character varying (25) 4 25 NA adventureworks sod orderqty smallint 5 NA NA adventureworks sod productid integer 6 NA NA adventureworks sod specialofferid integer 7 NA NA adventureworks sod unitprice numeric 8 NA NA adventureworks sod unitpricediscount numeric 9 NA NA adventureworks sod rowguid uuid 10 NA NA adventureworks sod modifieddate timestamp without time zone 11 NA NA adventureworks salesorderheader duedate timestamp without time zone 4 NA NA adventureworks salesorderheader shipdate timestamp without time zone 5 NA NA adventureworks salesorderheader purchaseordernumber character varying (25) 8 25 NA adventureworks salesorderheader accountnumber character varying (15) 9 15 NA adventureworks salesorderheader customerid integer 10 NA NA adventureworks salesorderheader salespersonid integer 11 NA NA adventureworks salesorderheader territoryid integer 12 NA NA adventureworks salesorderheader billtoaddressid integer 13 NA NA adventureworks salesorderheader shiptoaddressid integer 14 NA NA adventureworks salesorderheader shipmethodid integer 15 NA NA adventureworks salesorderheader creditcardid integer 16 NA NA adventureworks salesorderheader creditcardapprovalcode character varying (15) 17 15 NA adventureworks salesorderheader currencyrateid integer 18 NA NA adventureworks salesorderheader totaldue numeric 22 NA NA adventureworks salesorderheader comment character varying (128) 23 128 NA adventureworks salesorderheader salesorderid integer 1 NA nextval(‘sales.salesorderheader_salesorderid_seq’::regclass) adventureworks salesorderheader revisionnumber smallint 2 NA 0 adventureworks salesorderheader orderdate timestamp without time zone 3 NA now() adventureworks salesorderheader status smallint 6 NA 1 adventureworks salesorderheader onlineorderflag boolean 7 NA true adventureworks salesorderheader subtotal numeric 19 NA 0.00 adventureworks salesorderheader taxamt numeric 20 NA 0.00 adventureworks salesorderheader freight numeric 21 NA 0.00 adventureworks salesorderheader rowguid uuid 24 NA uuid_generate_v1() adventureworks salesorderheader modifieddate timestamp without time zone 25 NA now() adventureworks soh id integer 1 NA NA adventureworks soh salesorderid integer 2 NA NA adventureworks soh revisionnumber smallint 3 NA NA adventureworks soh orderdate timestamp without time zone 4 NA NA adventureworks soh duedate timestamp without time zone 5 NA NA adventureworks soh shipdate timestamp without time zone 6 NA NA adventureworks soh status smallint 7 NA NA adventureworks soh onlineorderflag boolean 8 NA NA adventureworks soh purchaseordernumber character varying (25) 9 25 NA adventureworks soh accountnumber character varying (15) 10 15 NA adventureworks soh customerid integer 11 NA NA adventureworks soh salespersonid integer 12 NA NA adventureworks soh territoryid integer 13 NA NA adventureworks soh billtoaddressid integer 14 NA NA adventureworks soh shiptoaddressid integer 15 NA NA adventureworks soh shipmethodid integer 16 NA NA adventureworks soh creditcardid integer 17 NA NA adventureworks soh creditcardapprovalcode character varying (15) 18 15 NA adventureworks soh currencyrateid integer 19 NA NA adventureworks soh subtotal numeric 20 NA NA adventureworks soh taxamt numeric 21 NA NA adventureworks soh freight numeric 22 NA NA adventureworks soh totaldue numeric 23 NA NA adventureworks soh comment character varying (128) 24 128 NA adventureworks soh rowguid uuid 25 NA NA adventureworks soh modifieddate timestamp without time zone 26 NA NA adventureworks salesorderheadersalesreason salesorderid integer 1 NA NA adventureworks salesorderheadersalesreason salesreasonid integer 2 NA NA adventureworks salesorderheadersalesreason modifieddate timestamp without time zone 3 NA now() adventureworks sohsr salesorderid integer 1 NA NA adventureworks sohsr salesreasonid integer 2 NA NA adventureworks sohsr modifieddate timestamp without time zone 3 NA NA adventureworks specialofferproduct specialofferid integer 1 NA NA adventureworks specialofferproduct productid integer 2 NA NA adventureworks specialofferproduct rowguid uuid 3 NA uuid_generate_v1() adventureworks specialofferproduct modifieddate timestamp without time zone 4 NA now() adventureworks sop id integer 1 NA NA adventureworks sop specialofferid integer 2 NA NA adventureworks sop productid integer 3 NA NA adventureworks sop rowguid uuid 4 NA NA adventureworks sop modifieddate timestamp without time zone 5 NA NA adventureworks salesperson businessentityid integer 1 NA NA adventureworks salesperson territoryid integer 2 NA NA adventureworks salesperson salesquota numeric 3 NA NA adventureworks salesperson bonus numeric 4 NA 0.00 adventureworks salesperson commissionpct numeric 5 NA 0.00 adventureworks salesperson salesytd numeric 6 NA 0.00 adventureworks salesperson saleslastyear numeric 7 NA 0.00 adventureworks salesperson rowguid uuid 8 NA uuid_generate_v1() adventureworks salesperson modifieddate timestamp without time zone 9 NA now() adventureworks sp id integer 1 NA NA adventureworks sp businessentityid integer 2 NA NA adventureworks sp territoryid integer 3 NA NA adventureworks sp salesquota numeric 4 NA NA adventureworks sp bonus numeric 5 NA NA adventureworks sp commissionpct numeric 6 NA NA adventureworks sp salesytd numeric 7 NA NA adventureworks sp saleslastyear numeric 8 NA NA adventureworks sp rowguid uuid 9 NA NA adventureworks sp modifieddate timestamp without time zone 10 NA NA adventureworks salespersonquotahistory businessentityid integer 1 NA NA adventureworks salespersonquotahistory quotadate timestamp without time zone 2 NA NA adventureworks salespersonquotahistory salesquota numeric 3 NA NA adventureworks salespersonquotahistory rowguid uuid 4 NA uuid_generate_v1() adventureworks salespersonquotahistory modifieddate timestamp without time zone 5 NA now() adventureworks spqh id integer 1 NA NA adventureworks spqh businessentityid integer 2 NA NA adventureworks spqh quotadate timestamp without time zone 3 NA NA adventureworks spqh salesquota numeric 4 NA NA adventureworks spqh rowguid uuid 5 NA NA adventureworks spqh modifieddate timestamp without time zone 6 NA NA adventureworks salesreason name character varying (50) 2 50 NA adventureworks salesreason reasontype character varying (50) 3 50 NA adventureworks salesreason modifieddate timestamp without time zone 4 NA now() adventureworks sr id integer 1 NA NA adventureworks sr salesreasonid integer 2 NA NA adventureworks sr name character varying (50) 3 50 NA adventureworks sr reasontype character varying (50) 4 50 NA adventureworks sr modifieddate timestamp without time zone 5 NA NA adventureworks salesterritory name character varying (50) 2 50 NA adventureworks salesterritory countryregioncode character varying (3) 3 3 NA adventureworks salesterritory group character varying (50) 4 50 NA adventureworks salesterritory salesytd numeric 5 NA 0.00 adventureworks salesterritory saleslastyear numeric 6 NA 0.00 adventureworks salesterritory costytd numeric 7 NA 0.00 adventureworks salesterritory costlastyear numeric 8 NA 0.00 adventureworks salesterritory rowguid uuid 9 NA uuid_generate_v1() adventureworks salesterritory modifieddate timestamp without time zone 10 NA now() adventureworks st id integer 1 NA NA adventureworks st territoryid integer 2 NA NA adventureworks st name character varying (50) 3 50 NA adventureworks st countryregioncode character varying (3) 4 3 NA adventureworks st group character varying (50) 5 50 NA adventureworks st salesytd numeric 6 NA NA adventureworks st saleslastyear numeric 7 NA NA adventureworks st costytd numeric 8 NA NA adventureworks st costlastyear numeric 9 NA NA adventureworks st rowguid uuid 10 NA NA adventureworks st modifieddate timestamp without time zone 11 NA NA adventureworks salesterritoryhistory businessentityid integer 1 NA NA adventureworks salesterritoryhistory territoryid integer 2 NA NA adventureworks salesterritoryhistory startdate timestamp without time zone 3 NA NA adventureworks salesterritoryhistory enddate timestamp without time zone 4 NA NA adventureworks salesterritoryhistory rowguid uuid 5 NA uuid_generate_v1() adventureworks salesterritoryhistory modifieddate timestamp without time zone 6 NA now() adventureworks salesterritory territoryid integer 1 NA nextval(‘sales.salesterritory_territoryid_seq’::regclass) adventureworks sth id integer 1 NA NA adventureworks sth businessentityid integer 2 NA NA adventureworks sth territoryid integer 3 NA NA adventureworks sth startdate timestamp without time zone 4 NA NA adventureworks sth enddate timestamp without time zone 5 NA NA adventureworks sth rowguid uuid 6 NA NA adventureworks sth modifieddate timestamp without time zone 7 NA NA adventureworks salestaxrate stateprovinceid integer 2 NA NA adventureworks salestaxrate taxtype smallint 3 NA NA adventureworks salestaxrate name character varying (50) 5 50 NA adventureworks salestaxrate taxrate numeric 4 NA 0.00 adventureworks salestaxrate rowguid uuid 6 NA uuid_generate_v1() adventureworks salestaxrate modifieddate timestamp without time zone 7 NA now() adventureworks tr id integer 1 NA NA adventureworks tr salestaxrateid integer 2 NA NA adventureworks tr stateprovinceid integer 3 NA NA adventureworks tr taxtype smallint 4 NA NA adventureworks tr taxrate numeric 5 NA NA adventureworks tr name character varying (50) 6 50 NA adventureworks tr rowguid uuid 7 NA NA adventureworks tr modifieddate timestamp without time zone 8 NA NA adventureworks salestaxrate salestaxrateid integer 1 NA nextval(‘sales.salestaxrate_salestaxrateid_seq’::regclass) adventureworks vindividualcustomer businessentityid integer 1 NA NA adventureworks vindividualcustomer title character varying (8) 2 8 NA adventureworks vindividualcustomer firstname character varying (50) 3 50 NA adventureworks vindividualcustomer middlename character varying (50) 4 50 NA adventureworks vindividualcustomer lastname character varying (50) 5 50 NA adventureworks vindividualcustomer suffix character varying (10) 6 10 NA adventureworks vindividualcustomer phonenumber character varying (25) 7 25 NA adventureworks vindividualcustomer phonenumbertype character varying (50) 8 50 NA adventureworks vindividualcustomer emailaddress character varying (50) 9 50 NA adventureworks vindividualcustomer emailpromotion integer 10 NA NA adventureworks vindividualcustomer addresstype character varying (50) 11 50 NA adventureworks vindividualcustomer addressline1 character varying (60) 12 60 NA adventureworks vindividualcustomer addressline2 character varying (60) 13 60 NA adventureworks vindividualcustomer city character varying (30) 14 30 NA adventureworks vindividualcustomer stateprovincename character varying (50) 15 50 NA adventureworks vindividualcustomer postalcode character varying (15) 16 15 NA adventureworks vindividualcustomer countryregionname character varying (50) 17 50 NA adventureworks vindividualcustomer demographics xml 18 NA NA adventureworks vpersondemographics businessentityid integer 1 NA NA adventureworks vpersondemographics totalpurchaseytd money 2 NA NA adventureworks vpersondemographics datefirstpurchase date 3 NA NA adventureworks vpersondemographics birthdate date 4 NA NA adventureworks vpersondemographics maritalstatus character varying (1) 5 1 NA adventureworks vpersondemographics yearlyincome character varying (30) 6 30 NA adventureworks vpersondemographics gender character varying (1) 7 1 NA adventureworks vpersondemographics totalchildren integer 8 NA NA adventureworks vpersondemographics numberchildrenathome integer 9 NA NA adventureworks vpersondemographics education character varying (30) 10 30 NA adventureworks vpersondemographics occupation character varying (30) 11 30 NA adventureworks vpersondemographics homeownerflag boolean 12 NA NA adventureworks vpersondemographics numbercarsowned integer 13 NA NA adventureworks vsalesperson businessentityid integer 1 NA NA adventureworks vsalesperson title character varying (8) 2 8 NA adventureworks vsalesperson firstname character varying (50) 3 50 NA adventureworks vsalesperson middlename character varying (50) 4 50 NA adventureworks vsalesperson lastname character varying (50) 5 50 NA adventureworks vsalesperson suffix character varying (10) 6 10 NA adventureworks vsalesperson jobtitle character varying (50) 7 50 NA adventureworks vsalesperson phonenumber character varying (25) 8 25 NA adventureworks vsalesperson phonenumbertype character varying (50) 9 50 NA adventureworks vsalesperson emailaddress character varying (50) 10 50 NA adventureworks vsalesperson emailpromotion integer 11 NA NA adventureworks vsalesperson addressline1 character varying (60) 12 60 NA adventureworks vsalesperson addressline2 character varying (60) 13 60 NA adventureworks vsalesperson city character varying (30) 14 30 NA adventureworks vsalesperson stateprovincename character varying (50) 15 50 NA adventureworks vsalesperson postalcode character varying (15) 16 15 NA adventureworks vsalesperson countryregionname character varying (50) 17 50 NA adventureworks vsalesperson territoryname character varying (50) 18 50 NA adventureworks vsalesperson territorygroup character varying (50) 19 50 NA adventureworks vsalesperson salesquota numeric 20 NA NA adventureworks vsalesperson salesytd numeric 21 NA NA adventureworks vsalesperson saleslastyear numeric 22 NA NA adventureworks vsalespersonsalesbyfiscalyears SalesPersonID integer 1 NA NA adventureworks vsalespersonsalesbyfiscalyears FullName text 2 NA NA adventureworks vsalespersonsalesbyfiscalyears JobTitle text 3 NA NA adventureworks vsalespersonsalesbyfiscalyears SalesTerritory text 4 NA NA adventureworks vsalespersonsalesbyfiscalyears 2012 numeric 5 NA NA adventureworks vsalespersonsalesbyfiscalyears 2013 numeric 6 NA NA adventureworks vsalespersonsalesbyfiscalyears 2014 numeric 7 NA NA adventureworks vsalespersonsalesbyfiscalyearsdata salespersonid integer 1 NA NA adventureworks vsalespersonsalesbyfiscalyearsdata fullname text 2 NA NA adventureworks vsalespersonsalesbyfiscalyearsdata jobtitle character varying (50) 3 50 NA adventureworks vsalespersonsalesbyfiscalyearsdata salesterritory character varying (50) 4 50 NA adventureworks vsalespersonsalesbyfiscalyearsdata salestotal numeric 5 NA NA adventureworks vsalespersonsalesbyfiscalyearsdata fiscalyear double precision 6 NA NA adventureworks vstorewithaddresses businessentityid integer 1 NA NA adventureworks vstorewithaddresses name character varying (50) 2 50 NA adventureworks vstorewithaddresses addresstype character varying (50) 3 50 NA adventureworks vstorewithaddresses addressline1 character varying (60) 4 60 NA adventureworks vstorewithaddresses addressline2 character varying (60) 5 60 NA adventureworks vstorewithaddresses city character varying (30) 6 30 NA adventureworks vstorewithaddresses stateprovincename character varying (50) 7 50 NA adventureworks vstorewithaddresses postalcode character varying (15) 8 15 NA adventureworks vstorewithaddresses countryregionname character varying (50) 9 50 NA adventureworks vstorewithcontacts businessentityid integer 1 NA NA adventureworks vstorewithcontacts name character varying (50) 2 50 NA adventureworks vstorewithcontacts contacttype character varying (50) 3 50 NA adventureworks vstorewithcontacts title character varying (8) 4 8 NA adventureworks vstorewithcontacts firstname character varying (50) 5 50 NA adventureworks vstorewithcontacts middlename character varying (50) 6 50 NA adventureworks vstorewithcontacts lastname character varying (50) 7 50 NA adventureworks vstorewithcontacts suffix character varying (10) 8 10 NA adventureworks vstorewithcontacts phonenumber character varying (25) 9 25 NA adventureworks vstorewithcontacts phonenumbertype character varying (50) 10 50 NA adventureworks vstorewithcontacts emailaddress character varying (50) 11 50 NA adventureworks vstorewithcontacts emailpromotion integer 12 NA NA adventureworks vstorewithdemographics businessentityid integer 1 NA NA adventureworks vstorewithdemographics name character varying (50) 2 50 NA adventureworks vstorewithdemographics AnnualSales money 3 NA NA adventureworks vstorewithdemographics AnnualRevenue money 4 NA NA adventureworks vstorewithdemographics BankName character varying (50) 5 50 NA adventureworks vstorewithdemographics BusinessType character varying (5) 6 5 NA adventureworks vstorewithdemographics YearOpened integer 7 NA NA adventureworks vstorewithdemographics Specialty character varying (50) 8 50 NA adventureworks vstorewithdemographics SquareFeet integer 9 NA NA adventureworks vstorewithdemographics Brands character varying (30) 10 30 NA adventureworks vstorewithdemographics Internet character varying (30) 11 30 NA adventureworks vstorewithdemographics NumberEmployees integer 12 NA NA adventureworks department departmentid integer 1 NA nextval(‘humanresources.department_departmentid_seq’::regclass) adventureworks shift shiftid integer 1 NA nextval(‘humanresources.shift_shiftid_seq’::regclass) adventureworks businessentity businessentityid integer 1 NA nextval(‘person.businessentity_businessentityid_seq’::regclass) adventureworks contacttype contacttypeid integer 1 NA nextval(‘person.contacttype_contacttypeid_seq’::regclass) adventureworks illustration illustrationid integer 1 NA nextval(‘production.illustration_illustrationid_seq’::regclass) adventureworks location locationid integer 1 NA nextval(‘production.location_locationid_seq’::regclass) adventureworks productreview productreviewid integer 1 NA nextval(‘production.productreview_productreviewid_seq’::regclass) adventureworks productsubcategory productsubcategoryid integer 1 NA nextval(‘production.productsubcategory_productsubcategoryid_seq’::regclass) adventureworks scrapreason scrapreasonid integer 1 NA nextval(‘production.scrapreason_scrapreasonid_seq’::regclass) adventureworks transactionhistory transactionid integer 1 NA nextval(‘production.transactionhistory_transactionid_seq’::regclass) adventureworks purchaseorderheader purchaseorderid integer 1 NA nextval(‘purchasing.purchaseorderheader_purchaseorderid_seq’::regclass) adventureworks currencyrate currencyrateid integer 1 NA nextval(‘sales.currencyrate_currencyrateid_seq’::regclass) adventureworks customer customerid integer 1 NA nextval(‘sales.customer_customerid_seq’::regclass) adventureworks salesreason salesreasonid integer 1 NA nextval(‘sales.salesreason_salesreasonid_seq’::regclass) adventureworks shoppingcartitem shoppingcartitemid integer 1 NA nextval(‘sales.shoppingcartitem_shoppingcartitemid_seq’::regclass) 13.2.1 What is the difference between a VIEW and a BASE TABLE? The BASE TABLE has the underlying data in the database table_info_schema_table %&gt;% filter( table_type == &quot;BASE TABLE&quot;) %&gt;% # filter(table_schema == &quot;public&quot; &amp; table_type == &quot;BASE TABLE&quot;) %&gt;% select(table_name, table_type) %&gt;% left_join(columns_info_schema_table, by = c(&quot;table_name&quot; = &quot;table_name&quot;)) %&gt;% select( table_type, table_name, column_name, data_type, ordinal_position, column_default ) %&gt;% collect(n = Inf) %&gt;% filter(str_detect(table_name, &quot;cust&quot;)) %&gt;% kable() table_type table_name column_name data_type ordinal_position column_default BASE TABLE customer personid integer 2 NA BASE TABLE customer storeid integer 3 NA BASE TABLE customer territoryid integer 4 NA BASE TABLE customer rowguid uuid 5 uuid_generate_v1() BASE TABLE customer modifieddate timestamp without time zone 6 now() BASE TABLE customer customerid integer 1 nextval(‘sales.customer_customerid_seq’::regclass) Probably should explore how the VIEW is made up of data from BASE TABLEs. table_info_schema_table %&gt;% filter( table_type == &quot;VIEW&quot;) %&gt;% # filter(table_schema == &quot;public&quot; &amp; table_type == &quot;VIEW&quot;) %&gt;% select(table_name, table_type) %&gt;% left_join(columns_info_schema_table, by = c(&quot;table_name&quot; = &quot;table_name&quot;)) %&gt;% select( table_type, table_name, column_name, data_type, ordinal_position, column_default ) %&gt;% collect(n = Inf) %&gt;% filter(str_detect(table_name, &quot;cust&quot;)) %&gt;% kable() table_type table_name column_name data_type ordinal_position column_default VIEW vindividualcustomer businessentityid integer 1 NA VIEW vindividualcustomer title character varying 2 NA VIEW vindividualcustomer firstname character varying 3 NA VIEW vindividualcustomer middlename character varying 4 NA VIEW vindividualcustomer lastname character varying 5 NA VIEW vindividualcustomer suffix character varying 6 NA VIEW vindividualcustomer phonenumber character varying 7 NA VIEW vindividualcustomer phonenumbertype character varying 8 NA VIEW vindividualcustomer emailaddress character varying 9 NA VIEW vindividualcustomer emailpromotion integer 10 NA VIEW vindividualcustomer addresstype character varying 11 NA VIEW vindividualcustomer addressline1 character varying 12 NA VIEW vindividualcustomer addressline2 character varying 13 NA VIEW vindividualcustomer city character varying 14 NA VIEW vindividualcustomer stateprovincename character varying 15 NA VIEW vindividualcustomer postalcode character varying 16 NA VIEW vindividualcustomer countryregionname character varying 17 NA VIEW vindividualcustomer demographics xml 18 NA 13.2.2 What data types are found in the database? columns_info_schema_info %&gt;% count(data_type) %&gt;% kable() data_type n “char” 38 abstime 2 anyarray 9 ARRAY 75 bigint 161 boolean 136 bytea 8 character 45 character varying (1) 2 character varying (10) 13 character varying (100) 9 character varying (1024) 4 character varying (128) 4 character varying (15) 17 character varying (20) 1 character varying (25) 15 character varying (255) 2 character varying (256) 18 character varying (3) 58 character varying (30) 19 character varying (3850) 2 character varying (400) 4 character varying (44) 2 character varying (5) 5 character varying (50) 152 character varying (60) 14 character varying (8) 11 character varying (NA) 549 date 17 double precision 9 inet 2 integer 483 interval 5 money 3 name 140 numeric 98 oid 221 pg_dependencies 1 pg_lsn 14 pg_ndistinct 1 pg_node_tree 13 real (24,2) 9 regproc 34 regtype 1 smallint 76 text 114 time without time zone 4 timestamp with time zone 36 timestamp without time zone 208 uuid 61 xid 11 xml 25 13.3 Characterizing how things are named Names are the handle for accessing the data. Tables and columns may or may not be named consistently or in a way that makes sense to you. You should look at these names as data. 13.3.1 Counting columns and name reuse Pull out some rough-and-ready but useful statistics about your database. Since we are in SQL-land we talk about variables as columns. this is wrong! public_tables &lt;- columns_info_schema_table %&gt;% # filter(str_detect(table_name, &quot;pg_&quot;) == FALSE) %&gt;% # filter(table_schema == &quot;public&quot;) %&gt;% collect() public_tables %&gt;% count(table_name, sort = TRUE) %&gt;% head(n = 15) %&gt;% kable() table_name n routines 82 columns 44 p 40 pg_class 33 parameters 32 attributes 31 pg_type 30 element_types 29 user_defined_types 29 pg_proc 28 domains 27 pg_statistic 26 soh 26 pg_constraint 25 product 25 How many column names are shared across tables (or duplicated)? public_tables %&gt;% count(column_name, sort = TRUE) %&gt;% filter(n &gt; 1) ## # A tibble: 434 x 2 ## column_name n ## &lt;chr&gt; &lt;int&gt; ## 1 modifieddate 140 ## 2 rowguid 61 ## 3 id 60 ## 4 name 59 ## 5 businessentityid 49 ## 6 productid 32 ## 7 schemaname 29 ## 8 relid 20 ## 9 relname 20 ## 10 table_catalog 17 ## # … with 424 more rows How many column names are unique? public_tables %&gt;% count(column_name) %&gt;% filter(n == 1) %&gt;% count() ## # A tibble: 1 x 1 ## n ## &lt;int&gt; ## 1 882 13.4 Database keys 13.4.1 Direct SQL How do we use this output? Could it be generated by dplyr? rs &lt;- dbGetQuery( con, &quot; --SELECT conrelid::regclass as table_from select table_catalog||&#39;.&#39;||table_schema||&#39;.&#39;||table_name table_name , conname, pg_catalog.pg_get_constraintdef(r.oid, true) as condef FROM information_schema.columns c,pg_catalog.pg_constraint r WHERE 1 = 1 --r.conrelid = &#39;16485&#39; AND r.contype in (&#39;f&#39;,&#39;p&#39;) ORDER BY 1 ;&quot; ) glimpse(rs) ## Observations: 467,838 ## Variables: 3 ## $ table_name &lt;chr&gt; &quot;adventureworks.hr.d&quot;, &quot;adventureworks.hr.d&quot;, &quot;advent… ## $ conname &lt;chr&gt; &quot;FK_SalesOrderDetail_SpecialOfferProduct_SpecialOffer… ## $ condef &lt;chr&gt; &quot;FOREIGN KEY (specialofferid, productid) REFERENCES s… kable(head(rs)) table_name conname condef adventureworks.hr.d FK_SalesOrderDetail_SpecialOfferProduct_SpecialOfferIDProductID FOREIGN KEY (specialofferid, productid) REFERENCES sales.specialofferproduct(specialofferid, productid) adventureworks.hr.d FK_SalesOrderDetail_SpecialOfferProduct_SpecialOfferIDProductID FOREIGN KEY (specialofferid, productid) REFERENCES sales.specialofferproduct(specialofferid, productid) adventureworks.hr.d FK_SalesOrderHeader_Address_BillToAddressID FOREIGN KEY (billtoaddressid) REFERENCES person.address(addressid) adventureworks.hr.d FK_SalesOrderHeader_Address_BillToAddressID FOREIGN KEY (billtoaddressid) REFERENCES person.address(addressid) adventureworks.hr.d FK_SalesOrderHeader_Address_BillToAddressID FOREIGN KEY (billtoaddressid) REFERENCES person.address(addressid) adventureworks.hr.d FK_SalesOrderHeader_Address_BillToAddressID FOREIGN KEY (billtoaddressid) REFERENCES person.address(addressid) The following is more compact and looks more useful. What is the difference between the two? rs &lt;- dbGetQuery( con, &quot;select conrelid::regclass as table_from ,c.conname ,pg_get_constraintdef(c.oid) from pg_constraint c join pg_namespace n on n.oid = c.connamespace where c.contype in (&#39;f&#39;,&#39;p&#39;) and n.nspname = &#39;public&#39; order by conrelid::regclass::text, contype DESC; &quot; ) glimpse(rs) ## Observations: 0 ## Variables: 3 ## $ table_from &lt;chr&gt; ## $ conname &lt;chr&gt; ## $ pg_get_constraintdef &lt;chr&gt; kable(head(rs)) table_from conname pg_get_constraintdef dim(rs)[1] ## [1] 0 13.4.2 Database keys with dplyr This query shows the primary and foreign keys in the database. tables &lt;- tbl(con, dbplyr::in_schema(&quot;information_schema&quot;, &quot;tables&quot;)) table_constraints &lt;- tbl(con, dbplyr::in_schema(&quot;information_schema&quot;, &quot;table_constraints&quot;)) key_column_usage &lt;- tbl(con, dbplyr::in_schema(&quot;information_schema&quot;, &quot;key_column_usage&quot;)) referential_constraints &lt;- tbl(con, dbplyr::in_schema(&quot;information_schema&quot;, &quot;referential_constraints&quot;)) constraint_column_usage &lt;- tbl(con, dbplyr::in_schema(&quot;information_schema&quot;, &quot;constraint_column_usage&quot;)) keys &lt;- tables %&gt;% left_join(table_constraints, by = c( &quot;table_catalog&quot; = &quot;table_catalog&quot;, &quot;table_schema&quot; = &quot;table_schema&quot;, &quot;table_name&quot; = &quot;table_name&quot; )) %&gt;% # table_constraints %&gt;% filter(constraint_type %in% c(&quot;FOREIGN KEY&quot;, &quot;PRIMARY KEY&quot;)) %&gt;% left_join(key_column_usage, by = c( &quot;table_catalog&quot; = &quot;table_catalog&quot;, &quot;constraint_catalog&quot; = &quot;constraint_catalog&quot;, &quot;constraint_schema&quot; = &quot;constraint_schema&quot;, &quot;table_name&quot; = &quot;table_name&quot;, &quot;table_schema&quot; = &quot;table_schema&quot;, &quot;constraint_name&quot; = &quot;constraint_name&quot; ) ) %&gt;% # left_join(constraint_column_usage) %&gt;% # does this table add anything useful? select(table_name, table_type, constraint_name, constraint_type, column_name, ordinal_position) %&gt;% arrange(table_name) %&gt;% collect() glimpse(keys) ## Observations: 190 ## Variables: 6 ## $ table_name &lt;chr&gt; &quot;address&quot;, &quot;address&quot;, &quot;addresstype&quot;, &quot;billofmat… ## $ table_type &lt;chr&gt; &quot;BASE TABLE&quot;, &quot;BASE TABLE&quot;, &quot;BASE TABLE&quot;, &quot;BASE… ## $ constraint_name &lt;chr&gt; &quot;FK_Address_StateProvince_StateProvinceID&quot;, &quot;PK… ## $ constraint_type &lt;chr&gt; &quot;FOREIGN KEY&quot;, &quot;PRIMARY KEY&quot;, &quot;PRIMARY KEY&quot;, &quot;F… ## $ column_name &lt;chr&gt; &quot;stateprovinceid&quot;, &quot;addressid&quot;, &quot;addresstypeid&quot;… ## $ ordinal_position &lt;int&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 2, 1, 1,… kable(keys) table_name table_type constraint_name constraint_type column_name ordinal_position address BASE TABLE FK_Address_StateProvince_StateProvinceID FOREIGN KEY stateprovinceid 1 address BASE TABLE PK_Address_AddressID PRIMARY KEY addressid 1 addresstype BASE TABLE PK_AddressType_AddressTypeID PRIMARY KEY addresstypeid 1 billofmaterials BASE TABLE FK_BillOfMaterials_Product_ComponentID FOREIGN KEY componentid 1 billofmaterials BASE TABLE FK_BillOfMaterials_Product_ProductAssemblyID FOREIGN KEY productassemblyid 1 billofmaterials BASE TABLE FK_BillOfMaterials_UnitMeasure_UnitMeasureCode FOREIGN KEY unitmeasurecode 1 billofmaterials BASE TABLE PK_BillOfMaterials_BillOfMaterialsID PRIMARY KEY billofmaterialsid 1 businessentity BASE TABLE PK_BusinessEntity_BusinessEntityID PRIMARY KEY businessentityid 1 businessentityaddress BASE TABLE FK_BusinessEntityAddress_Address_AddressID FOREIGN KEY addressid 1 businessentityaddress BASE TABLE FK_BusinessEntityAddress_AddressType_AddressTypeID FOREIGN KEY addresstypeid 1 businessentityaddress BASE TABLE FK_BusinessEntityAddress_BusinessEntity_BusinessEntityID FOREIGN KEY businessentityid 1 businessentityaddress BASE TABLE PK_BusinessEntityAddress_BusinessEntityID_AddressID_AddressType PRIMARY KEY businessentityid 1 businessentityaddress BASE TABLE PK_BusinessEntityAddress_BusinessEntityID_AddressID_AddressType PRIMARY KEY addresstypeid 3 businessentityaddress BASE TABLE PK_BusinessEntityAddress_BusinessEntityID_AddressID_AddressType PRIMARY KEY addressid 2 businessentitycontact BASE TABLE FK_BusinessEntityContact_BusinessEntity_BusinessEntityID FOREIGN KEY businessentityid 1 businessentitycontact BASE TABLE FK_BusinessEntityContact_ContactType_ContactTypeID FOREIGN KEY contacttypeid 1 businessentitycontact BASE TABLE FK_BusinessEntityContact_Person_PersonID FOREIGN KEY personid 1 businessentitycontact BASE TABLE PK_BusinessEntityContact_BusinessEntityID_PersonID_ContactTypeI PRIMARY KEY personid 2 businessentitycontact BASE TABLE PK_BusinessEntityContact_BusinessEntityID_PersonID_ContactTypeI PRIMARY KEY contacttypeid 3 businessentitycontact BASE TABLE PK_BusinessEntityContact_BusinessEntityID_PersonID_ContactTypeI PRIMARY KEY businessentityid 1 contacttype BASE TABLE PK_ContactType_ContactTypeID PRIMARY KEY contacttypeid 1 countryregion BASE TABLE PK_CountryRegion_CountryRegionCode PRIMARY KEY countryregioncode 1 countryregioncurrency BASE TABLE FK_CountryRegionCurrency_CountryRegion_CountryRegionCode FOREIGN KEY countryregioncode 1 countryregioncurrency BASE TABLE FK_CountryRegionCurrency_Currency_CurrencyCode FOREIGN KEY currencycode 1 countryregioncurrency BASE TABLE PK_CountryRegionCurrency_CountryRegionCode_CurrencyCode PRIMARY KEY countryregioncode 1 countryregioncurrency BASE TABLE PK_CountryRegionCurrency_CountryRegionCode_CurrencyCode PRIMARY KEY currencycode 2 creditcard BASE TABLE PK_CreditCard_CreditCardID PRIMARY KEY creditcardid 1 culture BASE TABLE PK_Culture_CultureID PRIMARY KEY cultureid 1 currency BASE TABLE PK_Currency_CurrencyCode PRIMARY KEY currencycode 1 currencyrate BASE TABLE FK_CurrencyRate_Currency_FromCurrencyCode FOREIGN KEY fromcurrencycode 1 currencyrate BASE TABLE FK_CurrencyRate_Currency_ToCurrencyCode FOREIGN KEY tocurrencycode 1 currencyrate BASE TABLE PK_CurrencyRate_CurrencyRateID PRIMARY KEY currencyrateid 1 customer BASE TABLE FK_Customer_Person_PersonID FOREIGN KEY personid 1 customer BASE TABLE FK_Customer_SalesTerritory_TerritoryID FOREIGN KEY territoryid 1 customer BASE TABLE FK_Customer_Store_StoreID FOREIGN KEY storeid 1 customer BASE TABLE PK_Customer_CustomerID PRIMARY KEY customerid 1 department BASE TABLE PK_Department_DepartmentID PRIMARY KEY departmentid 1 document BASE TABLE FK_Document_Employee_Owner FOREIGN KEY owner 1 document BASE TABLE PK_Document_DocumentNode PRIMARY KEY documentnode 1 emailaddress BASE TABLE FK_EmailAddress_Person_BusinessEntityID FOREIGN KEY businessentityid 1 emailaddress BASE TABLE PK_EmailAddress_BusinessEntityID_EmailAddressID PRIMARY KEY emailaddressid 2 emailaddress BASE TABLE PK_EmailAddress_BusinessEntityID_EmailAddressID PRIMARY KEY businessentityid 1 employee BASE TABLE FK_Employee_Person_BusinessEntityID FOREIGN KEY businessentityid 1 employee BASE TABLE PK_Employee_BusinessEntityID PRIMARY KEY businessentityid 1 employeedepartmenthistory BASE TABLE FK_EmployeeDepartmentHistory_Department_DepartmentID FOREIGN KEY departmentid 1 employeedepartmenthistory BASE TABLE FK_EmployeeDepartmentHistory_Employee_BusinessEntityID FOREIGN KEY businessentityid 1 employeedepartmenthistory BASE TABLE FK_EmployeeDepartmentHistory_Shift_ShiftID FOREIGN KEY shiftid 1 employeedepartmenthistory BASE TABLE PK_EmployeeDepartmentHistory_BusinessEntityID_StartDate_Departm PRIMARY KEY departmentid 3 employeedepartmenthistory BASE TABLE PK_EmployeeDepartmentHistory_BusinessEntityID_StartDate_Departm PRIMARY KEY businessentityid 1 employeedepartmenthistory BASE TABLE PK_EmployeeDepartmentHistory_BusinessEntityID_StartDate_Departm PRIMARY KEY startdate 2 employeedepartmenthistory BASE TABLE PK_EmployeeDepartmentHistory_BusinessEntityID_StartDate_Departm PRIMARY KEY shiftid 4 employeepayhistory BASE TABLE FK_EmployeePayHistory_Employee_BusinessEntityID FOREIGN KEY businessentityid 1 employeepayhistory BASE TABLE PK_EmployeePayHistory_BusinessEntityID_RateChangeDate PRIMARY KEY ratechangedate 2 employeepayhistory BASE TABLE PK_EmployeePayHistory_BusinessEntityID_RateChangeDate PRIMARY KEY businessentityid 1 illustration BASE TABLE PK_Illustration_IllustrationID PRIMARY KEY illustrationid 1 jobcandidate BASE TABLE FK_JobCandidate_Employee_BusinessEntityID FOREIGN KEY businessentityid 1 jobcandidate BASE TABLE PK_JobCandidate_JobCandidateID PRIMARY KEY jobcandidateid 1 location BASE TABLE PK_Location_LocationID PRIMARY KEY locationid 1 password BASE TABLE FK_Password_Person_BusinessEntityID FOREIGN KEY businessentityid 1 password BASE TABLE PK_Password_BusinessEntityID PRIMARY KEY businessentityid 1 person BASE TABLE FK_Person_BusinessEntity_BusinessEntityID FOREIGN KEY businessentityid 1 person BASE TABLE PK_Person_BusinessEntityID PRIMARY KEY businessentityid 1 personcreditcard BASE TABLE FK_PersonCreditCard_CreditCard_CreditCardID FOREIGN KEY creditcardid 1 personcreditcard BASE TABLE FK_PersonCreditCard_Person_BusinessEntityID FOREIGN KEY businessentityid 1 personcreditcard BASE TABLE PK_PersonCreditCard_BusinessEntityID_CreditCardID PRIMARY KEY businessentityid 1 personcreditcard BASE TABLE PK_PersonCreditCard_BusinessEntityID_CreditCardID PRIMARY KEY creditcardid 2 personphone BASE TABLE FK_PersonPhone_Person_BusinessEntityID FOREIGN KEY businessentityid 1 personphone BASE TABLE FK_PersonPhone_PhoneNumberType_PhoneNumberTypeID FOREIGN KEY phonenumbertypeid 1 personphone BASE TABLE PK_PersonPhone_BusinessEntityID_PhoneNumber_PhoneNumberTypeID PRIMARY KEY businessentityid 1 personphone BASE TABLE PK_PersonPhone_BusinessEntityID_PhoneNumber_PhoneNumberTypeID PRIMARY KEY phonenumbertypeid 3 personphone BASE TABLE PK_PersonPhone_BusinessEntityID_PhoneNumber_PhoneNumberTypeID PRIMARY KEY phonenumber 2 phonenumbertype BASE TABLE PK_PhoneNumberType_PhoneNumberTypeID PRIMARY KEY phonenumbertypeid 1 product BASE TABLE FK_Product_ProductModel_ProductModelID FOREIGN KEY productmodelid 1 product BASE TABLE FK_Product_ProductSubcategory_ProductSubcategoryID FOREIGN KEY productsubcategoryid 1 product BASE TABLE FK_Product_UnitMeasure_SizeUnitMeasureCode FOREIGN KEY sizeunitmeasurecode 1 product BASE TABLE FK_Product_UnitMeasure_WeightUnitMeasureCode FOREIGN KEY weightunitmeasurecode 1 product BASE TABLE PK_Product_ProductID PRIMARY KEY productid 1 productcategory BASE TABLE PK_ProductCategory_ProductCategoryID PRIMARY KEY productcategoryid 1 productcosthistory BASE TABLE FK_ProductCostHistory_Product_ProductID FOREIGN KEY productid 1 productcosthistory BASE TABLE PK_ProductCostHistory_ProductID_StartDate PRIMARY KEY productid 1 productcosthistory BASE TABLE PK_ProductCostHistory_ProductID_StartDate PRIMARY KEY startdate 2 productdescription BASE TABLE PK_ProductDescription_ProductDescriptionID PRIMARY KEY productdescriptionid 1 productdocument BASE TABLE FK_ProductDocument_Document_DocumentNode FOREIGN KEY documentnode 1 productdocument BASE TABLE FK_ProductDocument_Product_ProductID FOREIGN KEY productid 1 productdocument BASE TABLE PK_ProductDocument_ProductID_DocumentNode PRIMARY KEY documentnode 2 productdocument BASE TABLE PK_ProductDocument_ProductID_DocumentNode PRIMARY KEY productid 1 productinventory BASE TABLE FK_ProductInventory_Location_LocationID FOREIGN KEY locationid 1 productinventory BASE TABLE FK_ProductInventory_Product_ProductID FOREIGN KEY productid 1 productinventory BASE TABLE PK_ProductInventory_ProductID_LocationID PRIMARY KEY productid 1 productinventory BASE TABLE PK_ProductInventory_ProductID_LocationID PRIMARY KEY locationid 2 productlistpricehistory BASE TABLE FK_ProductListPriceHistory_Product_ProductID FOREIGN KEY productid 1 productlistpricehistory BASE TABLE PK_ProductListPriceHistory_ProductID_StartDate PRIMARY KEY startdate 2 productlistpricehistory BASE TABLE PK_ProductListPriceHistory_ProductID_StartDate PRIMARY KEY productid 1 productmodel BASE TABLE PK_ProductModel_ProductModelID PRIMARY KEY productmodelid 1 productmodelillustration BASE TABLE FK_ProductModelIllustration_Illustration_IllustrationID FOREIGN KEY illustrationid 1 productmodelillustration BASE TABLE FK_ProductModelIllustration_ProductModel_ProductModelID FOREIGN KEY productmodelid 1 productmodelillustration BASE TABLE PK_ProductModelIllustration_ProductModelID_IllustrationID PRIMARY KEY illustrationid 2 productmodelillustration BASE TABLE PK_ProductModelIllustration_ProductModelID_IllustrationID PRIMARY KEY productmodelid 1 productmodelproductdescriptionculture BASE TABLE FK_ProductModelProductDescriptionCulture_Culture_CultureID FOREIGN KEY cultureid 1 productmodelproductdescriptionculture BASE TABLE FK_ProductModelProductDescriptionCulture_ProductDescription_Pro FOREIGN KEY productdescriptionid 1 productmodelproductdescriptionculture BASE TABLE FK_ProductModelProductDescriptionCulture_ProductModel_ProductMo FOREIGN KEY productmodelid 1 productmodelproductdescriptionculture BASE TABLE PK_ProductModelProductDescriptionCulture_ProductModelID_Product PRIMARY KEY productmodelid 1 productmodelproductdescriptionculture BASE TABLE PK_ProductModelProductDescriptionCulture_ProductModelID_Product PRIMARY KEY cultureid 3 productmodelproductdescriptionculture BASE TABLE PK_ProductModelProductDescriptionCulture_ProductModelID_Product PRIMARY KEY productdescriptionid 2 productphoto BASE TABLE PK_ProductPhoto_ProductPhotoID PRIMARY KEY productphotoid 1 productproductphoto BASE TABLE FK_ProductProductPhoto_ProductPhoto_ProductPhotoID FOREIGN KEY productphotoid 1 productproductphoto BASE TABLE FK_ProductProductPhoto_Product_ProductID FOREIGN KEY productid 1 productproductphoto BASE TABLE PK_ProductProductPhoto_ProductID_ProductPhotoID PRIMARY KEY productid 1 productproductphoto BASE TABLE PK_ProductProductPhoto_ProductID_ProductPhotoID PRIMARY KEY productphotoid 2 productreview BASE TABLE FK_ProductReview_Product_ProductID FOREIGN KEY productid 1 productreview BASE TABLE PK_ProductReview_ProductReviewID PRIMARY KEY productreviewid 1 productsubcategory BASE TABLE FK_ProductSubcategory_ProductCategory_ProductCategoryID FOREIGN KEY productcategoryid 1 productsubcategory BASE TABLE PK_ProductSubcategory_ProductSubcategoryID PRIMARY KEY productsubcategoryid 1 productvendor BASE TABLE FK_ProductVendor_Product_ProductID FOREIGN KEY productid 1 productvendor BASE TABLE FK_ProductVendor_UnitMeasure_UnitMeasureCode FOREIGN KEY unitmeasurecode 1 productvendor BASE TABLE FK_ProductVendor_Vendor_BusinessEntityID FOREIGN KEY businessentityid 1 productvendor BASE TABLE PK_ProductVendor_ProductID_BusinessEntityID PRIMARY KEY productid 1 productvendor BASE TABLE PK_ProductVendor_ProductID_BusinessEntityID PRIMARY KEY businessentityid 2 purchaseorderdetail BASE TABLE FK_PurchaseOrderDetail_Product_ProductID FOREIGN KEY productid 1 purchaseorderdetail BASE TABLE FK_PurchaseOrderDetail_PurchaseOrderHeader_PurchaseOrderID FOREIGN KEY purchaseorderid 1 purchaseorderdetail BASE TABLE PK_PurchaseOrderDetail_PurchaseOrderID_PurchaseOrderDetailID PRIMARY KEY purchaseorderdetailid 2 purchaseorderdetail BASE TABLE PK_PurchaseOrderDetail_PurchaseOrderID_PurchaseOrderDetailID PRIMARY KEY purchaseorderid 1 purchaseorderheader BASE TABLE FK_PurchaseOrderHeader_Employee_EmployeeID FOREIGN KEY employeeid 1 purchaseorderheader BASE TABLE FK_PurchaseOrderHeader_ShipMethod_ShipMethodID FOREIGN KEY shipmethodid 1 purchaseorderheader BASE TABLE FK_PurchaseOrderHeader_Vendor_VendorID FOREIGN KEY vendorid 1 purchaseorderheader BASE TABLE PK_PurchaseOrderHeader_PurchaseOrderID PRIMARY KEY purchaseorderid 1 salesorderdetail BASE TABLE FK_SalesOrderDetail_SalesOrderHeader_SalesOrderID FOREIGN KEY salesorderid 1 salesorderdetail BASE TABLE FK_SalesOrderDetail_SpecialOfferProduct_SpecialOfferIDProductID FOREIGN KEY productid 2 salesorderdetail BASE TABLE FK_SalesOrderDetail_SpecialOfferProduct_SpecialOfferIDProductID FOREIGN KEY specialofferid 1 salesorderdetail BASE TABLE PK_SalesOrderDetail_SalesOrderID_SalesOrderDetailID PRIMARY KEY salesorderid 1 salesorderdetail BASE TABLE PK_SalesOrderDetail_SalesOrderID_SalesOrderDetailID PRIMARY KEY salesorderdetailid 2 salesorderheader BASE TABLE FK_SalesOrderHeader_Address_BillToAddressID FOREIGN KEY billtoaddressid 1 salesorderheader BASE TABLE FK_SalesOrderHeader_Address_ShipToAddressID FOREIGN KEY shiptoaddressid 1 salesorderheader BASE TABLE FK_SalesOrderHeader_CreditCard_CreditCardID FOREIGN KEY creditcardid 1 salesorderheader BASE TABLE FK_SalesOrderHeader_CurrencyRate_CurrencyRateID FOREIGN KEY currencyrateid 1 salesorderheader BASE TABLE FK_SalesOrderHeader_Customer_CustomerID FOREIGN KEY customerid 1 salesorderheader BASE TABLE FK_SalesOrderHeader_SalesPerson_SalesPersonID FOREIGN KEY salespersonid 1 salesorderheader BASE TABLE FK_SalesOrderHeader_SalesTerritory_TerritoryID FOREIGN KEY territoryid 1 salesorderheader BASE TABLE FK_SalesOrderHeader_ShipMethod_ShipMethodID FOREIGN KEY shipmethodid 1 salesorderheader BASE TABLE PK_SalesOrderHeader_SalesOrderID PRIMARY KEY salesorderid 1 salesorderheadersalesreason BASE TABLE FK_SalesOrderHeaderSalesReason_SalesOrderHeader_SalesOrderID FOREIGN KEY salesorderid 1 salesorderheadersalesreason BASE TABLE FK_SalesOrderHeaderSalesReason_SalesReason_SalesReasonID FOREIGN KEY salesreasonid 1 salesorderheadersalesreason BASE TABLE PK_SalesOrderHeaderSalesReason_SalesOrderID_SalesReasonID PRIMARY KEY salesreasonid 2 salesorderheadersalesreason BASE TABLE PK_SalesOrderHeaderSalesReason_SalesOrderID_SalesReasonID PRIMARY KEY salesorderid 1 salesperson BASE TABLE FK_SalesPerson_Employee_BusinessEntityID FOREIGN KEY businessentityid 1 salesperson BASE TABLE FK_SalesPerson_SalesTerritory_TerritoryID FOREIGN KEY territoryid 1 salesperson BASE TABLE PK_SalesPerson_BusinessEntityID PRIMARY KEY businessentityid 1 salespersonquotahistory BASE TABLE FK_SalesPersonQuotaHistory_SalesPerson_BusinessEntityID FOREIGN KEY businessentityid 1 salespersonquotahistory BASE TABLE PK_SalesPersonQuotaHistory_BusinessEntityID_QuotaDate PRIMARY KEY businessentityid 1 salespersonquotahistory BASE TABLE PK_SalesPersonQuotaHistory_BusinessEntityID_QuotaDate PRIMARY KEY quotadate 2 salesreason BASE TABLE PK_SalesReason_SalesReasonID PRIMARY KEY salesreasonid 1 salestaxrate BASE TABLE FK_SalesTaxRate_StateProvince_StateProvinceID FOREIGN KEY stateprovinceid 1 salestaxrate BASE TABLE PK_SalesTaxRate_SalesTaxRateID PRIMARY KEY salestaxrateid 1 salesterritory BASE TABLE FK_SalesTerritory_CountryRegion_CountryRegionCode FOREIGN KEY countryregioncode 1 salesterritory BASE TABLE PK_SalesTerritory_TerritoryID PRIMARY KEY territoryid 1 salesterritoryhistory BASE TABLE FK_SalesTerritoryHistory_SalesPerson_BusinessEntityID FOREIGN KEY businessentityid 1 salesterritoryhistory BASE TABLE FK_SalesTerritoryHistory_SalesTerritory_TerritoryID FOREIGN KEY territoryid 1 salesterritoryhistory BASE TABLE PK_SalesTerritoryHistory_BusinessEntityID_StartDate_TerritoryID PRIMARY KEY territoryid 3 salesterritoryhistory BASE TABLE PK_SalesTerritoryHistory_BusinessEntityID_StartDate_TerritoryID PRIMARY KEY startdate 2 salesterritoryhistory BASE TABLE PK_SalesTerritoryHistory_BusinessEntityID_StartDate_TerritoryID PRIMARY KEY businessentityid 1 scrapreason BASE TABLE PK_ScrapReason_ScrapReasonID PRIMARY KEY scrapreasonid 1 shift BASE TABLE PK_Shift_ShiftID PRIMARY KEY shiftid 1 shipmethod BASE TABLE PK_ShipMethod_ShipMethodID PRIMARY KEY shipmethodid 1 shoppingcartitem BASE TABLE FK_ShoppingCartItem_Product_ProductID FOREIGN KEY productid 1 shoppingcartitem BASE TABLE PK_ShoppingCartItem_ShoppingCartItemID PRIMARY KEY shoppingcartitemid 1 specialoffer BASE TABLE PK_SpecialOffer_SpecialOfferID PRIMARY KEY specialofferid 1 specialofferproduct BASE TABLE FK_SpecialOfferProduct_Product_ProductID FOREIGN KEY productid 1 specialofferproduct BASE TABLE FK_SpecialOfferProduct_SpecialOffer_SpecialOfferID FOREIGN KEY specialofferid 1 specialofferproduct BASE TABLE PK_SpecialOfferProduct_SpecialOfferID_ProductID PRIMARY KEY specialofferid 1 specialofferproduct BASE TABLE PK_SpecialOfferProduct_SpecialOfferID_ProductID PRIMARY KEY productid 2 stateprovince BASE TABLE FK_StateProvince_CountryRegion_CountryRegionCode FOREIGN KEY countryregioncode 1 stateprovince BASE TABLE FK_StateProvince_SalesTerritory_TerritoryID FOREIGN KEY territoryid 1 stateprovince BASE TABLE PK_StateProvince_StateProvinceID PRIMARY KEY stateprovinceid 1 store BASE TABLE FK_Store_BusinessEntity_BusinessEntityID FOREIGN KEY businessentityid 1 store BASE TABLE FK_Store_SalesPerson_SalesPersonID FOREIGN KEY salespersonid 1 store BASE TABLE PK_Store_BusinessEntityID PRIMARY KEY businessentityid 1 transactionhistory BASE TABLE FK_TransactionHistory_Product_ProductID FOREIGN KEY productid 1 transactionhistory BASE TABLE PK_TransactionHistory_TransactionID PRIMARY KEY transactionid 1 transactionhistoryarchive BASE TABLE PK_TransactionHistoryArchive_TransactionID PRIMARY KEY transactionid 1 unitmeasure BASE TABLE PK_UnitMeasure_UnitMeasureCode PRIMARY KEY unitmeasurecode 1 vendor BASE TABLE FK_Vendor_BusinessEntity_BusinessEntityID FOREIGN KEY businessentityid 1 vendor BASE TABLE PK_Vendor_BusinessEntityID PRIMARY KEY businessentityid 1 workorder BASE TABLE FK_WorkOrder_Product_ProductID FOREIGN KEY productid 1 workorder BASE TABLE FK_WorkOrder_ScrapReason_ScrapReasonID FOREIGN KEY scrapreasonid 1 workorder BASE TABLE PK_WorkOrder_WorkOrderID PRIMARY KEY workorderid 1 workorderrouting BASE TABLE FK_WorkOrderRouting_Location_LocationID FOREIGN KEY locationid 1 workorderrouting BASE TABLE FK_WorkOrderRouting_WorkOrder_WorkOrderID FOREIGN KEY workorderid 1 workorderrouting BASE TABLE PK_WorkOrderRouting_WorkOrderID_ProductID_OperationSequence PRIMARY KEY workorderid 1 workorderrouting BASE TABLE PK_WorkOrderRouting_WorkOrderID_ProductID_OperationSequence PRIMARY KEY productid 2 workorderrouting BASE TABLE PK_WorkOrderRouting_WorkOrderID_ProductID_OperationSequence PRIMARY KEY operationsequence 3 What do we learn from the following query? How is it useful? rs &lt;- dbGetQuery( con, &quot;SELECT r.*, pg_catalog.pg_get_constraintdef(r.oid, true) as condef FROM pg_catalog.pg_constraint r WHERE 1=1 --r.conrelid = &#39;16485&#39; AND r.contype = &#39;f&#39; ORDER BY 1; &quot; ) head(rs) ## conname connamespace contype condeferrable ## 1 cardinal_number_domain_check 12771 c FALSE ## 2 yes_or_no_check 12771 c FALSE ## 3 CK_Employee_BirthDate 16386 c FALSE ## 4 CK_Employee_Gender 16386 c FALSE ## 5 CK_Employee_HireDate 16386 c FALSE ## 6 CK_Employee_MaritalStatus 16386 c FALSE ## condeferred convalidated conrelid contypid conindid conparentid ## 1 FALSE TRUE 0 12785 0 0 ## 2 FALSE TRUE 0 12797 0 0 ## 3 FALSE TRUE 16450 0 0 0 ## 4 FALSE TRUE 16450 0 0 0 ## 5 FALSE TRUE 16450 0 0 0 ## 6 FALSE TRUE 16450 0 0 0 ## confrelid confupdtype confdeltype confmatchtype conislocal coninhcount ## 1 0 TRUE 0 ## 2 0 TRUE 0 ## 3 0 TRUE 0 ## 4 0 TRUE 0 ## 5 0 TRUE 0 ## 6 0 TRUE 0 ## connoinherit conkey confkey conpfeqop conppeqop conffeqop conexclop ## 1 FALSE &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 2 FALSE &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 3 FALSE {5} &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 4 FALSE {7} &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 5 FALSE {8} &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 6 FALSE {6} &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## conbin ## 1 {OPEXPR :opno 525 :opfuncid 150 :opresulttype 16 :opretset false :opcollid 0 :inputcollid 0 :args ({COERCETODOMAINVALUE :typeId 23 :typeMod -1 :collation 0 :location 195} {CONST :consttype 23 :consttypmod -1 :constcollid 0 :constlen 4 :constbyval true :constisnull false :location 204 :constvalue 4 [ 0 0 0 0 0 0 0 0 ]}) :location 201} ## 2 {SCALARARRAYOPEXPR :opno 98 :opfuncid 67 :useOr true :inputcollid 100 :args ({RELABELTYPE :arg {COERCETODOMAINVALUE :typeId 1043 :typeMod 7 :collation 100 :location 121} :resulttype 25 :resulttypmod -1 :resultcollid 100 :relabelformat 2 :location -1} {ARRAYCOERCEEXPR :arg {ARRAY :array_typeid 1015 :array_collid 100 :element_typeid 1043 :elements ({CONST :consttype 1043 :consttypmod -1 :constcollid 100 :constlen -1 :constbyval false :constisnull false :location 131 :constvalue 7 [ 28 0 0 0 89 69 83 ]} {CONST :consttype 1043 :consttypmod -1 :constcollid 100 :constlen -1 :constbyval false :constisnull false :location 138 :constvalue 6 [ 24 0 0 0 78 79 ]}) :multidims false :location -1} :elemexpr {RELABELTYPE :arg {CASETESTEXPR :typeId 1043 :typeMod -1 :collation 0} :resulttype 25 :resulttypmod -1 :resultcollid 100 :relabelformat 2 :location -1} :resulttype 1009 :resulttypmod -1 :resultcollid 100 :coerceformat 2 :location -1}) :location 127} ## 3 {BOOLEXPR :boolop and :args ({OPEXPR :opno 1098 :opfuncid 1090 :opresulttype 16 :opretset false :opcollid 0 :inputcollid 0 :args ({VAR :varno 1 :varattno 5 :vartype 1082 :vartypmod -1 :varcollid 0 :varlevelsup 0 :varnoold 1 :varoattno 5 :location 804} {CONST :consttype 1082 :consttypmod -1 :constcollid 0 :constlen 4 :constbyval true :constisnull false :location 817 :constvalue 4 [ 33 -100 -1 -1 -1 -1 -1 -1 ]}) :location 814} {OPEXPR :opno 2359 :opfuncid 2352 :opresulttype 16 :opretset false :opcollid 0 :inputcollid 0 :args ({VAR :varno 1 :varattno 5 :vartype 1082 :vartypmod -1 :varcollid 0 :varlevelsup 0 :varnoold 1 :varoattno 5 :location 842} {OPEXPR :opno 1329 :opfuncid 1190 :opresulttype 1184 :opretset false :opcollid 0 :inputcollid 0 :args ({FUNCEXPR :funcid 1299 :funcresulttype 1184 :funcretset false :funcvariadic false :funcformat 0 :funccollid 0 :inputcollid 0 :args &lt;&gt; :location 856} {CONST :consttype 1186 :consttypmod -1 :constcollid 0 :constlen 16 :constbyval false :constisnull false :location 864 :constvalue 16 [ 0 0 0 0 0 0 0 0 0 0 0 0 -40 0 0 0 ]}) :location 862}) :location 852}) :location 837} ## 4 {SCALARARRAYOPEXPR :opno 98 :opfuncid 67 :useOr true :inputcollid 100 :args ({FUNCEXPR :funcid 871 :funcresulttype 25 :funcretset false :funcvariadic false :funcformat 0 :funccollid 100 :inputcollid 100 :args ({FUNCEXPR :funcid 401 :funcresulttype 25 :funcretset false :funcvariadic false :funcformat 1 :funccollid 100 :inputcollid 100 :args ({VAR :varno 1 :varattno 7 :vartype 1042 :vartypmod 5 :varcollid 100 :varlevelsup 0 :varnoold 1 :varoattno 7 :location 941}) :location 948}) :location 934} {ARRAY :array_typeid 1009 :array_collid 100 :element_typeid 25 :elements ({CONST :consttype 25 :consttypmod -1 :constcollid 100 :constlen -1 :constbyval false :constisnull false :location 969 :constvalue 5 [ 20 0 0 0 77 ]} {CONST :consttype 25 :consttypmod -1 :constcollid 100 :constlen -1 :constbyval false :constisnull false :location 980 :constvalue 5 [ 20 0 0 0 70 ]}) :multidims false :location 963}) :location 956} ## 5 {BOOLEXPR :boolop and :args ({OPEXPR :opno 1098 :opfuncid 1090 :opresulttype 16 :opretset false :opcollid 0 :inputcollid 0 :args ({VAR :varno 1 :varattno 8 :vartype 1082 :vartypmod -1 :varcollid 0 :varlevelsup 0 :varnoold 1 :varoattno 8 :location 1042} {CONST :consttype 1082 :consttypmod -1 :constcollid 0 :constlen 4 :constbyval true :constisnull false :location 1054 :constvalue 4 [ 1 -5 -1 -1 -1 -1 -1 -1 ]}) :location 1051} {OPEXPR :opno 2359 :opfuncid 2352 :opresulttype 16 :opretset false :opcollid 0 :inputcollid 0 :args ({VAR :varno 1 :varattno 8 :vartype 1082 :vartypmod -1 :varcollid 0 :varlevelsup 0 :varnoold 1 :varoattno 8 :location 1079} {OPEXPR :opno 1327 :opfuncid 1189 :opresulttype 1184 :opretset false :opcollid 0 :inputcollid 0 :args ({FUNCEXPR :funcid 1299 :funcresulttype 1184 :funcretset false :funcvariadic false :funcformat 0 :funccollid 0 :inputcollid 0 :args &lt;&gt; :location 1092} {CONST :consttype 1186 :consttypmod -1 :constcollid 0 :constlen 16 :constbyval false :constisnull false :location 1100 :constvalue 16 [ 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 ]}) :location 1098}) :location 1088}) :location 1074} ## 6 {SCALARARRAYOPEXPR :opno 98 :opfuncid 67 :useOr true :inputcollid 100 :args ({FUNCEXPR :funcid 871 :funcresulttype 25 :funcretset false :funcvariadic false :funcformat 0 :funccollid 100 :inputcollid 100 :args ({FUNCEXPR :funcid 401 :funcresulttype 25 :funcretset false :funcvariadic false :funcformat 1 :funccollid 100 :inputcollid 100 :args ({VAR :varno 1 :varattno 6 :vartype 1042 :vartypmod 5 :varcollid 100 :varlevelsup 0 :varnoold 1 :varoattno 6 :location 1181}) :location 1195}) :location 1174} {ARRAY :array_typeid 1009 :array_collid 100 :element_typeid 25 :elements ({CONST :consttype 25 :consttypmod -1 :constcollid 100 :constlen -1 :constbyval false :constisnull false :location 1216 :constvalue 5 [ 20 0 0 0 77 ]} {CONST :consttype 25 :consttypmod -1 :constcollid 100 :constlen -1 :constbyval false :constisnull false :location 1227 :constvalue 5 [ 20 0 0 0 83 ]}) :multidims false :location 1210}) :location 1203} ## consrc ## 1 (VALUE &gt;= 0) ## 2 ((VALUE)::text = ANY ((ARRAY[&#39;YES&#39;::character varying, &#39;NO&#39;::character varying])::text[])) ## 3 ((birthdate &gt;= &#39;1930-01-01&#39;::date) AND (birthdate &lt;= (now() - &#39;18 years&#39;::interval))) ## 4 (upper((gender)::text) = ANY (ARRAY[&#39;M&#39;::text, &#39;F&#39;::text])) ## 5 ((hiredate &gt;= &#39;1996-07-01&#39;::date) AND (hiredate &lt;= (now() + &#39;1 day&#39;::interval))) ## 6 (upper((maritalstatus)::text) = ANY (ARRAY[&#39;M&#39;::text, &#39;S&#39;::text])) ## condef ## 1 CHECK (VALUE &gt;= 0) ## 2 CHECK (VALUE::text = ANY (ARRAY[&#39;YES&#39;::character varying, &#39;NO&#39;::character varying]::text[])) ## 3 CHECK (birthdate &gt;= &#39;1930-01-01&#39;::date AND birthdate &lt;= (now() - &#39;18 years&#39;::interval)) ## 4 CHECK (upper(gender::text) = ANY (ARRAY[&#39;M&#39;::text, &#39;F&#39;::text])) ## 5 CHECK (hiredate &gt;= &#39;1996-07-01&#39;::date AND hiredate &lt;= (now() + &#39;1 day&#39;::interval)) ## 6 CHECK (upper(maritalstatus::text) = ANY (ARRAY[&#39;M&#39;::text, &#39;S&#39;::text])) 13.5 Creating your own data dictionary If you are going to work with a database for an extended period it can be useful to create your own data dictionary. This can take the form of keeping detaild notes as well as extracting metadata from the dbms. Here is an illustration of the idea. This probably doens’t work anymore # some_tables &lt;- c(&quot;rental&quot;, &quot;city&quot;, &quot;store&quot;) # # all_meta &lt;- map_df(some_tables, sp_get_dbms_data_dictionary, con = con) # # all_meta # # glimpse(all_meta) # # kable(head(all_meta)) 13.6 Save your work! The work you do to understand the structure and contents of a database can be useful for others (including future-you). So at the end of a session, you might look at all the data frames you want to save. Consider saving them in a form where you can add notes at the appropriate level (as in a Google Doc representing table or columns that you annotate over time). ls() ## [1] &quot;columns_info_schema_info&quot; &quot;columns_info_schema_table&quot; ## [3] &quot;con&quot; &quot;constraint_column_usage&quot; ## [5] &quot;cranex&quot; &quot;key_column_usage&quot; ## [7] &quot;keys&quot; &quot;public_tables&quot; ## [9] &quot;referential_constraints&quot; &quot;rs&quot; ## [11] &quot;schema_list&quot; &quot;table_constraints&quot; ## [13] &quot;table_info&quot; &quot;table_info_schema_table&quot; ## [15] &quot;tables&quot; "],
["appendix-background-basic-concepts.html", "A Background and Basic Concepts A.1 The big picture: R and the Docker / PostgreSQL playground on your machine A.2 Your computer and its operating system A.3 R A.4 Our sqlpetr package A.5 Docker A.6 ‘Normal’ and ‘normalized’ data A.7 SQL Language A.8 Enterprise DBMS", " A Background and Basic Concepts This Appendix describes: The overall structure of our Docker-based PostgreSQL sandbox Basic concepts around each of the elements that make up our sandbox: tidy data, pipes, Docker, PostgreSQL, data representation, and our petsqlr package. A.1 The big picture: R and the Docker / PostgreSQL playground on your machine Here is an overview of how R and Docker fit on your operating system in this book’s sandbox: R and Docker You run R from RStudio to set up Docker, launch PostgreSQL inside it and then send queries directly to PostgreSQL from R. (We provide more details about our sandbox environment in the chapter on mapping your environment. A.2 Your computer and its operating system The playground that we construct in this book is designed so that some of the mysteries of accessing a corporate database are more visible – it’s all happening on your computer. The challenge, however, is that we know very little about your computer and its operating system. In the workshops we’ve given about this book, the details of individual computers have turned out to be diverse and difficult to pin down in advance. So there can be many issues, but not many basic concepts that we can highlight in advance. A.3 R We assume a general familiarity with R and RStudio. RStudio’s Big Data workshop at the 2019 RStudio has an abundance of introductory material (Ruiz 2019). This book is Tidyverse-oriented, so we assume familiarity with the pipe operator, tidy data (Wickham 2014), dplyr, and techniques for tidying data (Wickham 2018). R connects to a database by means of a series of packages that work together. The following diagram from a big data workshop at the 2019 RStudio conference shows the big picture. The biggest difference in terms of retrieval strategies is between writing dplyr and native SQL code. Dplyr generates SQL-92 standard code; whereas you can write SQL code that leverages the specific language features of your DBMS when you write SQL code yourself. Rstudio’s DBMS architecture - slide # 33 A.4 Our sqlpetr package The sqlpetr package is the companion R package for this database tutorial. It has two classes of functions: Functions to install the dependencies needed to build the book and perform the operations covered in the tutorial, and Utilities for dealing with Docker and the PostgreSQL Docker image we use. sqlpetr has a pkgdown site at https://smithjd.github.io/sqlpetr/. A.5 Docker Docker and the DevOps tools surrounding it have fostered a revolution in the way services are delivered over the internet. In this book, we’re piggybacking on a small piece of that revolution, Docker on the desktop. A.5.1 Virtual machines and hypervisors A virtual machine is a machine that is running purely as software hosted by another real machine. To the user, a virtual machine looks just like a real one. But it has no processors, memory or I/O devices of its own - all of those are supplied and managed by the host. A virtual machine can run any operating system that will run on the host’s hardware. A Linux host can run a Windows virtual machine and vice versa. A hypervisor is the component of the host system software that manages virtual machines, usually called guests. Linux systems have a native hypervisor called Kernel Virtual Machine (kvm). And laptop, desktop and server processors from Intel and Advanced Micro Devices (AMD) have hardware that makes this hypervisor more efficient. Windows servers and Windows 10 Pro have a hypervisor called Hyper-V. Like kvm, Hyper-V can take advantage of the hardware in Intel and AMD processors. On Macintosh, there is a Hypervisor Framework (https://developer.apple.com/documentation/hypervisor) and other tools build on that. If this book is about Docker, why do we care about virtual machines and hypervisors? Docker is a Linux subsystem - it only runs on Linux laptops, desktops and servers. As we’ll see shortly, if we want to run Docker on Windows or MacOS, we’ll need a hypervisor, a Linux virtual machine and some “glue logic” to provide a Docker user experience equivalent to the one on a Linux system. A.5.2 Containers A container is a set of processes running in an operating system. The host operating system is usually Linux, but other operating systems also can host containers. Unlike a virtual machine, the container has no operating system kernel of its own. If the host is running the Linux kernel, so is the container. And since the container OS is the same as the host OS, there’s no need for a hypervisor or hardware to support the hypervisor. So a container is more efficient than a virtual machine. A container does have its own file system. From inside the container, this file system looks like a Linux file system, but it can use any Linux distro. For example, you can have an Ubuntu 18.04 LTS host running Ubuntu 14.04 LTS or Fedora 28 or CentOS 7 containers. The kernel will always be the host kernel, but the utilities and applications will be those from the container. A.5.3 Docker itself While there are both older (lxc) and newer container tools, the one that has caught on in terms of widespread use is Docker (Docker 2019a). Docker is widely used on cloud providers to deploy services of all kinds. Using Docker on the desktop to deliver standardized packages, as we are doing in this book, is a secondary use case, but a common one. If you’re using a Linux laptop / desktop, all you need to do is install Docker CE (Docker 2018a). However, most laptops and desktops don’t run Linux - they run Windows or MacOS. As noted above, to use Docker on Windows or MacOS, you need a hypervisor and a Linux virtual machine. A.5.4 Docker objects The Docker subsystem manages several kinds of objects - containers, images, volumes and networks. In this book, we are only using the basic command line tools to manage containers, images and volumes. Docker images are files that define a container’s initial file system. You can find pre-built images on Docker Hub and the Docker Store - the base PostgreSQL image we use comes from Docker Hub (https://hub.docker.com/_/postgres/). If there isn’t a Docker image that does exactly what you want, you can build your own by creating a Dockerfile and running docker build. We do this in [Build the pet-sql Docker Image]. Docker volumes – explain mount. A.5.5 Hosting Docker on Windows machines There are two ways to get Docker on Windows. For Windows 10 Home and older versions of Windows, you need Docker Toolbox (Docker 2019e). Note that for Docker Toolbox, you need a 64-bit AMD or Intel processor with the virtualization hardware installed and enabled in the BIOS. For Windows 10 Pro, you have the Hyper-V virtualizer as standard equipment, and can use Docker for Windows (Docker 2019c). A.5.6 Hosting Docker on macOS machines As with Windows, there are two ways to get Docker. For older Intel systems, you’ll need Docker Toolbox (Docker 2019d). Newer systems (2010 or later running at least macOS El Capitan 10.11) can run Docker for Mac (Docker 2019b). A.5.7 Hosting Docker on UNIX machines Unix was the original host for both R and Docker. Unix-like commands show up. A.6 ‘Normal’ and ‘normalized’ data A.6.1 Tidy data Tidy data (Wickham 2014) is well-behaved from the point of view of analysis and tools in the Tidyverse (RStudio 2019). Tidy data is easier to think about and it is usually worthwhile to make the data tidy (Wickham 2018). Tidy data is roughly equivalent to third normal form as discussed below. A.6.2 Design of “normal data” Data in a database is most often optimized to minimize storage space and increase performance while preserving integrity when adding, changing, or deleting data. The Wikipedia article on Database Normalization has a good introduction to the characteristics of “normal” data and the process of re-organizing it to meet those desirable criteria (Wikipedia 2019). The bottom line is that “data normalization is practical” although there are mathematical arguments for normalization based on the preservation of data integrity. A.7 SQL Language SQL stands for Structured Query Language. It is a database language where we can perform certain operations on the existing database and we can use it create a new database. There are four main categories where the SQL commands fall into: DML, DDL, DCL, and TCL. A.7.1 Data Manipulation Langauge (DML) These four SQL commands deal with the manipulation of data in the database. For everyday analytical work, these are the commands that you will use the most. 1. SELECT 2. INSERT 3. UPDATE 4. DELETE A.7.2 Data Definition Langauge (DDL) It consists of the SQL commands that can be used to define a database schema. The DDL commands include: 1. CREATE 2. ALTER 3. TRUNCATE 4. COMMENT 5. RENAME 6. DROP A.7.3 Data Control Language (DCL) The DCL commands deals with user rights, permissions and other controls in database management system. 1. GRANT 2. REVOKE A.7.4 Transaction Control Language (TCL) These commands deal with the control over transaction within the database. Transaction combines a set of tasks into single execution. 1. SET TRANSACTION 2. SAVEPOINT 3. ROLLBACK 4. COMMIT A.8 Enterprise DBMS The organizational context of a database matters just as much as its design characteristics. The design of a database (or data model) may have been purchased from an external vendor or developed in-house. In either case time has a tendency to erode the original design concept so that the data you find in a DBMS may not quite match the original design specification. And the original design may or may not be well reflected in the current naming of tables, columns and other objects. It’s a naive misconception to think that the data you are analyzing just “comes from the database”, although that’s literally true and may be the step that happens before you get your hands on it. In fact it comes from the people who design, enter, manage, protect, and use your organization’s data. In practice, a database administrator (DBA) is often a key point of contact in terms of access and may have stringent criteria for query performance. Make friends with your DBA. A.8.1 SQL databases Although there are ANSI standards for SQL syntax, different implementations vary in enough details that R’s ability to customize queries for those implementations is very helpful. The tables in a DBMS correspond to a data frame in R, so interaction with a DBMS is fairly natural for useRs. SQL code is characterized by the fact that it describes what to retrieve, leaving the DBMS back end to determine how to do it. Therefore it has a batch feel. The pipe operator (%&gt;%, which is read as and then) is inherently procedural when it’s used with dplyr: it can be used to construct queries step-by-step. Once a test dplyr query has been executed, it is easy to inspect the results and add steps with the pipe operator to refine or expand the query. A.8.2 Data mapping between R vs SQL data types The following code shows how different elements of the R bestiary are translated to and from ANSI standard data types. Note that R factors are translated as TEXT so that missing levels are ignored on the SQL side. library(DBI) dbDataType(ANSI(), 1:5) ## [1] &quot;INT&quot; dbDataType(ANSI(), 1) ## [1] &quot;DOUBLE&quot; dbDataType(ANSI(), TRUE) ## [1] &quot;SMALLINT&quot; dbDataType(ANSI(), Sys.Date()) ## [1] &quot;DATE&quot; dbDataType(ANSI(), Sys.time()) ## [1] &quot;TIMESTAMP&quot; dbDataType(ANSI(), Sys.time() - as.POSIXct(Sys.Date())) ## [1] &quot;TIME&quot; dbDataType(ANSI(), c(&quot;x&quot;, &quot;abc&quot;)) ## [1] &quot;TEXT&quot; dbDataType(ANSI(), list(raw(10), raw(20))) ## [1] &quot;BLOB&quot; dbDataType(ANSI(), I(3)) ## [1] &quot;DOUBLE&quot; dbDataType(ANSI(), iris) ## Sepal.Length Sepal.Width Petal.Length Petal.Width Species ## &quot;DOUBLE&quot; &quot;DOUBLE&quot; &quot;DOUBLE&quot; &quot;DOUBLE&quot; &quot;TEXT&quot; The DBI specification provides extensive documentation that is worth digesting if you intend to work with a DBMS from R. As you work through the examples in this book, you will also want to refer to the following resources: RStudio’s Databases using R site describes many of the technical details involved. The RStudio community is an excellent place to ask questions or study what has been discussed previously. A.8.3 PostgreSQL and connection parameters An important detail: We use a PostgreSQL database server running in a Docker container for the database functions. It is installed inside Docker, so you do not have to download or install it yourself. To connect to it, you have to define some parameters. These parameters are used in two places: When the Docker container is created, they’re used to initialize the database, and Whenever we connect to the database, we need to specify them to authenticate. We define the parameters in an environment file that R reads when starting up. The file is called .Renviron, and is located in your home directory. See the discussion of securing and using dbms credentials. A.8.4 Connecting the R and DBMS environments Although everything happens on one machine in our Docker / PostgreSQL playground, in real life R and PostgreSQL (or other DBMS) will be in different environments on separate machines. How R connects them gives you control over where the work happens. You need to be aware of the differences beween the R and DBMS environments as well as how you can leverage the strengths of each one. Characteristics of local vs. server processing Dimension Local Remote Design purpose The R environment on your local machine is designed to be flexible and easy to use; ideal for data investigation. The DBMS environment is designed for large and complex databases where data integrity is more important than flexibility or ease of use. Processor power Your local machine has less memory, speed, and storage than the typical database server. Database servers are specialized, more expensive, and have more power. Memory constraint In R, query results must fit into memory. Servers have a lot of memory and write intermediate results to disk if needed without you knowing about it. Data crunching Data lives in the DBMS, so crunching it down locally requires you to pull it over the network. A DBMS has powerful data crunching capabilities once you know what you want and moves data over the server backbone to crunch it. Security Local control. Whether it is good or not depends on you. Responsibility of database administrators who set the rules. You play by their rules. Storage of intermediate results Very easy to save a data frame with intermediate results locally. May require extra privileges to save results in the database. Analytical resources Ecosystem of available R packages Extending SQL instruction set involves dbms-specific functions or R pseudo functions Collaboration One person working on a few data.frames. Many people collaborating on many tables. A.8.5 Using SQLite to simulate an enterprise DBMS SQLite engine is embedded in one file, so that many tables are stored together in one object. SQL commands can run against an SQLite database as demonstrated in how many uses of SQLite are in the RStudio dbplyr documentation. References "],
["chapter-appendix-setup-instructions.html", "B - Setup instructions B.1 Sandbox prerequisites B.2 R, RStudio and Git B.3 Install Docker", " B - Setup instructions This appendix explains: Hardware and software prerequisites for setting up the sandbox used in this book Documentation for all of the elements used in this sandbox B.1 Sandbox prerequisites The sandbox environment requires: A computer running Windows (Windows 7 64-bit or later - Windows 10-Pro is recommended), MacOS, or Linux (any Linux distro that will run Docker Community Edition, R and RStudio will work) Current versions of R and RStudio [Vargas (2018)) required. Docker (instructions below) Our companion package sqlpetr (Borasky et al. 2018) The database we use is PostgreSQL 11, but you do not need to install it - it’s installed via a Docker image. In addition to the current version of R and RStudio, you will need current versions of the following packages: DBI (R Special Interest Group on Databases (R-SIG-DB), Wickham, and Müller 2018) DiagrammeR (Iannone 2019) RPostgres (Wickham, Ooms, and Müller 2018) dbplyr (Wickham and Ruiz 2019) devtools (Wickham, Hester, and Chang 2019) downloader (Chang 2015) glue (Hester 2019) here (Müller 2017) knitr (Xie 2019b) skimr (Quinn et al. 2019) tidyverse (Wickham 2017) bookdown (Xie 2019a) (for compiling the book, if you want to) B.2 R, RStudio and Git Most readers will probably have these already, but if not: If you do not have R: Go to https://cran.rstudio.com/ (R Core Team 2018). Select the download link for your system. For Linux, choose your distro. We recommend Ubuntu 18.04 LTS “Bionic Beaver”. It’s much easier to find support answers on the web for Ubuntu than other distros. Follow the instructions. Note: if you already have R, make sure it’s upgraded to R 3.5.1. We don’t test on older versions! If you do not have RStudio: go to https://www.rstudio.com/products/rstudio/download/#download. Make sure you have version 1.1.463 or later. If you do not have Git: On Windows, go to https://git-scm.com/download/win and follow instructions. There are a lot of options. Just pick the defaults!!! On MacOS, go to https://sourceforge.net/projects/git-osx-installer/files/ and follow instructions. On Linux, install Git from your distribution. B.3 Install Docker Installation depends on your operating system and we have found that it can be somewhat intricate. You will need Docker Community Edition (Docker CE): For Windows, consider these issues and follow these instructions: Go to https://store.docker.com/editions/community/docker-ce-desktop-windows. If you don’t have a Docker Store log in, you’ll need to create one. Then: If you have Windows 10 Pro, download and install Docker for Windows. If you have an older version of Windows, download and install Docker Toolbox (https://docs.docker.com/toolbox/overview/). Note that both versions require 64-bit hardware and the virtualization needs to be enabled in the firmware. On a Mac (Docker 2018c): Go to https://store.docker.com/editions/community/docker-ce-desktop-mac. If you don’t have a Docker Store login, you’ll need to create one. Then download and install Docker for Mac. Your MacOS must be at least release Yosemite (10.10.3). On UNIX flavors (Docker 2018a): note that, as with Windows and MacOS, you’ll need a Docker Store loin. Although most Linux distros ship with some version of Docker, chances are it’s not the same as the official Docker CE version. Ubuntu: https://store.docker.com/editions/community/docker-ce-server-ubuntu, Fedora: https://store.docker.com/editions/community/docker-ce-server-fedora, Cent OS: https://store.docker.com/editions/community/docker-ce-server-centos, Debian: https://store.docker.com/editions/community/docker-ce-server-debian. Note that on Linux, you will need to be a member of the docker group to use Docker. To do that, execute sudo usermod -aG docker ${USER}. Then, log out and back in again. References "],
["chapter-appendix-postgres-local-db-installation.html", "C Appendix E - Install adventureworks on your own machine C.1 Overview C.2 Resources", " C Appendix E - Install adventureworks on your own machine This appendix demonstrates how to: Setup the adventureworks database locally on your machine Connect to the adventureworks database These instructions should be tested by a Windows user The PostgreSQL tutorial links do not work, despite being pasted from the site C.1 Overview This appendix details the process to download and restore the adventureworks database so that you can work with the database locally on your own machine. This tutorial assumes that (1) you have PostgreSQL installed on your computer, and (2) that you have configured your system to run psql at the command line. Installation of PostgreSQL and configuration of psql are outside the scope of this book. C.1.1 Download the adventureworks database Download the adventureworks database from here. C.1.2 Restore the dvdrental database at the command line Launch the psql tool Enter account information to log into the PostgreSQL database server, if prompted Enter the following command to create a new database CREATE DATABASE adventureworks; Open a new terminal window (not in psql) and navigate to the folder where the adventureworks.sql file is located. Use the cd command in the terminal, followed by the file path to change directories to the location of adventureworks.sql. For example: cd /Users/username/Documents/adventureworks. Enter the following command prompt: pg_restore -d adventureworks -f -U postgres adventureworks.sql C.1.3 Restore the adventureworks database using pgAdmin Another option to restore the adventureworks database locally on your machine is with the pgAdmin graphical user interface. However, we highly recommend using the command line methods detailed above. Installation and configuration of pgAdmin is outside the scope of this book. C.2 Resources Instructions by PostgreSQL Tutorial to load the dvdrental database. (PostgreSQL Tutorial Website 2019). Windows installation of PostgreSQL by PostgreSQL Tutorial. (PostgreSQL Tutorial Website 2019). Installation of PostgreSQL on a Mac using Postgres.app. (Postgres.app 2019). Command line configuration of PosgreSQL on a Mac with Postgres.app. (Postgres.app 2019). Installing PostgreSQL for Linux, Arch Linux, Windows, Mac and other operating systems, by Postgres Guide. (Postgres Guide Website 2019). "],
["chapter-windows-tech-details.html", "D Appendix B - Additional technical details for Windows users D.1 Hardware requirements D.2 Software requirements D.3 Docker for Windows settings D.4 Git, GitHub and line endings", " D Appendix B - Additional technical details for Windows users This chapter explains: How to setup your environment for Windows How to use Git and GitHub effectively on Windows Skip these instructions if your computer has either OSX or a Unix variant. D.1 Hardware requirements You will need an Intel or AMD processor with 64-bit hardware and the hardware virtualization feature. Most machines you buy today will have that, but older ones may not. You will need to go into the BIOS / firmware and enable the virtualization feature. You will need at least 4 gigabytes of RAM! D.2 Software requirements You will need Windows 7 64-bit or later. If you can afford it, I highly recommend upgrading to Windows 10 Pro. D.2.1 Windows 7, 8, 8.1 and Windows 10 Home (64 bit) Install Docker Toolbox. The instructions are here: https://docs.docker.com/toolbox/toolbox_install_windows/. Make sure you try the test cases and they work! D.2.2 Windows 10 Pro Install Docker for Windows stable. The instructions are here: https://docs.docker.com/docker-for-windows/install/#start-docker-for-windows. Again, make sure you try the test cases and they work. D.3 Docker for Windows settings D.3.1 Shared drives If you’re going to mount host files into container file systems (as we do in the following chapters), you need to set up shared drives. Open the Docker settings dialog and select Shared Drives. Check the drives you want to share. In this screenshot, the D: drive is my 1 terabyte hard drive. D.3.2 Kubernetes Kubernetes is a container orchestration / cloud management package that’s a major DevOps tool. It’s heavily supported by Red Hat and Google, and as a result is becoming a required skill for DevOps. However, it’s overkill for this project at the moment. So you should make sure it’s not enabled. Go to the Kubernetes dialog and make sure the Enable Kubernetes checkbox is cleared. D.4 Git, GitHub and line endings Git was originally developed for Linux - in fact, it was created by Linus Torvalds to manage hundreds of different versions of the Linux kernel on different machines all around the world. As usage has grown, Git has achieved a huge following and is the version control system used by most large open source projects, including this one. If you’re on Windows, there are some things about Git and GitHub you need to watch. First of all, there are quite a few tools for running Git on Windows, but the RStudio default and recommended one is Git for Windows (https://git-scm.com/download/win). By default, text files on Linux end with a single linefeed (\\n) character. But on Windows, text files end with a carriage return and a line feed (\\r\\n). See https://en.wikipedia.org/wiki/Newline for the gory details. Git defaults to checking files out in the native mode. So if you’re on Linux, a text file will show up with the Linux convention, and if you’re on Windows, it will show up with the Windows convention. Most of the time this doesn’t cause any problems. But Docker containers usually run Linux, and if you have files from a repository on Windows that you’ve sent to the container, the container may malfunction or give weird results. This kind of situation has caused a lot of grief for contributors to this project, so beware. In particular, executable sh or bash scripts will fail in a Docker container if they have Windows line endings. You may see an error message with \\r in it, which means the shell saw the carriage return (\\r) and gave up. But often you’ll see no hint at all what the problem was. So you need a way to tell Git that some files need to be checked out with Linux line endings. See https://help.github.com/articles/dealing-with-line-endings/ for the details. Summary: You’ll need a .gitattributes file in the root of the repository. In that file, all text files (scripts, program source, data, etc.) that are destined for a Docker container will need to have the designator &lt;spec&gt; text eol=lf, where &lt;spec&gt; is the file name specifier, for example, *.sh. This repo includes a sample: .gitattributes "],
["chapter-appendix-postresql-authentication.html", "E Appendix C - PostgreSQL Authentication E.1 Introduction E.2 Password authentication on the PostgreSQL Docker image E.3 Adding roles", " E Appendix C - PostgreSQL Authentication E.1 Introduction PostgreSQL has a very robust and flexible set of authentication methods (PostgreSQL Global Development Group 2018a). In most production environments, these will be managed by the database administrator (DBA) on a need-to-access basis. People and programs will be granted access only to a minimum set of capabilities required to function, and nothing more. In this book, we are using a PostgreSQL Docker image (Docker 2018d). When we create a container from that image, we use its native mechanism to create the postgres database superuser with a password specified in an R environment file ~/.Renviron. See Securing and using your dbms log-in credentials for how we do this. What that means is that you are the DBA - the database superuser - for the PostgreSQL database cluster running in the container! You can create and destroy databases, schemas, tables, views, etc. You can also create and destroy users - called roles in PostgreSQL, and GRANT or REVOKE their privileges with great precision. You don’t have to do that to use this book. But if you want to experiment with it, feel free! E.2 Password authentication on the PostgreSQL Docker image Of the many PostgreSQL authentication mechanisms, the simplest that’s universallly available is password authentication (PostgreSQL Global Development Group 2018c). That’s what we use for the postgres database superuser, and what we recommend for any roles you may create. Once a role has been created, you need five items to open a connection to the PostgreSQL database cluster: The host. This is a name or IP address that your network can access. In this book, with the database running in a Docker container, that’s usually localhost. The port. This is the port the server is listening on. It’s usually the default, 5439, and that’s what we use. But in a secure environment, it will often be some random number to lower the chances that an attacker can find the database server. And if you have more than one server on the network, you’ll need to use different ports for each of them. The dbname to connect to. This database must exist or the connection attempt will fail. The user. This user must exist in the database cluster and be allowed to access the database. We are using the database superuser postgres in this book. The password. This is set by the DBA for the user. In this book we use the password defined in Securing and using your dbms log-in credentials. E.3 Adding roles As noted above, PostgreSQL has a very flexible fine-grained access permissions system. We can’t cover all of it; see PostgreSQL Global Development Group (2018b) for the full details. But we can give an example. E.3.1 Setting up Docker First, we need to make sure we don’t have any other databases listening on the default port 5439. sqlpetr::sp_check_that_docker_is_up() ## [1] &quot;Docker is up, running these containers:&quot; ## [2] &quot;CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES&quot; ## [3] &quot;dd6f353c7881 postgres:11 \\&quot;docker-entrypoint.s…\\&quot; About a minute ago Up 9 seconds 0.0.0.0:5432-&gt;5432/tcp adventureworks&quot; sqlpetr::sp_docker_remove_container(&quot;cattle&quot;) ## [1] 0 # in case you&#39;ve been doing things out of order, stop a container named &#39;adventureworks&#39; if it exists: sqlpetr::sp_docker_stop(&quot;adventureworks&quot;) E.3.2 Creating a new container We’ll create a “cattle” container with a default PostgreSQL 10 database cluster. sqlpetr::sp_make_simple_pg(&quot;cattle&quot;) con &lt;- sqlpetr::sp_get_postgres_connection( host = &quot;localhost&quot;, port = 5439, dbname = &quot;postgres&quot;, user = &quot;postgres&quot;, password = &quot;postgres&quot;, seconds_to_test = 30 ) E.3.3 Adding a role Now, let’s add a role. We’ll add a role that can log in and create databases, but isn’t a superuser. Since this is a demo and not a real production database cluster, we’ll specify a password in plaintext. And we’ll create a database for our new user. Create the role: DBI::dbExecute( con, &quot;CREATE ROLE charlie LOGIN CREATEDB PASSWORD &#39;chaplin&#39;;&quot; ) ## [1] 0 Create the database: DBI::dbExecute( con, &quot;CREATE DATABASE charlie OWNER = charlie&quot;) ## [1] 0 E.3.4 Did it work? DBI::dbDisconnect(con) con &lt;- sqlpetr::sp_get_postgres_connection( host = &quot;localhost&quot;, port = 5439, dbname = &quot;postgres&quot;, user = &quot;charlie&quot;, password = &quot;chaplin&quot;, seconds_to_test = 30 ) OK, we can connect. Let’s do some stuff! data(&quot;iris&quot;) dbCreateTable creates the table with columns matching the data frame. But it does not send data to the table. DBI::dbCreateTable(con, &quot;iris&quot;, iris) To send data, we use dbAppendTable. DBI::dbAppendTable(con, &quot;iris&quot;, iris) ## Warning: Factors converted to character ## [1] 150 DBI::dbListTables(con) ## [1] &quot;iris&quot; head(DBI::dbReadTable(con, &quot;iris&quot;)) ## Sepal.Length Sepal.Width Petal.Length Petal.Width Species ## 1 5.1 3.5 1.4 0.2 setosa ## 2 4.9 3.0 1.4 0.2 setosa ## 3 4.7 3.2 1.3 0.2 setosa ## 4 4.6 3.1 1.5 0.2 setosa ## 5 5.0 3.6 1.4 0.2 setosa ## 6 5.4 3.9 1.7 0.4 setosa DBI::dbDisconnect(con) E.3.5 Remove the container sqlpetr::sp_docker_remove_container(&quot;cattle&quot;) ## [1] 0 References "],
["chapter-appendix-dplyr-functions.html", "F Dplyr functions and SQL cross-walk", " F Dplyr functions and SQL cross-walk Where are these covered and should they be included? Dplyr Function description SQL Clause Where Category all_equal() all.equal() Flexible equality comparison for data frames Two-table verbs all_vars() any_vars() Apply predicate to all variables scoped-Operate on a selection of variables arrange() Arrange rows by variables ORDER BY 13.1.4 (21) Basic single-table verbs arrange_all() arrange_at() arrange_if() Arrange rows by a selection of variables ORDER BY scoped-Operate on a selection of variables auto_copy() Copy tables to same source, if necessary Remote tables between() Do values in a numeric vector fall in specified range? Vector functions bind_rows() bind_cols() combine() Efficiently bind multiple data frames by row and column Two-table verbs case_when() A general vectorised if Vector functions coalesce() Find first non-missing element Vector functions compute() collect() collapse() Force computation of a database query Remote tables copy_to() Copy a local data frame to a remote src Remote tables cumall() cumany() cummean() Cumulativate versions of any, all, and mean Vector functions desc() Descending order Vector functions distinct() Return rows with matching conditions SELECT distinct * Basic single-table verbs distinct() Select distinct/unique rows SELECT distinct {colname1,…colnamen} Basic single-table verbs do() Do anything NA Basic single-table verbs explain() show_query() Explain details of a tbl Remote tables filter_all() filter_if() filter_at() Filter within a selection of variables scoped-Operate on a selection of variables funs() Create a list of functions calls. scoped-Operate on a selection of variables group_by() ungroup() Objects exported from other packages GROUP BY no ungroup Basic single-table verbs group_by_all() group_by_at() group_by_if() Group by a selection of variables scoped-Operate on a selection of variables groups() group_vars() Return grouping variables Metadata ident() Flag a character vector as SQL identifiers Remote tables if_else() Vectorised if Vector functions inner_join() left_join() right_join() full_join() semi_join() anti_join() Join two tbls together Two-table verbs inner_join()left_join() right_join() full_join() semi_join() anti_join() Join data frame tbls Two-table verbs intersect() union() union_all() setdiff() setequal() Set operations Two-table verbs lead() lag() Lead and lag. Vector functions mutate() transmute() Add new variables SELECT computed_value computed_name 11.5.2 (13) Basic single-table verbs n() The number of observations in the current group. Vector functions n_distinct() Efficiently count the number of unique values in a set of vector Vector functions na_if() Convert values to NA Vector functions near() Compare two numeric vectors Vector functions nth() first() last() Extract the first, last or nth value from a vector Vector functions order_by() A helper function for ordering window function output Vector functions pull() Pull out a single variable SELECT column_name; Basic single-table verbs recode() recode_factor() Recode values Vector functions row_number() ntile() min_rank() dense_rank() percent_rank() cume_dist() Windowed rank functions. Vector functions rowwise() Group input by rows Other backends sample_n() sample_frac() Sample n rows from a table ORDER BY RANDOM() LIMIT 10 Basic single-table verbs select() rename() Select/rename variables by name SELECT column_name alias_name 9.1.8 (11) Basic single-table verbs select_all() rename_all() select_if() rename_if() select_at() rename_at() Select and rename a selection of variables scoped-Operate on a selection of variables slice() Select rows by position SELECT row_number() over (partition by expression(s) order_by exp) Basic single-table verbs sql() SQL escaping. Remote tables src_mysql() src_postgres() src_sqlite() Source for database backends Remote tables summarise_all() summarise_if() summarise_at() summarize_all() summarize_if() summarize_at() mutate_all() mutate_if() mutate_at() transmute_all() transmute_if() transmute_at() Summarise and mutate multiple columns. scoped-Operate on a selection of variables summarize() Reduces multiple values down to a single value SELECT aggregate_functions GROUP BY 11.5.1 (13) Basic single-table verbs tally() count()add_tally() add_count() Count/tally observations by group GROUP BY 9.1.6 (11) Single-table helpers tbl() is.tbl() as.tbl() Create a table from a data source Remote tables top_n() Select top (or bottom) n rows (by value) ORDER BY VALUE {DESC} LIMIT 10 Single-table helpers vars() Select variables scoped-Operate on a selection of variables "],
["chapter-appendix-dbi-index.html", "G DBI package functions - INDEX", " G DBI package functions - INDEX Where are these covered and should the by included? DBI 1st time Call Example/Notes DBIConnct 6.3.2 (04) in sp_get_postgres_connection dbAppendTable dbCreateTable dbDisconnect 6.4n (04) dbDisconnect(con) dbExecute 10.4.2 (13) Executes a statement and returns the number of rows affected. dbExecute() comes with a default implementation (which should work with most backends) that calls dbSendStatement(), then dbGetRowsAffected(), ensuring that the result is always free-d by dbClearResult(). dbExistsTable dbExistsTable(con,‘actor’) dbFetch 17.1 (72) dbFetch(rs) dbGetException dbGetInfo dbGetInfo(con) dbGetQuery 10.4.1 (13) dbGetQuery(con,‘select * from store;’) dbIsReadOnly dbIsReadOnly(con) dbIsValid dbIsValid(con) dbListFields 6.3.3 (04) DBI::dbListFields(con, “mtcars”) dbListObjects dbListObjects(con) dbListTables 6.3.2 (04) DBI::dbListTables(con, con) dbReadTable 8.1.2 DBI::dbReadTable(con, “rental”) dbRemoveTable dbSendQuery 17.1 (72) rs &lt;- dbSendQuery(con, “SELECT * FROM mtcars WHERE cyl = 4”) dbSendStatement The dbSendStatement() method only submits and synchronously executes the SQL data manipulation statement (e.g., UPDATE, DELETE, INSERT INTO, DROP TABLE, …) to the database engine. dbWriteTable 6.3.3 (04) dbWriteTable(con, “mtcars”, mtcars, overwrite = TRUE) "],
["chapter-appendix-dplyr-to-postres-translation.html", "H Appendix _ Dplyr to SQL translations H.1 Overview", " H Appendix _ Dplyr to SQL translations You may be interested in exactly how the DBI package translates R functions into their SQL quivalents – and in which functions are translated and which are not. This Appendix answers those questions. It is based on the work of Dewey Dunnington (@paleolimbot) which he published here: https://apps.fishandwhistle.net/archives/1503 https://rud.is/b/2019/04/10/lost-in-sql-translation-charting-dbplyr-mapped-sql-function-support-across-all-backends/ H.1 Overview These packages are called below: library(tidyverse) library(dbplyr) library(gt) library(here) library(sqlpetr) list the DBI functions that are available: names(sql_translate_env(simulate_dbi())) ## [1] &quot;-&quot; &quot;:&quot; &quot;!&quot; ## [4] &quot;!=&quot; &quot;(&quot; &quot;[&quot; ## [7] &quot;[[&quot; &quot;{&quot; &quot;*&quot; ## [10] &quot;/&quot; &quot;&amp;&quot; &quot;&amp;&amp;&quot; ## [13] &quot;%%&quot; &quot;%&gt;%&quot; &quot;%in%&quot; ## [16] &quot;^&quot; &quot;+&quot; &quot;&lt;&quot; ## [19] &quot;&lt;=&quot; &quot;==&quot; &quot;&gt;&quot; ## [22] &quot;&gt;=&quot; &quot;|&quot; &quot;||&quot; ## [25] &quot;$&quot; &quot;abs&quot; &quot;acos&quot; ## [28] &quot;as_date&quot; &quot;as_datetime&quot; &quot;as.character&quot; ## [31] &quot;as.Date&quot; &quot;as.double&quot; &quot;as.integer&quot; ## [34] &quot;as.integer64&quot; &quot;as.logical&quot; &quot;as.numeric&quot; ## [37] &quot;as.POSIXct&quot; &quot;asin&quot; &quot;atan&quot; ## [40] &quot;atan2&quot; &quot;between&quot; &quot;bitwAnd&quot; ## [43] &quot;bitwNot&quot; &quot;bitwOr&quot; &quot;bitwShiftL&quot; ## [46] &quot;bitwShiftR&quot; &quot;bitwXor&quot; &quot;c&quot; ## [49] &quot;case_when&quot; &quot;ceil&quot; &quot;ceiling&quot; ## [52] &quot;coalesce&quot; &quot;cos&quot; &quot;cosh&quot; ## [55] &quot;cot&quot; &quot;coth&quot; &quot;day&quot; ## [58] &quot;desc&quot; &quot;exp&quot; &quot;floor&quot; ## [61] &quot;hour&quot; &quot;if&quot; &quot;if_else&quot; ## [64] &quot;ifelse&quot; &quot;is.na&quot; &quot;is.null&quot; ## [67] &quot;log&quot; &quot;log10&quot; &quot;mday&quot; ## [70] &quot;minute&quot; &quot;month&quot; &quot;na_if&quot; ## [73] &quot;nchar&quot; &quot;now&quot; &quot;paste&quot; ## [76] &quot;paste0&quot; &quot;pmax&quot; &quot;pmin&quot; ## [79] &quot;qday&quot; &quot;round&quot; &quot;second&quot; ## [82] &quot;sign&quot; &quot;sin&quot; &quot;sinh&quot; ## [85] &quot;sql&quot; &quot;sqrt&quot; &quot;str_c&quot; ## [88] &quot;str_conv&quot; &quot;str_count&quot; &quot;str_detect&quot; ## [91] &quot;str_dup&quot; &quot;str_extract&quot; &quot;str_extract_all&quot; ## [94] &quot;str_flatten&quot; &quot;str_glue&quot; &quot;str_glue_data&quot; ## [97] &quot;str_interp&quot; &quot;str_length&quot; &quot;str_locate&quot; ## [100] &quot;str_locate_all&quot; &quot;str_match&quot; &quot;str_match_all&quot; ## [103] &quot;str_order&quot; &quot;str_pad&quot; &quot;str_remove&quot; ## [106] &quot;str_remove_all&quot; &quot;str_replace&quot; &quot;str_replace_all&quot; ## [109] &quot;str_replace_na&quot; &quot;str_sort&quot; &quot;str_split&quot; ## [112] &quot;str_split_fixed&quot; &quot;str_squish&quot; &quot;str_sub&quot; ## [115] &quot;str_subset&quot; &quot;str_to_lower&quot; &quot;str_to_title&quot; ## [118] &quot;str_to_upper&quot; &quot;str_trim&quot; &quot;str_trunc&quot; ## [121] &quot;str_view&quot; &quot;str_view_all&quot; &quot;str_which&quot; ## [124] &quot;str_wrap&quot; &quot;substr&quot; &quot;switch&quot; ## [127] &quot;tan&quot; &quot;tanh&quot; &quot;today&quot; ## [130] &quot;tolower&quot; &quot;toupper&quot; &quot;trimws&quot; ## [133] &quot;wday&quot; &quot;xor&quot; &quot;yday&quot; ## [136] &quot;year&quot; &quot;cume_dist&quot; &quot;cummax&quot; ## [139] &quot;cummean&quot; &quot;cummin&quot; &quot;cumsum&quot; ## [142] &quot;dense_rank&quot; &quot;first&quot; &quot;lag&quot; ## [145] &quot;last&quot; &quot;lead&quot; &quot;max&quot; ## [148] &quot;mean&quot; &quot;median&quot; &quot;min&quot; ## [151] &quot;min_rank&quot; &quot;n&quot; &quot;n_distinct&quot; ## [154] &quot;nth&quot; &quot;ntile&quot; &quot;order_by&quot; ## [157] &quot;percent_rank&quot; &quot;quantile&quot; &quot;rank&quot; ## [160] &quot;row_number&quot; &quot;sum&quot; &quot;var&quot; ## [163] &quot;cume_dist&quot; &quot;cummax&quot; &quot;cummean&quot; ## [166] &quot;cummin&quot; &quot;cumsum&quot; &quot;dense_rank&quot; ## [169] &quot;first&quot; &quot;lag&quot; &quot;last&quot; ## [172] &quot;lead&quot; &quot;max&quot; &quot;mean&quot; ## [175] &quot;median&quot; &quot;min&quot; &quot;min_rank&quot; ## [178] &quot;n&quot; &quot;n_distinct&quot; &quot;nth&quot; ## [181] &quot;ntile&quot; &quot;order_by&quot; &quot;percent_rank&quot; ## [184] &quot;quantile&quot; &quot;rank&quot; &quot;row_number&quot; ## [187] &quot;sum&quot; &quot;var&quot; sql_translate_env(simulate_dbi()) ## &lt;sql_variant&gt; ## scalar: -, :, !, !=, (, [, [[, {, *, /, &amp;, &amp;&amp;, %%, %&gt;%, %in%, ## scalar: ^, +, &lt;, &lt;=, ==, &gt;, &gt;=, |, ||, $, abs, acos, as_date, ## scalar: as_datetime, as.character, as.Date, as.double, ## scalar: as.integer, as.integer64, as.logical, as.numeric, ## scalar: as.POSIXct, asin, atan, atan2, between, bitwAnd, ## scalar: bitwNot, bitwOr, bitwShiftL, bitwShiftR, bitwXor, c, ## scalar: case_when, ceil, ceiling, coalesce, cos, cosh, cot, ## scalar: coth, day, desc, exp, floor, hour, if, if_else, ifelse, ## scalar: is.na, is.null, log, log10, mday, minute, month, na_if, ## scalar: nchar, now, paste, paste0, pmax, pmin, qday, round, ## scalar: second, sign, sin, sinh, sql, sqrt, str_c, str_conv, ## scalar: str_count, str_detect, str_dup, str_extract, ## scalar: str_extract_all, str_flatten, str_glue, str_glue_data, ## scalar: str_interp, str_length, str_locate, str_locate_all, ## scalar: str_match, str_match_all, str_order, str_pad, ## scalar: str_remove, str_remove_all, str_replace, ## scalar: str_replace_all, str_replace_na, str_sort, str_split, ## scalar: str_split_fixed, str_squish, str_sub, str_subset, ## scalar: str_to_lower, str_to_title, str_to_upper, str_trim, ## scalar: str_trunc, str_view, str_view_all, str_which, str_wrap, ## scalar: substr, switch, tan, tanh, today, tolower, toupper, ## scalar: trimws, wday, xor, yday, year ## aggregate: cume_dist, cummax, cummean, cummin, cumsum, dense_rank, ## aggregate: first, lag, last, lead, max, mean, median, min, ## aggregate: min_rank, n, n_distinct, nth, ntile, order_by, ## aggregate: percent_rank, quantile, rank, row_number, sum, var ## window: cume_dist, cummax, cummean, cummin, cumsum, dense_rank, ## window: first, lag, last, lead, max, mean, median, min, ## window: min_rank, n, n_distinct, nth, ntile, order_by, ## window: percent_rank, quantile, rank, row_number, sum, var source(here(&quot;book-src&quot;, &quot;dbplyr-sql-function-translation.R&quot;)) ## Warning: The `.drop` argument of `unnest()` is deprecated as of tidyr 1.0.0. ## All list-columns are now preserved. ## This warning is displayed once per session. ## Call `lifecycle::last_warnings()` to see where this warning was generated. Each of the following dbplyr back ends may have a slightly different translation: translations %&gt;% filter(!is.na(sql)) %&gt;% count(variant) ## # A tibble: 11 x 2 ## variant n ## &lt;chr&gt; &lt;int&gt; ## 1 access 193 ## 2 dbi 183 ## 3 hive 187 ## 4 impala 190 ## 5 mssql 196 ## 6 mysql 194 ## 7 odbc 186 ## 8 oracle 184 ## 9 postgres 204 ## 10 sqlite 183 ## 11 teradata 196 Only one postgres translation produces an output: psql &lt;- translations %&gt;% filter(!is.na(sql), variant == &quot;postgres&quot;) %&gt;% select(r, n_args, sql) %&gt;% arrange(r) # sp_print_df(head(psql, n = 40)) sp_print_df(psql) "],
["chapter-appendix-additional-resources.html", "I Appendix Additional resources I.1 Editing this book I.2 Docker alternatives I.3 Docker and R I.4 Documentation for Docker and PostgreSQL I.5 SQL and dplyr I.6 More Resources", " I Appendix Additional resources I.1 Editing this book Here are instructions for editing this book I.2 Docker alternatives Choosing between Docker and Vagrant (Zait 2017) I.3 Docker and R Noam Ross’ talk on Docker for the UseR (Ross 2018b) and his Slides (Ross 2018a) give a lot of context and tips. Good Docker tutorials An introductory Docker tutorial (Srivastav 2018) A Docker curriculum (Hall 2018) Scott Came’s materials about Docker and R on his website (Came 2018) and at the 2018 UseR Conference focus on R inside Docker. It’s worth studying the ROpensci Docker tutorial (ROpenSciLabs 2018) I.4 Documentation for Docker and PostgreSQL The Postgres image documentation (Docker 2018d) PostgreSQL &amp; Docker documentation (Docker 2018d) Dockerize PostgreSQL (Docker 2018b) Usage examples of PostgreSQL with Docker WARNING-EXPIRED CERTIFICATE 2018-12-20 I.5 SQL and dplyr Why SQL is not for analysis but dplyr is (Nishida 2016) Data Manipulation with dplyr (With 50 Examples) (ListenData.com 2016) I.6 More Resources David Severski describes some key elements of connecting to databases with R for MacOS users (Severski 2018) This tutorial picks up ideas and tips from Ed Borasky’s Data Science pet containers (Borasky 2018), which creates a framework based on that Hack Oregon example and explains why this repo is named pet-sql. References "],
["references.html", "References", " References "]
]
