[
["chapter-leveraging-datbase-views.html", "Chapter 12 Leveraging Database Views 12.1 Setup our standard working environment 12.2 Define a database view 12.3 Existing views as a resource 12.4 Writing your own or modifying a view", " Chapter 12 Leveraging Database Views This chapter demonstrates how to: Investigate a database from a business perspective Dig into a single Adventureworks table containing sales data 12.1 Setup our standard working environment Use these libraries: library(tidyverse) library(DBI) library(RPostgres) library(glue) require(knitr) library(dbplyr) library(sqlpetr) library(bookdown) library(here) library(lubridate) library(skimr) library(scales) # ggplot xy scales theme_set(theme_light()) Connect to adventureworks: sp_docker_start(&quot;adventureworks&quot;) Sys.sleep(sleep_default) con &lt;- sp_get_postgres_connection( host = &quot;localhost&quot;, port = 5432, user = &quot;postgres&quot;, password = &quot;postgres&quot;, dbname = &quot;adventureworks&quot;, seconds_to_test = sleep_default, connection_tab = TRUE ) 12.2 Define a database view A view is query that is stored in the database Can be used to read or write to the database in a standardized and well-understood way 12.2.1 Why views are useful Reasons for views: Performance: aggregation calculations done on the server. Conceptual abstraction/simplification, e.g. looking at monthly subtotals, rather than having to do the aggregation in each of your * queries. Reuse: putting commonly used code in one place. If you find any problems, it only needs to be fixed in one place. Simplifies downstream code, so easier to read and maintain. Standardizes data provenance 12.3 Existing views as a resource Authoritative They are boring, but very important 12.3.1 How to unpack and inspect a view Using a view to retireve data from the database will be completely standard across all flavors of SQL. v_salesperson_sales_by_fiscal_years_data &lt;- tbl(con, in_schema(&quot;sales&quot;,&quot;vsalespersonsalesbyfiscalyearsdata&quot;)) %&gt;% collect() str(v_salesperson_sales_by_fiscal_years_data) ## Classes &#39;tbl_df&#39;, &#39;tbl&#39; and &#39;data.frame&#39;: 48 obs. of 6 variables: ## $ salespersonid : int 275 275 275 275 276 276 276 276 277 277 ... ## $ fullname : chr &quot;Michael G Blythe&quot; &quot;Michael G Blythe&quot; &quot;Michael G Blythe&quot; &quot;Michael G Blythe&quot; ... ## $ jobtitle : chr &quot;Sales Representative&quot; &quot;Sales Representative&quot; &quot;Sales Representative&quot; &quot;Sales Representative&quot; ... ## $ salesterritory: chr &quot;Northeast&quot; &quot;Northeast&quot; &quot;Northeast&quot; &quot;Northeast&quot; ... ## $ salestotal : num 63763 2399593 3765459 3065088 5476 ... ## $ fiscalyear : num 2011 2012 2013 2014 2011 ... skim(v_salesperson_sales_by_fiscal_years_data) ## Skim summary statistics ## n obs: 48 ## n variables: 6 ## ## ── Variable type:character ────────────────────────────────── ## variable missing complete n min max empty n_unique ## fullname 0 48 48 9 26 0 14 ## jobtitle 0 48 48 20 20 0 1 ## salesterritory 0 48 48 6 14 0 10 ## ## ── Variable type:integer ──────────────────────────────────── ## variable missing complete n mean sd p0 p25 p50 p75 ## salespersonid 0 48 48 281.19 4.57 275 277.75 280.5 283.25 ## p100 hist ## 290 ▇▇▇▇▆▂▂▆ ## ## ── Variable type:numeric ──────────────────────────────────── ## variable missing complete n mean sd p0 p25 ## fiscalyear 0 48 48 2012.69 1.09 2011 2012 ## salestotal 0 48 48 1635214.51 1243833.87 5475.95 533827.7 ## p50 p75 p100 hist ## 2013 2014 2014 ▅▁▆▁▁▇▁▇ ## 1371169.72 2409498.88 4188307 ▇▂▇▂▅▂▂▂ v_salesperson_sales_by_fiscal_years_data %&gt;% filter(salespersonid == 275) ## # A tibble: 4 x 6 ## salespersonid fullname jobtitle salesterritory salestotal fiscalyear ## &lt;int&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 275 Michael G… Sales Repr… Northeast 63763. 2011 ## 2 275 Michael G… Sales Repr… Northeast 2399593. 2012 ## 3 275 Michael G… Sales Repr… Northeast 3765459. 2013 ## 4 275 Michael G… Sales Repr… Northeast 3065088. 2014 Local idioms for looking at a view itself will vary. Here is the code that will work for PostgreSQL: view_definition &lt;- dbGetQuery(con, &quot;select pg_get_viewdef(&#39;sales.vsalespersonsalesbyfiscalyearsdata&#39;, true)&quot;) str(view_definition) ## &#39;data.frame&#39;: 1 obs. of 1 variable: ## $ pg_get_viewdef: chr &quot; SELECT granular.salespersonid,\\n granular.fullname,\\n granular.jobtitle,\\n granular.salesterritory,\\n&quot;| __truncated__ cat(str_replace_all(view_definition$pg_get_viewdef, &quot;\\\\\\\\\\\\\\\\n&quot;, &quot;\\\\\\\\n&quot;)) ## SELECT granular.salespersonid, ## granular.fullname, ## granular.jobtitle, ## granular.salesterritory, ## sum(granular.subtotal) AS salestotal, ## granular.fiscalyear ## FROM ( SELECT soh.salespersonid, ## ((p.firstname::text || &#39; &#39;::text) || COALESCE(p.middlename::text || &#39; &#39;::text, &#39;&#39;::text)) || p.lastname::text AS fullname, ## e.jobtitle, ## st.name AS salesterritory, ## soh.subtotal, ## date_part(&#39;year&#39;::text, soh.orderdate + &#39;6 mons&#39;::interval) AS fiscalyear ## FROM sales.salesperson sp ## JOIN sales.salesorderheader soh ON sp.businessentityid = soh.salespersonid ## JOIN sales.salesterritory st ON sp.territoryid = st.territoryid ## JOIN humanresources.employee e ON soh.salespersonid = e.businessentityid ## JOIN person.person p ON p.businessentityid = sp.businessentityid) granular ## GROUP BY granular.salespersonid, granular.fullname, granular.jobtitle, granular.salesterritory, granular.fiscalyear; Even if you don’t intend to become fluent in SQL, it’s useful to read as much of it as possible. 12.3.2 We recommend leverageing them 12.4 Writing your own or modifying a view What about by month? This could be motivation for creating a new view that does aggregation in the database, rather than in R. See SQL code for ‘vsalespersonsalesbyfiscalyearsdata’. Consider: Modifying that to include quantity of sales. Modifying that to include monthly totals, in addition to the yearly totals that it already has. Why are 3 of the sales people from ‘vsalesperson’ missing in ‘vsalespersonsalesbyfiscalyearsdata’? Amy Alberts Stephen Jiang Syed Abbas 12.4.1 First draft with dplyr Save and study the SQL t_salesperson_sales_by_fiscal_years_data %&gt;% rm(t_salesperson_sales_by_fiscal_years_data) ## Warning in rm(t_salesperson_sales_by_fiscal_years_data): object ## &#39;t_salesperson_sales_by_fiscal_years_data&#39; not found t_salesperson_sales_by_fiscal_years_data &lt;- tbl(con, in_schema(&quot;sales&quot;, &quot;salesperson&quot;)) %&gt;% select(-territoryid) %&gt;% left_join(tbl(con, in_schema(&quot;sales&quot;, &quot;salesorderheader&quot;)), by = c(&quot;businessentityid&quot; = &quot;salespersonid&quot;)) %&gt;% mutate(fiscalyear = year(orderdate)) %&gt;% # mutate(fiscalyear = substr(as.character(orderdate), 1,5)) %&gt;% left_join(tbl(con, in_schema(&quot;sales&quot;, &quot;salesterritory&quot;)), by = c(&quot;territoryid&quot; = &quot;territoryid&quot;)) %&gt;% rename(sales_territory = name) %&gt;% left_join(tbl(con, in_schema(&quot;humanresources&quot;, &quot;employee&quot;)), by = c(&quot;businessentityid&quot; = &quot;businessentityid&quot;)) %&gt;% left_join(tbl(con, in_schema(&quot;person&quot;, &quot;person&quot;)), by = c(&quot;businessentityid&quot; = &quot;businessentityid&quot;)) %&gt;% mutate(fullname = paste(firstname, middlename, lastname)) %&gt;% group_by(businessentityid, fullname, jobtitle, sales_territory, fiscalyear) %&gt;% summarize(subtotal = sum(subtotal) ) %&gt;% collect() %&gt;% ungroup() ## Warning: Missing values are always removed in SQL. ## Use `SUM(x, na.rm = TRUE)` to silence this warning ## This warning is displayed only once per session. t_salesperson_sales_by_fiscal_years_data ## # A tibble: 108 x 6 ## businessentityid fullname jobtitle sales_territory fiscalyear subtotal ## &lt;int&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 274 Stephen … North Am… Canada 2011 2040. ## 2 274 Stephen … North Am… Canada 2012 62250. ## 3 274 Stephen … North Am… Canada 2013 100556. ## 4 274 Stephen … North Am… Canada 2014 11803. ## 5 274 Stephen … North Am… Central 2014 35332. ## 6 274 Stephen … North Am… Northeast 2012 83216. ## 7 274 Stephen … North Am… Northwest 2011 20545. ## 8 274 Stephen … North Am… Northwest 2012 5810. ## 9 274 Stephen … North Am… Northwest 2013 204390. ## 10 274 Stephen … North Am… Northwest 2014 2321. ## # … with 98 more rows skim(t_salesperson_sales_by_fiscal_years_data) ## Skim summary statistics ## n obs: 108 ## n variables: 6 ## ## ── Variable type:character ────────────────────────────────── ## variable missing complete n min max empty n_unique ## fullname 0 108 108 9 26 0 17 ## jobtitle 0 108 108 20 28 0 4 ## sales_territory 0 108 108 6 14 0 10 ## ## ── Variable type:integer ──────────────────────────────────── ## variable missing complete n mean sd p0 p25 p50 p75 p100 ## businessentityid 0 108 108 279.36 4.79 274 275 278 282 290 ## hist ## ▇▃▂▃▂▁▂▁ ## ## ── Variable type:numeric ──────────────────────────────────── ## variable missing complete n mean sd p0 p25 ## fiscalyear 0 108 108 2012.62 1.07 2011 2012 ## subtotal 0 108 108 745256.52 820632.09 672.29 116279.93 ## p50 p75 p100 hist ## 2013 2014 2014 ▅▁▇▁▁▇▁▇ ## 541771.55 1008421.64 4106064.01 ▇▅▂▁▁▁▁▁ t_salesperson_sales_by_fiscal_years_data %&gt;% filter(businessentityid == 275) ## # A tibble: 11 x 6 ## businessentityid fullname jobtitle sales_territory fiscalyear subtotal ## &lt;int&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 275 Michael … Sales Re… Central 2011 132244. ## 2 275 Michael … Sales Re… Central 2012 593815. ## 3 275 Michael … Sales Re… Central 2013 1371919. ## 4 275 Michael … Sales Re… Central 2014 472698. ## 5 275 Michael … Sales Re… Northeast 2011 626626. ## 6 275 Michael … Sales Re… Northeast 2012 2302605. ## 7 275 Michael … Sales Re… Southeast 2011 116954. ## 8 275 Michael … Sales Re… Southeast 2012 171773. ## 9 275 Michael … Sales Re… Southwest 2012 307263. ## 10 275 Michael … Sales Re… Southwest 2013 2613456. ## 11 275 Michael … Sales Re… Southwest 2014 584549. Why 3 sales folks in vsalesperson don’t show up in 2014 vsalespersonsalesbyfiscalyearsdata Different environments / SQL dialects "]
]
