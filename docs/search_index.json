[
["chapter-exploring-a-single-table.html", "Chapter 8 Exploring a Single Table (asking Business Questions) 8.1 Setup our standard working environment 8.2 A word on naming 8.3 The overall AdventureWorks sales picture 8.4 Annual sales 8.5 Monthly Sales 8.6 The effect of online sales 8.7 Impact of order type on monthly sales 8.8 Detect and diagnose the day of the month problem 8.9 Correcting the order date for Sales Reps 8.10 Disconnect from the database and stop Docker", " Chapter 8 Exploring a Single Table (asking Business Questions) This chapter demonstrates how to: Investigate a database from a business perspective Show the multiple data anomalies found in a single Advenureworks table Dig into a single Adventureworks table containing sales data Investigate the data from a business value perspective The previous chapter has demonstrated some of the automated techniques for showing what’s in a table using specific R functions and packages. Now we demonstrate a step-by-step process of making sense of what’s in one table with more of a business perspective. We illustrate the kind of detective work that’s often involved as we investigate the meaning of the meaning in a table. We’ll investigate the salesorderheader table in the sales schema in this example with an eye on the AdventureWorks busieness’ sales. We show that there are quite a few interpretation issues even when we are examining just 3 out of the 25 columns in the salesorderheader table. For this kind of detective work we are seeking to undertand the following elements separately and as they interact with each other (and they all do): The data that’s stored in the database and how information is represented How the data is entered at a day-to-day level to represent business activities How the business itself is changing 8.1 Setup our standard working environment Use these libraries: library(tidyverse) library(DBI) library(RPostgres) library(glue) require(knitr) library(dbplyr) library(sqlpetr) library(bookdown) library(here) library(lubridate) library(gt) library(scales) # ggplot xy scales theme_set(theme_light()) Connect to adventureworks: sp_docker_start(&quot;adventureworks&quot;) Sys.sleep(sleep_default) con &lt;- sp_get_postgres_connection( host = &quot;localhost&quot;, port = 5432, user = &quot;postgres&quot;, password = &quot;postgres&quot;, dbname = &quot;adventureworks&quot;, seconds_to_test = sleep_default, connection_tab = TRUE ) 8.2 A word on naming You will find that many columns have the same name in an enterprise database. For example, in the adventureworks database, almost all tables have columns named rowguid and modifieddate and there are many other examples of names that are reused. The meaning of a columns depends on the table that contains it, so as you pull a column out of a table, naming its provenance is important. Naming columns carefully (whether retrieved from the database or calculated) will pay off, especially as our queries become more complex. Using soh to tag statistics that are derived from the salesorderheader table as we do in this book is one example of an intentional naming strategy: it reminds you of the original source of a column. You, future you, and your collaborators will appreciate the effort although different naming conventions are completely valid. And a naming convention when rigidly applied can yield some long and uggly names. In the following example soh appears in different positions in the column name but it is easy to guess at a glance that the data comes from the salesorderheader table. Naming derived tables is just as important as naming derived columns. 8.3 The overall AdventureWorks sales picture 8.4 Annual sales On an annual basis, are sales dollars trending up, down or flat? We begin with total revenue and number of orders at different levels of detail. annual_sales &lt;- tbl(con, in_schema(&quot;sales&quot;, &quot;salesorderheader&quot;)) %&gt;% mutate(year = substr(as.character(orderdate), 1, 4)) %&gt;% group_by(year) %&gt;% summarize( min_soh_orderdate = min(orderdate, na.rm = TRUE), max_soh_orderdate = max(orderdate, na.rm = TRUE), total_soh_dollars = round(sum(subtotal, na.rm = TRUE), 2), avg_total_soh_dollars = round(mean(subtotal, na.rm = TRUE), 2), soh_count = n() ) %&gt;% arrange(year) %&gt;% select( year, min_soh_orderdate, max_soh_orderdate, total_soh_dollars, avg_total_soh_dollars, soh_count ) %&gt;% show_query() %&gt;% collect() ## &lt;SQL&gt; ## SELECT &quot;year&quot;, &quot;min_soh_orderdate&quot;, &quot;max_soh_orderdate&quot;, &quot;total_soh_dollars&quot;, &quot;avg_total_soh_dollars&quot;, &quot;soh_count&quot; ## FROM (SELECT * ## FROM (SELECT &quot;year&quot;, MIN(&quot;orderdate&quot;) AS &quot;min_soh_orderdate&quot;, MAX(&quot;orderdate&quot;) AS &quot;max_soh_orderdate&quot;, ROUND((SUM(&quot;subtotal&quot;)) :: numeric, 2) AS &quot;total_soh_dollars&quot;, ROUND((AVG(&quot;subtotal&quot;)) :: numeric, 2) AS &quot;avg_total_soh_dollars&quot;, COUNT(*) AS &quot;soh_count&quot; ## FROM (SELECT &quot;salesorderid&quot;, &quot;revisionnumber&quot;, &quot;orderdate&quot;, &quot;duedate&quot;, &quot;shipdate&quot;, &quot;status&quot;, &quot;onlineorderflag&quot;, &quot;purchaseordernumber&quot;, &quot;accountnumber&quot;, &quot;customerid&quot;, &quot;salespersonid&quot;, &quot;territoryid&quot;, &quot;billtoaddressid&quot;, &quot;shiptoaddressid&quot;, &quot;shipmethodid&quot;, &quot;creditcardid&quot;, &quot;creditcardapprovalcode&quot;, &quot;currencyrateid&quot;, &quot;subtotal&quot;, &quot;taxamt&quot;, &quot;freight&quot;, &quot;totaldue&quot;, &quot;comment&quot;, &quot;rowguid&quot;, &quot;modifieddate&quot;, SUBSTR(CAST(&quot;orderdate&quot; AS TEXT), 1, 4) AS &quot;year&quot; ## FROM sales.salesorderheader) &quot;dbplyr_001&quot; ## GROUP BY &quot;year&quot;) &quot;dbplyr_002&quot; ## ORDER BY &quot;year&quot;) &quot;dbplyr_003&quot; annual_sales ## # A tibble: 4 x 6 ## year min_soh_orderdate max_soh_orderdate total_soh_dolla… ## &lt;chr&gt; &lt;dttm&gt; &lt;dttm&gt; &lt;dbl&gt; ## 1 2011 2011-05-31 00:00:00 2011-12-31 00:00:00 12641672. ## 2 2012 2012-01-01 00:00:00 2012-12-31 00:00:00 33524301. ## 3 2013 2013-01-01 00:00:00 2013-12-31 00:00:00 43622479. ## 4 2014 2014-01-01 00:00:00 2014-06-30 00:00:00 20057929. ## # … with 2 more variables: avg_total_soh_dollars &lt;dbl&gt;, soh_count &lt;int64&gt; Both 2011 and 2014 are shorter time spans than the other two years, making comparison across the years more difficult. We might normalize the totals based on the number of months in each year, but we first graph total dollars: 8.4.1 Total sales by year min_soh_dt &lt;- min(annual_sales$min_soh_orderdate) max_soh_dt &lt;- max(annual_sales$max_soh_orderdate) ggplot(data = annual_sales, aes(x = year, y = total_soh_dollars)) + geom_col() + scale_y_continuous(labels = scales::dollar_format()) + labs( title = &quot;Adventure Works Sales Dollars by Year&quot;, x = paste(&quot;Year - between &quot;, min_soh_dt, &quot; - &quot;, max_soh_dt), y = &quot;Sales $&quot; ) From 2011 through 2013, sales are trending up. Are sales dollars for 2014 really down, is it a shorter year (are sales seasonal)? To see if the sales dollars are seasonal, we will drill in and look at the monthly sales. But first, let’s look at the number of orders and whether there’s a pattern in the sales data. 8.4.2 Total order volume Look at number of orders per year: ggplot(data = annual_sales, aes(x = year, y = as.numeric(soh_count))) + geom_col() + labs( title = &quot;Number of orders per year&quot;, x = paste(&quot;Years between &quot;, min_soh_dt, &quot; - &quot;, max_soh_dt), y = &quot;Total Number of Orders&quot; ) That’s a huge jump in the number of orders between 2012 and 2013. Given the total annual dollars, we ask whether the size of a sale has changed. 8.4.3 Average dollars per sale ggplot(data = annual_sales, aes(x = year, y = avg_total_soh_dollars)) + geom_col() + scale_y_continuous(labels = scales::dollar_format()) + labs( title = &quot;Average Dollars per Sale&quot;, x = paste(&quot;Year - between &quot;, min_soh_dt, &quot; - &quot;, max_soh_dt), y = &quot;Average Sale Amount&quot; ) That’s a remarkable drop between average sale of more than $7,000 to less than $3,000. Some kind of remarkable change has taken place in this business. From 2012 to 2013 the average dollars per order dropped from more than $8,500 to nearly $3,000 while the total number of order shot up from less than 4,000 to more than 14,000. Why are the number of orders increasing, but the average dollar amount of a sale is dropping? We need to drill down to look at monthly sales, adapting the first query to group by month and year. 8.5 Monthly Sales Our next investigation drills down from annual sales dollars to monthly sales dollars. For that we download the orderdate, rather than a character variable for the year. R handles the coversion from the PostgreSQL date-time to an R date-time. We then convert it to a simple date with a lubridate function. monthly_sales &lt;- tbl(con, in_schema(&quot;sales&quot;, &quot;salesorderheader&quot;)) %&gt;% select(orderdate, subtotal) %&gt;% collect() %&gt;% # From here on we&#39;re in R mutate( orderdate = date(orderdate), orderdate = round_date(orderdate, &quot;month&quot;) ) %&gt;% group_by(orderdate) %&gt;% summarize( min_soh_orderdate = min(orderdate, na.rm = TRUE), max_soh_orderdate = max(orderdate, na.rm = TRUE), total_soh_dollars = round(sum(subtotal, na.rm = TRUE), 2), avg_total_soh_dollars = round(mean(subtotal, na.rm = TRUE), 2), soh_count = n() ) Plotting the monthly sales data: ggplot(data = monthly_sales, aes(x = orderdate, y = total_soh_dollars)) + geom_col() + scale_y_continuous(labels = dollar) + theme(plot.title = element_text(hjust = 0.5)) + # Center the title labs( title = paste(&quot;Sales by Month\\n&quot;, min_soh_dt, &quot; - &quot;, max_soh_dt), x = &quot;Month&quot;, y = &quot;Sales Dollars&quot; ) 8.5.1 Check lagged monthly data The total sales are trending up but suspiciously uneven. Looking at lags might confirm just how much month-to-month difference there is: monthly_sales_lagged &lt;- monthly_sales %&gt;% mutate(monthly_sales_change = (lag(total_soh_dollars, 1)) - total_soh_dollars) (sum_lags &lt;- summary(monthly_sales_lagged$monthly_sales_change)) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## -1667368.56 -1082792.47 52892.65 18287.07 816048.02 4399378.90 ## NA&#39;s ## 1 The trend is positive on average 18,287 but half of the months have swings great than 1,898,840! ggplot(monthly_sales_lagged, aes(x = orderdate, y = monthly_sales_change)) + scale_x_date(date_breaks = &quot;year&quot;, date_labels = &quot;%Y&quot;, date_minor_breaks = &quot;3 months&quot;) + geom_line() + scale_y_continuous(labels = scales::dollar_format()) + theme(plot.title = element_text(hjust = .5)) + # Center ggplot title labs( title = paste( &quot;Monthly Sales Change \\n&quot;, &quot;Between &quot;, min_soh_dt, &quot; and &quot;, max_soh_dt ), x = &quot;Month&quot;, y = &quot;Dollar Change&quot; ) ## Warning: Removed 1 rows containing missing values (geom_path). AventureWorks sales are very uneven. 8.5.2 Comparing dollars and orders to a base year To look at dollars and the number of orders together, we compare the monthly data to the yearly average for 2011. start_year &lt;- monthly_sales %&gt;% mutate(yr = year(orderdate)) %&gt;% group_by(yr) %&gt;% summarize( total_soh_dollars = sum(total_soh_dollars), soh_count = sum(soh_count), n_months = n(), avg_dollars = total_soh_dollars / n_months, avg_count = soh_count / n_months ) %&gt;% filter(yr == min(yr)) Use 2011 as a baseline: start_year ## # A tibble: 1 x 6 ## yr total_soh_dollars soh_count n_months avg_dollars avg_count ## &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 2011 12354206. 1513 7 1764887. 216. Re express monthly data in terms of the baseline and plot: monthly_sales_base_year_normalized_to_2011 &lt;- monthly_sales %&gt;% mutate( dollars = (100 * total_soh_dollars) / start_year$avg_dollars, number_of_orders = (100 * soh_count) / start_year$avg_count ) %&gt;% ungroup() monthly_sales_base_year_normalized_to_2011 &lt;- monthly_sales_base_year_normalized_to_2011 %&gt;% select(orderdate, dollars, number_of_orders) %&gt;% pivot_longer(-orderdate, names_to = &quot;relative_to_2011_average&quot;, values_to = &quot;amount&quot; ) monthly_sales_base_year_normalized_to_2011 %&gt;% ggplot(aes(orderdate, amount, color = relative_to_2011_average)) + geom_line() + geom_hline(yintercept = 100) + scale_x_date(date_labels = &quot;%Y-%m&quot;, date_breaks = &quot;6 months&quot;) + labs( title = paste( &quot;Adventureworks Normalized Monthly Sales\\n&quot;, &quot;Number of Sales Orders and Dollar Totals\\n&quot;, min_soh_dt, &quot; to &quot;, max_soh_dt ), x = &quot;Date&quot;, y = &quot;&quot;, color = &quot;% change from\\n 2011 average&quot; ) 8.6 The effect of online sales We have suspected that the business has changed a lot with the advent of online orders so we check the impact of onlineorderflag on annual sales. The onlineorderflag indicates which sales channel accounted for the sale, Sales Reps or Online. 8.6.1 Add onlineorderflag to our annual sales query annual_sales_w_channel &lt;- tbl(con, in_schema(&quot;sales&quot;, &quot;salesorderheader&quot;)) %&gt;% select(orderdate, subtotal, onlineorderflag) %&gt;% collect() %&gt;% mutate( orderdate = date(orderdate), orderdate = round_date(orderdate, &quot;year&quot;), onlineorderflag = if_else(onlineorderflag == FALSE, &quot;Sales Rep&quot;, &quot;Online&quot; ), onlineorderflag = as.factor(onlineorderflag) ) %&gt;% group_by(orderdate, onlineorderflag) %&gt;% summarize( min_soh_orderdate = min(orderdate, na.rm = TRUE), max_soh_orderdate = max(orderdate, na.rm = TRUE), total_soh_dollars = round(sum(subtotal, na.rm = TRUE), 2), avg_total_soh_dollars = round(mean(subtotal, na.rm = TRUE), 2), soh_count = n() ) %&gt;% select( orderdate, onlineorderflag, min_soh_orderdate, max_soh_orderdate, total_soh_dollars, avg_total_soh_dollars, soh_count ) 8.6.2 Annual Sales comparison Start by looking at total sales. ggplot(data = annual_sales_w_channel, aes(x = orderdate, y = total_soh_dollars)) + geom_col() + scale_y_continuous(labels = scales::dollar_format()) + facet_wrap(&quot;onlineorderflag&quot;) + labs( title = &quot;Adventure Works Sales Dollars by Year&quot;, caption = paste(&quot;Between&quot;, min_soh_dt, &quot; an &quot;, max_soh_dt), subtitle = &quot;Comparing Online and Sales Rep sales channels&quot;, x = &quot;Year&quot;, y = &quot;Sales $&quot; ) Indeed the total sales are quite different as are the number of orders and the average order size! 8.6.3 Order volume comparison Look at number of orders per year: ggplot(data = annual_sales_w_channel, aes(x = orderdate, y = as.numeric(soh_count))) + geom_col() + facet_wrap(&quot;onlineorderflag&quot;) + labs( title = &quot;Adventure Works Number of orders per Year&quot;, caption = paste(&quot;Between&quot;, min_soh_dt, &quot; an &quot;, max_soh_dt), subtitle = &quot;Comparing Online and Sales Rep sales channels&quot;, x = &quot;Year&quot;, y = &quot;Total number of orders&quot; ) 8.6.4 Comparing Sales Rep sales to Online Orders ggplot(data = annual_sales_w_channel, aes(x = orderdate, y = avg_total_soh_dollars)) + geom_col() + facet_wrap(&quot;onlineorderflag&quot;) + scale_y_continuous(labels = scales::dollar_format()) + labs( title = &quot;Average Dollars per Sale&quot;, x = paste(&quot;Year, between&quot;, min_soh_dt, &quot; and &quot;, max_soh_dt), y = &quot;Average sale amount&quot; ) 8.7 Impact of order type on monthly sales Digging into the difference between Sales Rep and Online sales. 8.7.1 Retrieve monthly sales with the onlineorderflag This query puts the collect statement earlier than the previous queries. monthly_sales_w_channel &lt;- tbl(con, in_schema(&quot;sales&quot;, &quot;salesorderheader&quot;)) %&gt;% select(orderdate, subtotal, onlineorderflag) %&gt;% collect() %&gt;% # From here on we&#39;re in R mutate( orderdate = date(orderdate), orderdate_rounded = round_date(orderdate, &quot;month&quot;), onlineorderflag = if_else(onlineorderflag == FALSE, &quot;Sales Rep&quot;, &quot;Online&quot; ), ) %&gt;% # group_by(orderdate, onlineorderflag) %&gt;% summarize( min_soh_orderdate = min(orderdate, na.rm = TRUE), max_soh_orderdate = max(orderdate, na.rm = TRUE), total_soh_dollars = round(sum(subtotal, na.rm = TRUE), 2), avg_total_soh_dollars = round(mean(subtotal, na.rm = TRUE), 2), soh_count = n() ) %&gt;% ungroup() monthly_sales_w_channel %&gt;% rename(`Sales Channel` = onlineorderflag) %&gt;% group_by(`Sales Channel`) %&gt;% summarise( unique_dates = n(), start_date = min(min_soh_orderdate), end_date = max(max_soh_orderdate), total_sales = sum(total_soh_dollars) ) %&gt;% gt() html { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', 'Fira Sans', 'Droid Sans', Arial, sans-serif; } #pzveloiefp .gt_table { display: table; border-collapse: collapse; margin-left: auto; margin-right: auto; color: #000000; font-size: 16px; background-color: #FFFFFF; /* table.background.color */ width: auto; /* table.width */ border-top-style: solid; /* table.border.top.style */ border-top-width: 2px; /* table.border.top.width */ border-top-color: #A8A8A8; /* table.border.top.color */ border-bottom-style: solid; /* table.border.bottom.style */ border-bottom-width: 2px; /* table.border.bottom.width */ border-bottom-color: #A8A8A8; /* table.border.bottom.color */ } #pzveloiefp .gt_heading { background-color: #FFFFFF; /* heading.background.color */ border-bottom-color: #FFFFFF; } #pzveloiefp .gt_title { color: #000000; font-size: 125%; /* heading.title.font.size */ padding-top: 4px; /* heading.top.padding */ padding-bottom: 4px; border-bottom-color: #FFFFFF; border-bottom-width: 0; } #pzveloiefp .gt_subtitle { color: #000000; font-size: 85%; /* heading.subtitle.font.size */ padding-top: 2px; padding-bottom: 2px; /* heading.bottom.padding */ border-top-color: #FFFFFF; border-top-width: 0; } #pzveloiefp .gt_bottom_border { border-bottom-style: solid; /* heading.border.bottom.style */ border-bottom-width: 2px; /* heading.border.bottom.width */ border-bottom-color: #A8A8A8; /* heading.border.bottom.color */ } #pzveloiefp .gt_column_spanner { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #A8A8A8; padding-top: 4px; padding-bottom: 4px; } #pzveloiefp .gt_col_heading { color: #000000; background-color: #FFFFFF; /* column_labels.background.color */ font-size: 16px; /* column_labels.font.size */ font-weight: initial; /* column_labels.font.weight */ vertical-align: middle; padding: 10px; margin: 10px; overflow-x: hidden; } #pzveloiefp .gt_columns_top_border { border-top-style: solid; border-top-width: 2px; border-top-color: #A8A8A8; } #pzveloiefp .gt_columns_bottom_border { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #A8A8A8; } #pzveloiefp .gt_sep_right { border-right: 5px solid #FFFFFF; } #pzveloiefp .gt_group_heading { padding: 8px; color: #000000; background-color: #FFFFFF; /* row_group.background.color */ font-size: 16px; /* row_group.font.size */ font-weight: initial; /* row_group.font.weight */ border-top-style: solid; /* row_group.border.top.style */ border-top-width: 2px; /* row_group.border.top.width */ border-top-color: #A8A8A8; /* row_group.border.top.color */ border-bottom-style: solid; /* row_group.border.bottom.style */ border-bottom-width: 2px; /* row_group.border.bottom.width */ border-bottom-color: #A8A8A8; /* row_group.border.bottom.color */ vertical-align: middle; } #pzveloiefp .gt_empty_group_heading { padding: 0.5px; color: #000000; background-color: #FFFFFF; /* row_group.background.color */ font-size: 16px; /* row_group.font.size */ font-weight: initial; /* row_group.font.weight */ border-top-style: solid; /* row_group.border.top.style */ border-top-width: 2px; /* row_group.border.top.width */ border-top-color: #A8A8A8; /* row_group.border.top.color */ border-bottom-style: solid; /* row_group.border.bottom.style */ border-bottom-width: 2px; /* row_group.border.bottom.width */ border-bottom-color: #A8A8A8; /* row_group.border.bottom.color */ vertical-align: middle; } #pzveloiefp .gt_striped { background-color: #f2f2f2; } #pzveloiefp .gt_from_md > :first-child { margin-top: 0; } #pzveloiefp .gt_from_md > :last-child { margin-bottom: 0; } #pzveloiefp .gt_row { padding: 8px; /* row.padding */ margin: 10px; vertical-align: middle; overflow-x: hidden; } #pzveloiefp .gt_stub { border-right-style: solid; border-right-width: 2px; border-right-color: #A8A8A8; padding-left: 12px; } #pzveloiefp .gt_summary_row { color: #000000; background-color: #FFFFFF; /* summary_row.background.color */ padding: 8px; /* summary_row.padding */ text-transform: inherit; /* summary_row.text_transform */ } #pzveloiefp .gt_grand_summary_row { color: #000000; background-color: #FFFFFF; /* grand_summary_row.background.color */ padding: 8px; /* grand_summary_row.padding */ text-transform: inherit; /* grand_summary_row.text_transform */ } #pzveloiefp .gt_first_summary_row { border-top-style: solid; border-top-width: 2px; border-top-color: #A8A8A8; } #pzveloiefp .gt_first_grand_summary_row { border-top-style: double; border-top-width: 6px; border-top-color: #A8A8A8; } #pzveloiefp .gt_table_body { border-top-style: solid; /* table_body.border.top.style */ border-top-width: 2px; /* table_body.border.top.width */ border-top-color: #A8A8A8; /* table_body.border.top.color */ border-bottom-style: solid; /* table_body.border.bottom.style */ border-bottom-width: 2px; /* table_body.border.bottom.width */ border-bottom-color: #A8A8A8; /* table_body.border.bottom.color */ } #pzveloiefp .gt_footnotes { border-top-style: solid; /* footnotes.border.top.style */ border-top-width: 2px; /* footnotes.border.top.width */ border-top-color: #A8A8A8; /* footnotes.border.top.color */ } #pzveloiefp .gt_footnote { font-size: 90%; /* footnote.font.size */ margin: 0px; padding: 4px; /* footnote.padding */ } #pzveloiefp .gt_sourcenotes { border-top-style: solid; /* sourcenotes.border.top.style */ border-top-width: 2px; /* sourcenotes.border.top.width */ border-top-color: #A8A8A8; /* sourcenotes.border.top.color */ } #pzveloiefp .gt_sourcenote { font-size: 90%; /* sourcenote.font.size */ padding: 4px; /* sourcenote.padding */ } #pzveloiefp .gt_center { text-align: center; } #pzveloiefp .gt_left { text-align: left; } #pzveloiefp .gt_right { text-align: right; font-variant-numeric: tabular-nums; } #pzveloiefp .gt_font_normal { font-weight: normal; } #pzveloiefp .gt_font_bold { font-weight: bold; } #pzveloiefp .gt_font_italic { font-style: italic; } #pzveloiefp .gt_super { font-size: 65%; } #pzveloiefp .gt_footnote_glyph { font-style: italic; font-size: 65%; } Sales Channel unique_dates start_date end_date total_sales Online 1124 2011-05-31 2014-06-30 29358677.46 Sales Rep 40 2011-05-31 2014-05-01 80487704.18 As we will see later on, the Sales Rep data doesn’t match the Online data. The Online data includes 2 months that are not included in the main sales channel. 8.7.2 Monthly variation compared to a trend line Jumping to the trend line comparison, we see that the variation # sp_print_df(monthly_sales_w_channel) ggplot( data = monthly_sales_w_channel, aes( x = orderdate, y = total_soh_dollars ) ) + geom_line() + geom_smooth(se = FALSE) + facet_wrap(&quot;onlineorderflag&quot;) + scale_y_continuous(labels = dollar) + scale_x_date(date_breaks = &quot;year&quot;, date_labels = &quot;%Y&quot;, date_minor_breaks = &quot;3 months&quot;) + theme(plot.title = element_text(hjust = .5)) + # Center ggplot title labs( title = paste( &quot;Sales by Month by Year\\n&quot;, &quot;With Number of Sales Orders\\nAnd Average SO $ Amount&quot; ), x = paste(&quot;Month - between &quot;, min_soh_dt, &quot; - &quot;, max_soh_dt), y = &quot;Sales Dollars&quot; ) ## `geom_smooth()` using method = &#39;gam&#39; and formula &#39;y ~ s(x, bs = &quot;cs&quot;)&#39; Figure 8.1: SO, SO Dollars, and Average SO Dollars-b The monthly variation is happening on the Sales Rep side. 8.7.3 Compare monthly lagged data by order type First consider month-to-month change. monthly_sales_w_channel_lagged_by_month &lt;- monthly_sales_w_channel %&gt;% group_by(onlineorderflag) %&gt;% mutate( pct_yearly_soh_dollar_change = total_soh_dollars / (lag(total_soh_dollars, 1)) * 100, pct_yearly_soh_count_change = soh_count / (lag(soh_count, 1)) * 100 ) ggplot(monthly_sales_w_channel_lagged_by_month, aes(x = orderdate, y = pct_yearly_soh_dollar_change)) + scale_x_date(date_breaks = &quot;year&quot;, date_labels = &quot;%Y&quot;, date_minor_breaks = &quot;3 months&quot;) + facet_wrap(&quot;onlineorderflag&quot;) + geom_line() + theme(plot.title = element_text(hjust = .5)) + # Center ggplot title labs( title = paste( &quot;Monthly Percent Sales Change \\n&quot;, &quot;Comparing Online to Sales Rep Sales&quot; ), x = paste(&quot;Month - between &quot;, min_soh_dt, &quot; - &quot;, max_soh_dt), y = &quot;% Dollar Change&quot; ) ## Warning: Removed 1 rows containing missing values (geom_path). For Sales Reps it looks like the variation is in the number of orders, not just dollars. ggplot(monthly_sales_w_channel_lagged_by_month, aes(x = orderdate, y = pct_yearly_soh_count_change)) + scale_x_date(date_breaks = &quot;year&quot;, date_labels = &quot;%Y&quot;, date_minor_breaks = &quot;3 months&quot;) + facet_wrap(&quot;onlineorderflag&quot;) + geom_line() + theme(plot.title = element_text(hjust = .5)) + # Center ggplot title labs( title = paste( &quot;Monthly Order Volume Change \\n&quot;, &quot;Comparing Online to Sales Rep Sales\\n&quot;, min_soh_dt, &quot; - &quot;, max_soh_dt ), x = &quot;Month&quot;, y = &quot;Change number of orders&quot; ) ## Warning: Removed 1 rows containing missing values (geom_path). Let’s examine whether there is a large year-to-year change. monthly_sales_w_channel_lagged_by_year &lt;- monthly_sales_w_channel %&gt;% group_by(onlineorderflag) %&gt;% mutate( pct_yearly_soh_dollar_change = total_soh_dollars / (lag(total_soh_dollars, 12)) * 100, pct_yearly_soh_count_change = soh_count / (lag(soh_count, 12)) * 100 ) ggplot(monthly_sales_w_channel_lagged_by_year, aes(x = orderdate, y = pct_yearly_soh_dollar_change)) + scale_x_date(date_breaks = &quot;year&quot;, date_labels = &quot;%Y&quot;, date_minor_breaks = &quot;3 months&quot;) + scale_y_continuous(limits = c(-10, 300)) + facet_wrap(&quot;onlineorderflag&quot;) + geom_line() + theme(plot.title = element_text(hjust = .5)) + # Center ggplot title labs( title = paste( &quot;Year-on-Year Total Monthly Sales Change \\n&quot;, &quot;Comparing Online to Sales Rep Sales\\n&quot;, min_soh_dt, &quot; - &quot;, max_soh_dt ), x = paste(&quot;Month - between &quot;, min_soh_dt, &quot; - &quot;, max_soh_dt), y = &quot;% Dollar Change&quot; ) ## Warning: Removed 12 rows containing missing values (geom_path). That’s much smaller than the month-to-month change. Comparing the number of sales orders year over year by month for 2013 and 2012, one can see that the 2013 sales are between 1.2 and 1.8 times larger than the corresponding month of 2012 from January through June. In July the 2013 sales are 5 to 6 times the 2012 sales orders. This trend continues into 2014 before the number of sales plummet to just 1.3 time in June. We suspect that the business has changed a lot with the adventn of online orders. 8.8 Detect and diagnose the day of the month problem Looking at the raw data leads us to suspct that there is a problem with the dates on which Sales Rep orders are entered. 8.8.1 Sales Rep Orderdate Distribution Look at the dates when sales are entered for sales by Sales Reps. The following query merits some discussion. sales_rep_day_of_month_sales &lt;- tbl(con, in_schema(&quot;sales&quot;, &quot;salesorderheader&quot;)) %&gt;% filter(onlineorderflag == FALSE) %&gt;% # Drop online orders select(orderdate, subtotal) %&gt;% mutate( year = year(orderdate), month = month(orderdate), day = day(orderdate) ) %&gt;% count(year, month, day, name = &quot;orders&quot;) %&gt;% group_by(year, month) %&gt;% summarize( days_with_orders = n(), total_orders = sum(orders, na.rm = TRUE), min_day = min(day, na.rm = FALSE) ) %&gt;% show_query() %&gt;% collect() %&gt;% mutate( days_with_orders = as.numeric(days_with_orders), order_month = as.Date(paste0(year, &quot;-&quot;, month, &quot;-01&quot;)), min_day_factor = if_else(min_day &lt; 2, &quot;Month start&quot;, &quot;Month end&quot;) ) %&gt;% complete(order_month = seq(min(order_month), max(order_month), by = &quot;month&quot;)) %&gt;% mutate(days_with_orders = replace_na(days_with_orders, 0)) %&gt;% ungroup() ## &lt;SQL&gt; ## Warning: Missing values are always removed in SQL. ## Use `MIN(x, na.rm = TRUE)` to silence this warning ## This warning is displayed only once per session. ## SELECT &quot;year&quot;, &quot;month&quot;, COUNT(*) AS &quot;days_with_orders&quot;, SUM(&quot;orders&quot;) AS &quot;total_orders&quot;, MIN(&quot;day&quot;) AS &quot;min_day&quot; ## FROM (SELECT &quot;year&quot;, &quot;month&quot;, &quot;day&quot;, COUNT(*) AS &quot;orders&quot; ## FROM (SELECT &quot;orderdate&quot;, &quot;subtotal&quot;, EXTRACT(year FROM &quot;orderdate&quot;) AS &quot;year&quot;, EXTRACT(MONTH FROM &quot;orderdate&quot;) AS &quot;month&quot;, EXTRACT(day FROM &quot;orderdate&quot;) AS &quot;day&quot; ## FROM (SELECT * ## FROM sales.salesorderheader ## WHERE (&quot;onlineorderflag&quot; = FALSE)) &quot;dbplyr_007&quot;) &quot;dbplyr_008&quot; ## GROUP BY &quot;year&quot;, &quot;month&quot;, &quot;day&quot;) &quot;dbplyr_009&quot; ## GROUP BY &quot;year&quot;, &quot;month&quot; sales_rep_day_of_month_sales %&gt;% ggplot(aes(order_month, days_with_orders, fill = min_day_factor)) + geom_col() + coord_flip() + labs( title = &quot;How many days had Sales Rep orders posted&quot;, subtitle = &quot;At the beginning or end of the month?&quot;, fill = &quot;Day Sales were posted&quot;, y = &quot;Number of days with transactions&quot;, x = &quot;Date&quot; ) Suspicious months are those where sales were recorded on more than one day or there were no sales recorded in the month at all. suspicious_months &lt;- sales_rep_day_of_month_sales %&gt;% filter(days_with_orders == 0 | days_with_orders &gt; 1) %&gt;% arrange(order_month) %&gt;% select(order_month) %&gt;% unique() Here are the 8 suspicious months: suspicious_months ## # A tibble: 8 x 1 ## order_month ## &lt;date&gt; ## 1 2011-06-01 ## 2 2011-08-01 ## 3 2011-09-01 ## 4 2011-10-01 ## 5 2011-11-01 ## 6 2012-01-01 ## 7 2014-01-01 ## 8 2014-03-01 months_to_inspect &lt;- tibble(target_month = suspicious_months) %&gt;% mutate( current_month = target_month$order_month, next_month = current_month %m+% months(1), last_month = current_month %m-% months(1) ) %&gt;% select(current_month, next_month, last_month) %&gt;% pivot_longer(cols = tidyselect::peek_vars()) %&gt;% select(value) %&gt;% distinct() We have 15 months when we add the month before and the month afterwards – and eliminate duplicates. monthly_sales_w_channel_to_inspect &lt;- monthly_sales_w_channel %&gt;% filter(onlineorderflag == &quot;Sales Rep&quot;) %&gt;% mutate(order_month = round_date(orderdate, &quot;month&quot;)) %&gt;% right_join(months_to_inspect, by = c(&quot;order_month&quot; = &quot;value&quot;)) %&gt;% select(-onlineorderflag, -min_soh_orderdate, -max_soh_orderdate) %&gt;% arrange(desc(orderdate)) monthly_sales_w_channel_to_inspect ## # A tibble: 18 x 5 ## orderdate total_soh_dollars avg_total_soh_dollars soh_count order_month ## &lt;date&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;date&gt; ## 1 2014-03-31 3314519. 18621. 178 2014-04-01 ## 2 2014-03-30 7291. 3646. 2 2014-04-01 ## 3 2014-03-01 2204542. 24226. 91 2014-03-01 ## 4 2014-02-28 3231. 1077. 3 2014-03-01 ## 5 2014-01-29 2737188. 15822. 173 2014-02-01 ## 6 2014-01-28 1565. 782. 2 2014-02-01 ## 7 2013-12-31 2703811. 15450. 175 2014-01-01 ## 8 2013-11-30 1668952. 17385. 96 2013-12-01 ## 9 2012-01-29 1455280. 22739. 64 2012-02-01 ## 10 2012-01-01 1900789. 24061. 79 2012-01-01 ## 11 2011-12-01 713117. 17828. 40 2011-12-01 ## 12 2011-10-31 1702945. 27031. 63 2011-11-01 ## 13 2011-10-01 2324136. 25824. 90 2011-10-01 ## 14 2011-08-31 844721 21118. 40 2011-09-01 ## 15 2011-08-01 1165897. 19432. 60 2011-08-01 ## 16 2011-07-01 1538408. 20512. 75 2011-07-01 ## 17 2011-05-31 489329. 12877. 38 2011-06-01 ## 18 NA NA NA NA 2011-05-01 That is unexpected. A couple of things immediately jump out from the first page of data: July, September, and November are missing for 2011. Most of the sales reps’ orders are entered on a single day of the month, unique days = 1. It is possible that these are monthly recurring orders that get released on a given day of the month. If that is the case, what are the sales reps doing the rest of the month? The lines with multiple days, unique_days &gt; 1, have a noticeable higher number of orders, so_cnt, and associated so dollars. The plot clearly shows that two months with multiple sales rep order days for 2011, (1108 and 1110), one for 2012, (1201), and two in 2014, (1401 and 1403). The 1403 is the only three day sales rep order month. In the next code block, we flesh out the dates associatd with the sales reps’ orders. Since 4 out of the 5 months with multiple order days only have two dates, the code block captures them with a min/max orderdate. 8.9 Correcting the order date for Sales Reps monthly_sales_rep_adjusted &lt;- tbl(con, in_schema(&quot;sales&quot;, &quot;salesorderheader&quot;)) %&gt;% select(orderdate, subtotal, onlineorderflag) %&gt;% mutate( orderdate = as.Date(orderdate), day = day(orderdate) ) %&gt;% show_query() %&gt;% collect() # From here on we&#39;re in R ## &lt;SQL&gt; ## SELECT &quot;orderdate&quot;, &quot;subtotal&quot;, &quot;onlineorderflag&quot;, EXTRACT(day FROM &quot;orderdate&quot;) AS &quot;day&quot; ## FROM (SELECT CAST(&quot;orderdate&quot; AS DATE) AS &quot;orderdate&quot;, &quot;subtotal&quot;, &quot;onlineorderflag&quot; ## FROM sales.salesorderheader) &quot;dbplyr_013&quot; monthly_sales_rep_adjusted %&gt;% filter(day == 1 &amp; onlineorderflag == FALSE) %&gt;% count(orderdate) %&gt;% as.data.frame() ## orderdate n ## 1 2011-07-01 75 ## 2 2011-08-01 60 ## 3 2011-10-01 90 ## 4 2011-12-01 40 ## 5 2012-01-01 79 ## 6 2014-03-01 91 ## 7 2014-05-01 179 dbGetQuery( con, &quot; with udays as ( SELECT to_char(orderdate,&#39;YYMM&#39;) yymm ,EXTRACT(YEAR FROM soh.orderdate) yr , EXTRACT(MONTH FROM soh.orderdate) mo , COUNT(DISTINCT soh.orderdate) *1.0 unique_days , COUNT(*) so_cnt , sum(subtotal) so_dollars FROM sales.salesorderheader soh where not onlineorderflag group by to_char(orderdate,&#39;YYMM&#39;) , EXTRACT(MONTH FROM orderdate) , EXTRACT(YEAR FROM orderdate) ORDER BY to_char(orderdate,&#39;YYMM&#39;) ) select soh.orderdate,count(*) from udays join sales.salesorderheader soh on to_char(soh.orderdate,&#39;YYMM&#39;) = udays.yymm where unique_days &gt; 1 and not onlineorderflag group by soh.orderdate having count(*) &gt; 1 order by orderdate &quot; ) ## orderdate count ## 1 2011-08-01 60 ## 2 2011-08-31 40 ## 3 2011-10-01 90 ## 4 2011-10-31 63 ## 5 2012-01-01 79 ## 6 2012-01-29 64 ## 7 2014-01-28 2 ## 8 2014-01-29 173 ## 9 2014-03-01 91 ## 10 2014-03-30 2 ## 11 2014-03-31 178 8.9.1 Define a date correction function in R monthly_sales_rep_adjusted &lt;- tbl(con, in_schema(&quot;sales&quot;, &quot;salesorderheader&quot;)) %&gt;% select(orderdate, subtotal, onlineorderflag) %&gt;% mutate( orderdate = as.Date(orderdate), day = day(orderdate) ) %&gt;% show_query() %&gt;% collect() %&gt;% # From here on we&#39;re in R # Writing the mutate statement in a generic form, so it applies only # to Sales Rep orders mutate( adjusted_orderdate = case_when( onlineorderflag == FALSE &amp; day == 1L ~ orderdate - 1, TRUE ~ orderdate ) ) %&gt;% filter(onlineorderflag == FALSE) %&gt;% group_by(adjusted_orderdate) %&gt;% summarize( total_soh_dollars = round(sum(subtotal, na.rm = TRUE), 2), avg_total_soh_dollars = round(mean(subtotal, na.rm = TRUE), 2), soh_count = n() ) %&gt;% ungroup() ## &lt;SQL&gt; ## SELECT &quot;orderdate&quot;, &quot;subtotal&quot;, &quot;onlineorderflag&quot;, EXTRACT(day FROM &quot;orderdate&quot;) AS &quot;day&quot; ## FROM (SELECT CAST(&quot;orderdate&quot; AS DATE) AS &quot;orderdate&quot;, &quot;subtotal&quot;, &quot;onlineorderflag&quot; ## FROM sales.salesorderheader) &quot;dbplyr_015&quot; 8.9.2 Define and store a Postgres function to correct the date dbExecute( con, &quot;CREATE OR REPLACE FUNCTION so_adj_date(so_date timestamp, ONLINE_ORDER boolean) RETURNS timestamp AS $$ BEGIN IF (ONLINE_ORDER) THEN RETURN (SELECT so_date); ELSE RETURN(SELECT CASE WHEN EXTRACT(DAY FROM so_date) = 1 THEN so_date - &#39;1 day&#39;::interval ELSE so_date END ); END IF; END; $$ LANGUAGE PLPGSQL; &quot; ) ## [1] 0 8.9.3 Use the Postgres function If you can do the heavy lifting on the database side, that’s good. R can do it, but it’s best for finding the issues. monthly_sales_rep_adjusted_with_psql_function &lt;- tbl(con, in_schema(&quot;sales&quot;, &quot;salesorderheader&quot;)) %&gt;% select(orderdate, subtotal, onlineorderflag) %&gt;% mutate( orderdate = as.Date(orderdate), day = day(orderdate) ) %&gt;% mutate(adjusted_orderdate = as.Date(so_adj_date(orderdate, onlineorderflag))) %&gt;% filter(onlineorderflag == FALSE) %&gt;% group_by(adjusted_orderdate) %&gt;% summarize( total_soh_dollars = round(sum(subtotal, na.rm = TRUE), 2), avg_total_soh_dollars = round(mean(subtotal, na.rm = TRUE), 2), soh_count = n() ) %&gt;% show_query() %&gt;% collect() %&gt;% ungroup() ## &lt;SQL&gt; ## SELECT &quot;adjusted_orderdate&quot;, ROUND((SUM(&quot;subtotal&quot;)) :: numeric, 2) AS &quot;total_soh_dollars&quot;, ROUND((AVG(&quot;subtotal&quot;)) :: numeric, 2) AS &quot;avg_total_soh_dollars&quot;, COUNT(*) AS &quot;soh_count&quot; ## FROM (SELECT &quot;orderdate&quot;, &quot;subtotal&quot;, &quot;onlineorderflag&quot;, &quot;day&quot;, CAST(so_adj_date(&quot;orderdate&quot;, &quot;onlineorderflag&quot;) AS DATE) AS &quot;adjusted_orderdate&quot; ## FROM (SELECT &quot;orderdate&quot;, &quot;subtotal&quot;, &quot;onlineorderflag&quot;, EXTRACT(day FROM &quot;orderdate&quot;) AS &quot;day&quot; ## FROM (SELECT CAST(&quot;orderdate&quot; AS DATE) AS &quot;orderdate&quot;, &quot;subtotal&quot;, &quot;onlineorderflag&quot; ## FROM sales.salesorderheader) &quot;dbplyr_017&quot;) &quot;dbplyr_018&quot;) &quot;dbplyr_019&quot; ## WHERE (&quot;onlineorderflag&quot; = FALSE) ## GROUP BY &quot;adjusted_orderdate&quot; There’s one minor difference between the two: all_equal(monthly_sales_rep_adjusted, monthly_sales_rep_adjusted_with_psql_function) ## [1] &quot;Incompatible type for column `soh_count`: x integer, y integer64&quot; monthly_sales_rep_adjusted %&gt;% mutate(day_of_month = day(adjusted_orderdate)) %&gt;% ggplot( aes(x = day_of_month, y = soh_count)) + geom_col() + scale_x_continuous(limits = c(1, 32)) + labs( title = paste( &quot;Transactions Entered by Day of Month \\n&quot;, &quot;Comparing Online to Sales Rep Sales\\n&quot;, min_soh_dt, &quot; - &quot;, max_soh_dt ), x = &quot;Day of the Month&quot;, y = &quot;Recorded Sales&quot; ) + theme(plot.title = element_text(hjust = .5)) # Center ggplot title 8.9.4 Monthly Sales by Order Type with corrected dates – relative to a trend line monthly_sales_rep_as_is &lt;- monthly_sales_w_channel %&gt;% filter(onlineorderflag == &quot;Sales Rep&quot;) ggplot( data = monthly_sales_rep_adjusted, aes(x = adjusted_orderdate, y = soh_count) ) + geom_line(alpha = .5) + geom_smooth(se = FALSE) + geom_smooth(data = monthly_sales_rep_as_is, aes( orderdate, soh_count ), color = &quot;red&quot;, alpha = .5, se = FALSE) + theme(plot.title = element_text(hjust = .5)) + # Center ggplot title labs( title = paste( &quot;Number of Sales per month using corrected dates\\n&quot;, &quot;Counting Sales Order Header records&quot; ), x = paste(&quot;Monthly - between &quot;, min_soh_dt, &quot; - &quot;, max_soh_dt), y = &quot;Number of Sales Recorded&quot; ) ## `geom_smooth()` using method = &#39;loess&#39; and formula &#39;y ~ x&#39; ## `geom_smooth()` using method = &#39;loess&#39; and formula &#39;y ~ x&#39; 8.10 Disconnect from the database and stop Docker dbDisconnect(con) sp_docker_stop(&quot;adventureworks&quot;) "]
]
